{
  "meta": {
    "project": "SEMAD-METHOD",
    "date": "2025-07-30",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "SEMAD-METHOD is a structured engineering method designed to improve AI-assisted software development by introducing schema-driven workflows, persistent memory systems, automated validation, and advanced workflow orchestration. It aims to minimize AI hallucination, improve code quality, and ensure traceability from product requirements to implementation.",
  "core_goals": [
    "Eliminate ambiguity and interpretation errors by enforcing structured task and checklist schemas.",
    "Maintain persistent working memory and vector-based long-term memory for context retention across workflows.",
    "Enable dynamic plan adaptation with automatic task decomposition to improve task management.",
    "Implement a comprehensive automated validation framework for all artifacts using JSON schemas.",
    "Provide flexible development workflows with user input elicitation and iterative Dev-QA loops.",
    "Clarify agent roles to prevent unauthorized code modifications and ensure clear accountability.",
    "Track and analyze code dependencies using a vector database for proactive impact assessment.",
    "Generate contextual search tools automatically from PRD content to enhance knowledge discovery.",
    "Replace prose summaries with formal StoryContract specifications to ensure traceable and testable requirements.",
    "Improve transparency and monitoring through increased logging, standardized messaging, and health monitoring."
  ],
  "key_features": [
    "Structured Task and Checklist System using YAML/JSON schemas with automatic validation.",
    "Persistent Working Memory system with session-based JSON files and Qdrant vector database for long-term memory.",
    "Dynamic Plan Adaptation module that automatically decomposes large tasks into manageable sub-tasks.",
    "Automated Search Tool Generation extracting keywords from PRDs and mapping to domain-specific tools.",
    "StoryContract System enforcing formal JSON schema contracts for stories replacing prose-based descriptions.",
    "Comprehensive Automated Validation Framework covering all artifacts with build and CI/CD-time checks.",
    "Flexible Workflow Management with options for linear and iterative Dev-QA flows and user input elicitation.",
    "Agent Role Clarification ensuring QA agents review-only and development agents implement code.",
    "Dependency Analysis System storing and analyzing code dependencies in Qdrant for impact checking.",
    "Enhanced Transparency and Monitoring including memory health checks, verbose orchestrator logging, and standard output messages."
  ],
  "user_flow_summary": [
    "Users author tasks and checklists in structured YAML/JSON formats, validated automatically against schemas before processing.",
    "Agents initialize and update working memory files during sessions to preserve context across workflows.",
    "Development tasks are dynamically decomposed if complex, enabling parallel and manageable sub-task execution.",
    "For each story, StoryContracts are created and validated to formalize requirements before implementation begins.",
    "Development workflows offer choice between a linear Dev→QA approach or an iterative Dev↔QA loop, both eliciting necessary user inputs.",
    "QA agents conduct review-only workflows providing feedback without code changes, ensuring role separation.",
    "Dependency analysis runs to assess impact of code changes before implementation and during reviews.",
    "Generated search tools are used to augment knowledge bases, improving developer efficiency and context awareness.",
    "Orchestrator manages workflows with enhanced logging and provides standardized output messages for transparency.",
    "Memory health is monitored continuously, with hygiene processes to prevent hallucination and maintain performance."
  ],
  "validation_criteria": [
    "All structured tasks, checklists, and StoryContracts pass JSON Schema validation without errors.",
    "Working memory files exist and correctly persist session context as JSON files with appropriate content.",
    "Qdrant vector database contains ingested dependency graphs and search tool embeddings up to date.",
    "Dynamic plan adaptation successfully decomposes tasks exceeding configured thresholds.",
    "Automated workflows elicit required user inputs with no missing data points.",
    "QA agent reviews generate feedback without modifying any code artifacts.",
    "Dependency impact analysis reports accurately reflect potential affected components before changes.",
    "Generated search tools match keywords extracted from current PRD content and configurations.",
    "Orchestrator logs and output messages conform to standard formatting and include all necessary information.",
    "Memory health checks report positive status and automatic memory cleaning occurs as scheduled to maintain hygiene."
  ],
  "code_summary": {
    "tech_stack": [
      "JavaScript",
      "Node.js",
      "Commander.js",
      "Qdrant Vector Database",
      "YAML",
      "Jest",
      "OpenAI"
    ],
    "features": [
      {
        "name": "Structured Task Validation",
        "description": "Validates all structured tasks in bmad-core/structured-tasks/ comply with YAML schema format",
        "files": [
          "scripts/validate-all.js",
          "bmad-core/schemas/task-schema.json",
          "bmad-core/structured-tasks/*.yaml"
        ],
        "api_doc": {
          "command": "npm run validate:structured-tasks",
          "parameters": [],
          "output": "Validation results for all structured task YAML files"
        }
      },
      {
        "name": "Structured Checklist Validation",
        "description": "Validates all structured checklists comply with YAML schema format",
        "files": [
          "scripts/validate-all.js",
          "bmad-core/schemas/checklist-schema.json",
          "bmad-core/structured-checklists/*.yaml"
        ],
        "api_doc": {
          "command": "npm run validate:checklists",
          "parameters": [],
          "output": "Validation results for all checklist YAML files"
        }
      },
      {
        "name": "Working Memory Initialization",
        "description": "Initializes working memory system and creates JSON files in .ai/ directory",
        "files": [
          "bmad-core/scripts/init-memory.js"
        ],
        "api_doc": {
          "command": "npm run init:memory",
          "parameters": [],
          "output": "Creates working memory files in .ai/working_memory_*.json"
        }
      },
      {
        "name": "Qdrant Integration",
        "description": "Ingests search results into Qdrant vector database for long-term memory",
        "files": [
          "scripts/ingest-to-qdrant.js"
        ],
        "api_doc": {
          "command": "npm run ingest:search-results",
          "parameters": [],
          "output": "Data ingested into Qdrant database"
        }
      },
      {
        "name": "Search Tool Generation",
        "description": "Generates search tools from PRD content using keyword extraction",
        "files": [
          "scripts/generate-search-tools.js",
          "bmad-core/data/tool-mappings.yaml"
        ],
        "api_doc": {
          "command": "npm run generate:search-tools",
          "parameters": [
            "--prd",
            "--output"
          ],
          "output": "Generated search-tools.yaml file"
        }
      },
      {
        "name": "Search Tool Validation",
        "description": "Validates generated search tool configurations",
        "files": [
          "scripts/validate-search-tools.js"
        ],
        "api_doc": {
          "command": "npm run validate:search-tools",
          "parameters": [],
          "output": "Validation results for search tools"
        }
      },
      {
        "name": "Story Contract Validation",
        "description": "Validates story contracts with required fields using JSON Schema",
        "files": [
          "scripts/validate-story-contract.js",
          "bmad-core/schemas/story-contract-schema.json"
        ],
        "api_doc": {
          "command": "npm run validate:contracts",
          "parameters": [
            "--all"
          ],
          "output": "Story contract validation results"
        }
      },
      {
        "name": "Workflow Orchestration",
        "description": "Manages Dev-QA workflow with linear and iterative options",
        "files": [
          "tools/workflow-orchestrator.js"
        ],
        "api_doc": {
          "command": "npm run orchestrate",
          "parameters": [
            "--flow-type",
            "--story-file"
          ],
          "output": "Orchestrated workflow execution"
        }
      },
      {
        "name": "Agent Building",
        "description": "Builds agent bundles and resolves dependencies",
        "files": [
          "tools/cli.js",
          "tools/builders/web-builder.js"
        ],
        "api_doc": {
          "command": "npm run build:agents",
          "parameters": [],
          "output": "Built agent bundles in dist/agents/"
        }
      },
      {
        "name": "Team Building",
        "description": "Builds team configurations from YAML files",
        "files": [
          "tools/cli.js",
          "tools/builders/web-builder.js",
          "bmad-core/agent-teams/*.yaml"
        ],
        "api_doc": {
          "command": "npm run build:teams",
          "parameters": [],
          "output": "Built team bundles in dist/teams/"
        }
      },
      {
        "name": "Schema Validation Suite",
        "description": "Comprehensive validation of all YAML/JSON artifacts",
        "files": [
          "scripts/validate-schemas.js",
          "scripts/validate-all.js",
          "bmad-core/schemas/*.json"
        ],
        "api_doc": {
          "command": "npm run validate:all",
          "parameters": [],
          "output": "Complete schema validation results"
        }
      },
      {
        "name": "Elicitation Check",
        "description": "Ensures user interaction points are marked with elicit: true",
        "files": [
          "scripts/audit-elicit-flags.js"
        ],
        "api_doc": {
          "command": "npm run check:elicitation",
          "parameters": [],
          "output": "Elicitation flag audit results"
        }
      },
      {
        "name": "Task Scanner",
        "description": "Scans for deprecated task usage and ensures structured tasks are used",
        "files": [
          "scripts/scan-task-usage.js"
        ],
        "api_doc": {
          "command": "npm run scan:tasks",
          "parameters": [],
          "output": "Task usage scan results"
        }
      },
      {
        "name": "Config Validation",
        "description": "Validates core-config.yaml path references",
        "files": [
          "scripts/validate-config-path.js",
          "bmad-core/core-config.yaml"
        ],
        "api_doc": {
          "command": "npm run validate:config",
          "parameters": [],
          "output": "Configuration path validation results"
        }
      },
      {
        "name": "Dev Next Story",
        "description": "Automatically implements the next approved story",
        "files": [
          "scripts/dev-next-story.js"
        ],
        "api_doc": {
          "command": "npm run dev:next-story",
          "parameters": [],
          "output": "Story implementation results"
        }
      },
      {
        "name": "QA Review",
        "description": "QA agent reviews code without modification",
        "files": [
          "scripts/qa-review.js"
        ],
        "api_doc": {
          "command": "npm run qa:review",
          "parameters": [],
          "output": "QA review feedback"
        }
      },
      {
        "name": "Story Generation",
        "description": "Generates stories using YAML template",
        "files": [
          "scripts/generate-story.js",
          "bmad-core/templates/story-tmpl.yaml"
        ],
        "api_doc": {
          "command": "npm run generate:story",
          "parameters": [],
          "output": "Generated story file"
        }
      },
      {
        "name": "Greenfield Orchestration",
        "description": "Manages greenfield workflow with consistent prompts",
        "files": [
          "tools/workflow-orchestrator.js"
        ],
        "api_doc": {
          "command": "npm run orchestrate:greenfield",
          "parameters": [],
          "output": "Greenfield workflow execution"
        }
      },
      {
        "name": "Path Resolution",
        "description": "Resolves file paths from core-config.yaml",
        "files": [
          "tools/workflow-orchestrator.js",
          "bmad-core/core-config.yaml"
        ],
        "api_doc": {
          "command": "npm run orchestrate:path-resolve",
          "parameters": [],
          "output": "Path resolution results"
        }
      },
      {
        "name": "Dependency Analysis",
        "description": "Analyzes code dependencies and stores in Qdrant",
        "files": [
          "scripts/analyze-dependencies.js"
        ],
        "api_doc": {
          "command": "npm run analyze:dependencies",
          "parameters": [],
          "output": "Dependency graph stored in Qdrant"
        }
      },
      {
        "name": "Impact Checking",
        "description": "Checks impact of changes based on dependency analysis",
        "files": [
          "scripts/check-impacts.js"
        ],
        "api_doc": {
          "command": "npm run check:impacts",
          "parameters": [],
          "output": "Impact analysis report"
        }
      },
      {
        "name": "Memory Persistence Test",
        "description": "Tests memory persistence across agent invocations",
        "files": [
          "tests/memory-persistence.test.js"
        ],
        "api_doc": {
          "command": "npm run test:memory-persistence",
          "parameters": [],
          "output": "Memory persistence test results"
        }
      },
      {
        "name": "Interaction Analysis",
        "description": "Analyzes and captures user-agent interactions",
        "files": [
          "scripts/interact-analysis.js"
        ],
        "api_doc": {
          "command": "npm run interact:analysis",
          "parameters": [],
          "output": "Interaction analysis results"
        }
      }
    ]
  }
}
