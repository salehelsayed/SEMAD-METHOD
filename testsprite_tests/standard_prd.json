{
  "meta": {
    "project": "SEMAD-METHOD",
    "version": "1.0.0",
    "date": "2025-07-01",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "SEMAD-METHOD enhances AI-assisted software development by introducing structured, schema-driven workflows, persistent memory, and formal contracts to reduce hallucination, ensure traceability, and improve code quality.",
  "core_goals": [
    "Replace free-form markdown tasks with deterministic YAML/JSON schemas",
    "Implement working memory and vector database for persistent agent context",
    "Automatically decompose complex tasks with dynamic planning",
    "Automatically generate search tools from PRD for context-aware documentation discovery",
    "Use StoryContract system to formalize requirements and prevent implementation drift",
    "Apply automated validation across all workflow transitions to ensure schema compliance"
  ],
  "key_features": [
    "Structured Task & Checklist System with YAML/JSON schemas and automated validation",
    "Working Memory & Scratchboard enabling session persistence and long-term memory storage with Qdrant",
    "Dynamic Plan Adaptation for automatic task decomposition and improved execution",
    "Automated Search Tool Generation from PRD documents to assist contextual knowledge retrieval",
    "StoryContract System for formal contract-driven workflows replacing prose summaries",
    "Automated Validation Framework enforcing schema validation at all handoff points"
  ],
  "user_flow_summary": [
    "Users define tasks and checklists using structured YAML/JSON schemas replacing markdown formats",
    "Agents load and validate configurations using the Agent Management system",
    "Working memory is initialized and maintained during agent workflows with scratchpads and vector database integration",
    "Complex tasks are analyzed and decomposed dynamically by the planner module with configurable rules",
    "Search tools are generated automatically from PRDs and validated before ingestion into the vector database",
    "Story contracts are created, validated, and linked to implementation with automated quality gates",
    "CI/CD pipelines execute build and validate commands ensuring compliance with schemas and contracts"
  ],
  "validation_criteria": [
    "All tasks and checklists must adhere to defined JSON Schema specifications",
    "Working memory must persist correctly and integrate with Qdrant vector database",
    "Dynamic plan decomposition must trigger for tasks exceeding complexity thresholds",
    "Search tools generated must pass validation against expected keywords and mappings",
    "Story contracts must validate without errors and match implementation artifacts",
    "Automated validation must run successfully during build and CI/CD with no schema violations"
  ],
  "api_doc": {
    "openapi": "3.0.0",
    "info": {
      "title": "SEMAD-METHOD Unified API Documentation",
      "version": "1.0.0"
    },
    "paths": {
      "/build": {
        "description": "Build agents and teams with dependency resolution"
      },
      "/validate": {
        "description": "Validate schemas, tasks, and configurations"
      },
      "/list:agents": {
        "description": "List available agents and their capabilities"
      },
      "/agents/load": {
        "description": "Load agent configurations from markdown files"
      },
      "/agents/validate": {
        "description": "Validate agent dependencies and configurations"
      },
      "/teams/build": {
        "description": "Build agent teams with bundled dependencies"
      },
      "/tasks/execute": {
        "description": "Execute structured tasks with schema validation"
      },
      "/tasks/plan": {
        "description": "Dynamic task planning and decomposition"
      },
      "/tasks/validate": {
        "description": "Validate task schemas and dependencies"
      },
      "/validate/schemas": {
        "description": "Validate JSON schemas for tasks and checklists"
      },
      "/validate/contracts": {
        "description": "Validate story contracts against schema"
      },
      "/validate/all": {
        "description": "Run comprehensive validation across all components"
      },
      "/memory/working": {
        "description": "Manage working memory for active tasks"
      },
      "/memory/longterm": {
        "description": "Store and retrieve from vector database"
      },
      "/memory/init": {
        "description": "Initialize memory systems"
      },
      "/search/generate": {
        "description": "Generate search tools from PRD documents"
      },
      "/search/validate": {
        "description": "Validate generated search tools"
      },
      "/search/ingest": {
        "description": "Ingest search results to vector database"
      },
      "/story/validate": {
        "description": "Validate individual story contracts"
      },
      "/story/validate-all": {
        "description": "Validate all story contracts in bulk"
      },
      "/story/contract": {
        "description": "Generate and manage story contracts"
      },
      "/templates/load": {
        "description": "Load and process YAML templates"
      },
      "/templates/validate": {
        "description": "Validate template schemas"
      },
      "/workflows/execute": {
        "description": "Execute predefined workflows"
      },
      "/datamodel/generate": {
        "description": "Generate test suites for data models"
      },
      "/datamodel/validate": {
        "description": "Validate generated tests"
      },
      "/datamodel/frameworks": {
        "description": "Support for Jest, Mocha, and other frameworks"
      },
      "/install": {
        "description": "Install BMAD method in IDE environments"
      },
      "/configure": {
        "description": "Configure agent settings and dependencies"
      },
      "/setup": {
        "description": "Setup project-specific configurations"
      }
    }
  },
  "code_summary": {
    "tech_stack": [
      "Node.js",
      "JavaScript",
      "YAML",
      "JSON Schema",
      "Jest",
      "Commander.js",
      "AJV",
      "Qdrant Vector Database",
      "Markdown",
      "CLI"
    ],
    "features": [
      {
        "name": "CLI Management",
        "description": "Main CLI interface for bmad-method with build, validate, and list commands",
        "files": [
          "tools/cli.js",
          "tools/bmad-npx-wrapper.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "BMAD CLI API",
            "version": "4.31.0"
          },
          "paths": {
            "/build": {
              "description": "Build agents and teams with dependency resolution"
            },
            "/validate": {
              "description": "Validate schemas, tasks, and configurations"
            },
            "/list:agents": {
              "description": "List available agents and their capabilities"
            }
          }
        }
      },
      {
        "name": "Agent Management System",
        "description": "Load, validate, and manage AI agents with role-based capabilities and dependencies",
        "files": [
          "bmad-core/agents/",
          "bmad-core/agent-teams/",
          "tools/lib/dependency-resolver.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Agent Management API",
            "version": "1.0.0"
          },
          "paths": {
            "/agents/load": {
              "description": "Load agent configurations from markdown files"
            },
            "/agents/validate": {
              "description": "Validate agent dependencies and configurations"
            },
            "/teams/build": {
              "description": "Build agent teams with bundled dependencies"
            }
          }
        }
      },
      {
        "name": "Task Execution Engine",
        "description": "Execute structured tasks with YAML/JSON schemas, dynamic planning, and validation",
        "files": [
          "tools/task-runner.js",
          "bmad-core/structured-tasks/",
          "bmad-core/tools/dynamic-planner.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Task Execution API",
            "version": "1.0.0"
          },
          "paths": {
            "/tasks/execute": {
              "description": "Execute structured tasks with schema validation"
            },
            "/tasks/plan": {
              "description": "Dynamic task planning and decomposition"
            },
            "/tasks/validate": {
              "description": "Validate task schemas and dependencies"
            }
          }
        }
      },
      {
        "name": "Schema Validation System",
        "description": "Comprehensive validation for tasks, checklists, story contracts, and configurations using JSON Schema",
        "files": [
          "scripts/validate-schemas.js",
          "scripts/validate-all.js",
          "bmad-core/schemas/",
          "bmad-core/utils/story-contract-validator.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Schema Validation API",
            "version": "1.0.0"
          },
          "paths": {
            "/validate/schemas": {
              "description": "Validate JSON schemas for tasks and checklists"
            },
            "/validate/contracts": {
              "description": "Validate story contracts against schema"
            },
            "/validate/all": {
              "description": "Run comprehensive validation across all components"
            }
          }
        }
      },
      {
        "name": "Memory Management System",
        "description": "Working memory and long-term memory management with Qdrant vector database integration",
        "files": [
          "bmad-core/utils/memory-lifecycle.js",
          "bmad-core/utils/memory-transaction.js",
          "bmad-core/utils/qdrant.js",
          "bmad-core/scripts/init-memory.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Memory Management API",
            "version": "1.0.0"
          },
          "paths": {
            "/memory/working": {
              "description": "Manage working memory for active tasks"
            },
            "/memory/longterm": {
              "description": "Store and retrieve from vector database"
            },
            "/memory/init": {
              "description": "Initialize memory systems"
            }
          }
        }
      },
      {
        "name": "Search Tools Generation",
        "description": "Automated generation of search tools from PRD documents for context discovery",
        "files": [
          "scripts/generate-search-tools.js",
          "scripts/validate-search-tools.js",
          "scripts/ingest-to-qdrant.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Search Tools API",
            "version": "1.0.0"
          },
          "paths": {
            "/search/generate": {
              "description": "Generate search tools from PRD documents"
            },
            "/search/validate": {
              "description": "Validate generated search tools"
            },
            "/search/ingest": {
              "description": "Ingest search results to vector database"
            }
          }
        }
      },
      {
        "name": "Story Contract System",
        "description": "Formal contract system between planning and implementation phases to prevent drift",
        "files": [
          "scripts/validate-story-contract.js",
          "bmad-core/utils/story-contract-validator.js",
          "bmad-core/schemas/story-contract-schema.json"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Story Contract API",
            "version": "1.0.0"
          },
          "paths": {
            "/story/validate": {
              "description": "Validate individual story contracts"
            },
            "/story/validate-all": {
              "description": "Validate all story contracts in bulk"
            },
            "/story/contract": {
              "description": "Generate and manage story contracts"
            }
          }
        }
      },
      {
        "name": "Template Management",
        "description": "Manage and process YAML templates for PRDs, architecture, stories, and workflows",
        "files": [
          "bmad-core/templates/",
          "bmad-core/workflows/"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Template Management API",
            "version": "1.0.0"
          },
          "paths": {
            "/templates/load": {
              "description": "Load and process YAML templates"
            },
            "/templates/validate": {
              "description": "Validate template schemas"
            },
            "/workflows/execute": {
              "description": "Execute predefined workflows"
            }
          }
        }
      },
      {
        "name": "Datamodel Test Generator",
        "description": "Generate comprehensive test suites for data models with multiple framework support",
        "files": [
          "bmad-core/utils/datamodel-test-generator.js",
          "bmad-core/templates/datamodel-test-example.md"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Datamodel Test API",
            "version": "1.0.0"
          },
          "paths": {
            "/datamodel/generate": {
              "description": "Generate test suites for data models"
            },
            "/datamodel/validate": {
              "description": "Validate generated tests"
            },
            "/datamodel/frameworks": {
              "description": "Support for Jest, Mocha, and other frameworks"
            }
          }
        }
      },
      {
        "name": "Installation and Setup System",
        "description": "Automated installation and configuration system for different IDE environments",
        "files": [
          "tools/installer/",
          "tools/installer/bin/bmad.js",
          "tools/installer/lib/"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Installation API",
            "version": "1.0.0"
          },
          "paths": {
            "/install": {
              "description": "Install BMAD method in IDE environments"
            },
            "/configure": {
              "description": "Configure agent settings and dependencies"
            },
            "/setup": {
              "description": "Setup project-specific configurations"
            }
          }
        }
      }
    ]
  }
}
