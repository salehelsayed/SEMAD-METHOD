{
  "tech_stack": [
    "Node.js",
    "JavaScript", 
    "YAML",
    "JSON Schema",
    "Jest",
    "Commander.js",
    "AJV",
    "Qdrant Vector Database",
    "Markdown",
    "CLI"
  ],
  "agent_connectivity_status": "PERFECT - 100% (16/16 tests passing)",
  "total_dependencies": 135,
  "production_ready": true,
  "features": [
    {
      "name": "CLI Management",
      "description": "Main CLI interface for bmad-method with build, validate, and list commands",
      "files": [
        "tools/cli.js",
        "tools/bmad-npx-wrapper.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "BMAD CLI API",
          "version": "4.31.0"
        },
        "paths": {
          "/build": {
            "description": "Build agents and teams with dependency resolution"
          },
          "/validate": {
            "description": "Validate schemas, tasks, and configurations"
          },
          "/list:agents": {
            "description": "List available agents and their capabilities"
          }
        }
      }
    },
    {
      "name": "Agent Management System",
      "description": "Load, validate, and manage AI agents with role-based capabilities and dependencies",
      "files": [
        "bmad-core/agents/",
        "bmad-core/agent-teams/",
        "tools/lib/dependency-resolver.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Agent Management API",
          "version": "1.0.0"
        },
        "paths": {
          "/agents/load": {
            "description": "Load agent configurations from markdown files"
          },
          "/agents/validate": {
            "description": "Validate agent dependencies and configurations"
          },
          "/teams/build": {
            "description": "Build agent teams with bundled dependencies"
          }
        }
      }
    },
    {
      "name": "Task Execution Engine", 
      "description": "Execute structured tasks with YAML/JSON schemas, dynamic planning, and validation",
      "files": [
        "tools/task-runner.js",
        "bmad-core/structured-tasks/",
        "bmad-core/tools/dynamic-planner.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Task Execution API",
          "version": "1.0.0"
        },
        "paths": {
          "/tasks/execute": {
            "description": "Execute structured tasks with schema validation"
          },
          "/tasks/plan": {
            "description": "Dynamic task planning and decomposition"
          },
          "/tasks/validate": {
            "description": "Validate task schemas and dependencies"
          }
        }
      }
    },
    {
      "name": "Schema Validation System",
      "description": "Comprehensive validation for tasks, checklists, story contracts, and configurations using JSON Schema",
      "files": [
        "scripts/validate-schemas.js",
        "scripts/validate-all.js",
        "bmad-core/schemas/",
        "bmad-core/utils/story-contract-validator.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Schema Validation API",
          "version": "1.0.0"
        },
        "paths": {
          "/validate/schemas": {
            "description": "Validate JSON schemas for tasks and checklists"
          },
          "/validate/contracts": {
            "description": "Validate story contracts against schema"
          },
          "/validate/all": {
            "description": "Run comprehensive validation across all components"
          }
        }
      }
    },
    {
      "name": "Memory Management System",
      "description": "Working memory and long-term memory management with Qdrant vector database integration",
      "files": [
        "bmad-core/utils/memory-lifecycle.js",
        "bmad-core/utils/memory-transaction.js",
        "bmad-core/utils/qdrant.js",
        "bmad-core/scripts/init-memory.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Memory Management API",
          "version": "1.0.0"
        },
        "paths": {
          "/memory/working": {
            "description": "Manage working memory for active tasks"
          },
          "/memory/longterm": {
            "description": "Store and retrieve from vector database"
          },
          "/memory/init": {
            "description": "Initialize memory systems"
          }
        }
      }
    },
    {
      "name": "Search Tools Generation",
      "description": "Automated generation of search tools from PRD documents for context discovery",
      "files": [
        "scripts/generate-search-tools.js",
        "scripts/validate-search-tools.js",
        "scripts/ingest-to-qdrant.js"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Search Tools API",
          "version": "1.0.0"
        },
        "paths": {
          "/search/generate": {
            "description": "Generate search tools from PRD documents"
          },
          "/search/validate": {
            "description": "Validate generated search tools"
          },
          "/search/ingest": {
            "description": "Ingest search results to vector database"
          }
        }
      }
    },
    {
      "name": "Story Contract System",
      "description": "Formal contract system between planning and implementation phases to prevent drift",
      "files": [
        "scripts/validate-story-contract.js",
        "bmad-core/utils/story-contract-validator.js",
        "bmad-core/schemas/story-contract-schema.json"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Story Contract API",
          "version": "1.0.0"
        },
        "paths": {
          "/story/validate": {
            "description": "Validate individual story contracts"
          },
          "/story/validate-all": {
            "description": "Validate all story contracts in bulk"
          },
          "/story/contract": {
            "description": "Generate and manage story contracts"
          }
        }
      }
    },
    {
      "name": "Template Management",
      "description": "Manage and process YAML templates for PRDs, architecture, stories, and workflows",
      "files": [
        "bmad-core/templates/",
        "bmad-core/workflows/"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Template Management API",
          "version": "1.0.0"
        },
        "paths": {
          "/templates/load": {
            "description": "Load and process YAML templates"
          },
          "/templates/validate": {
            "description": "Validate template schemas"
          },
          "/workflows/execute": {
            "description": "Execute predefined workflows"
          }
        }
      }
    },
    {
      "name": "Datamodel Test Generator",
      "description": "Generate comprehensive test suites for data models with multiple framework support",
      "files": [
        "bmad-core/utils/datamodel-test-generator.js",
        "bmad-core/templates/datamodel-test-example.md"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Datamodel Test API",
          "version": "1.0.0"
        },
        "paths": {
          "/datamodel/generate": {
            "description": "Generate test suites for data models"
          },
          "/datamodel/validate": {
            "description": "Validate generated tests"
          },
          "/datamodel/frameworks": {
            "description": "Support for Jest, Mocha, and other frameworks"
          }
        }
      }
    },
    {
      "name": "Installation and Setup System",
      "description": "Automated installation and configuration system for different IDE environments",
      "files": [
        "tools/installer/",
        "tools/installer/bin/bmad.js",
        "tools/installer/lib/"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Installation API",
          "version": "1.0.0"
        },
        "paths": {
          "/install": {
            "description": "Install BMAD method in IDE environments"
          },
          "/configure": {
            "description": "Configure agent settings and dependencies"
          },
          "/setup": {
            "description": "Setup project-specific configurations"
          }
        }
      }
    }
  ]
} 