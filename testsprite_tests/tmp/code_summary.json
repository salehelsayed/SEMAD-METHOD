{
  "tech_stack": ["JavaScript", "Node.js", "Commander.js", "Qdrant Vector Database", "YAML", "Jest", "OpenAI"],
  "features": [
    {
      "name": "Structured Task Validation",
      "description": "Validates all structured tasks in bmad-core/structured-tasks/ comply with YAML schema format",
      "files": ["scripts/validate-all.js", "bmad-core/schemas/task-schema.json", "bmad-core/structured-tasks/*.yaml"],
      "api_doc": {
        "command": "npm run validate:structured-tasks",
        "parameters": [],
        "output": "Validation results for all structured task YAML files"
      }
    },
    {
      "name": "Structured Checklist Validation",
      "description": "Validates all structured checklists comply with YAML schema format",
      "files": ["scripts/validate-all.js", "bmad-core/schemas/checklist-schema.json", "bmad-core/structured-checklists/*.yaml"],
      "api_doc": {
        "command": "npm run validate:checklists",
        "parameters": [],
        "output": "Validation results for all checklist YAML files"
      }
    },
    {
      "name": "Working Memory Initialization",
      "description": "Initializes working memory system and creates JSON files in .ai/ directory",
      "files": ["bmad-core/scripts/init-memory.js"],
      "api_doc": {
        "command": "npm run init:memory",
        "parameters": [],
        "output": "Creates working memory files in .ai/working_memory_*.json"
      }
    },
    {
      "name": "Qdrant Integration",
      "description": "Ingests search results into Qdrant vector database for long-term memory",
      "files": ["scripts/ingest-to-qdrant.js"],
      "api_doc": {
        "command": "npm run ingest:search-results",
        "parameters": [],
        "output": "Data ingested into Qdrant database"
      }
    },
    {
      "name": "Search Tool Generation",
      "description": "Generates search tools from PRD content using keyword extraction",
      "files": ["scripts/generate-search-tools.js", "bmad-core/data/tool-mappings.yaml"],
      "api_doc": {
        "command": "npm run generate:search-tools",
        "parameters": ["--prd", "--output"],
        "output": "Generated search-tools.yaml file"
      }
    },
    {
      "name": "Search Tool Validation",
      "description": "Validates generated search tool configurations",
      "files": ["scripts/validate-search-tools.js"],
      "api_doc": {
        "command": "npm run validate:search-tools",
        "parameters": [],
        "output": "Validation results for search tools"
      }
    },
    {
      "name": "Story Contract Validation",
      "description": "Validates story contracts with required fields using JSON Schema",
      "files": ["scripts/validate-story-contract.js", "bmad-core/schemas/story-contract-schema.json"],
      "api_doc": {
        "command": "npm run validate:contracts",
        "parameters": ["--all"],
        "output": "Story contract validation results"
      }
    },
    {
      "name": "Workflow Orchestration",
      "description": "Manages Dev-QA workflow with linear and iterative options",
      "files": ["tools/workflow-orchestrator.js"],
      "api_doc": {
        "command": "npm run orchestrate",
        "parameters": ["--flow-type", "--story-file"],
        "output": "Orchestrated workflow execution"
      }
    },
    {
      "name": "Agent Building",
      "description": "Builds agent bundles and resolves dependencies",
      "files": ["tools/cli.js", "tools/builders/web-builder.js"],
      "api_doc": {
        "command": "npm run build:agents",
        "parameters": [],
        "output": "Built agent bundles in dist/agents/"
      }
    },
    {
      "name": "Team Building",
      "description": "Builds team configurations from YAML files",
      "files": ["tools/cli.js", "tools/builders/web-builder.js", "bmad-core/agent-teams/*.yaml"],
      "api_doc": {
        "command": "npm run build:teams",
        "parameters": [],
        "output": "Built team bundles in dist/teams/"
      }
    },
    {
      "name": "Schema Validation Suite",
      "description": "Comprehensive validation of all YAML/JSON artifacts",
      "files": ["scripts/validate-schemas.js", "scripts/validate-all.js", "bmad-core/schemas/*.json"],
      "api_doc": {
        "command": "npm run validate:all",
        "parameters": [],
        "output": "Complete schema validation results"
      }
    },
    {
      "name": "Elicitation Check",
      "description": "Ensures user interaction points are marked with elicit: true",
      "files": ["scripts/audit-elicit-flags.js"],
      "api_doc": {
        "command": "npm run check:elicitation",
        "parameters": [],
        "output": "Elicitation flag audit results"
      }
    },
    {
      "name": "Task Scanner",
      "description": "Scans for deprecated task usage and ensures structured tasks are used",
      "files": ["scripts/scan-task-usage.js"],
      "api_doc": {
        "command": "npm run scan:tasks",
        "parameters": [],
        "output": "Task usage scan results"
      }
    },
    {
      "name": "Config Validation",
      "description": "Validates core-config.yaml path references",
      "files": ["scripts/validate-config-path.js", "bmad-core/core-config.yaml"],
      "api_doc": {
        "command": "npm run validate:config",
        "parameters": [],
        "output": "Configuration path validation results"
      }
    },
    {
      "name": "Dev Next Story",
      "description": "Automatically implements the next approved story",
      "files": ["scripts/dev-next-story.js"],
      "api_doc": {
        "command": "npm run dev:next-story",
        "parameters": [],
        "output": "Story implementation results"
      }
    },
    {
      "name": "QA Review",
      "description": "QA agent reviews code without modification",
      "files": ["scripts/qa-review.js"],
      "api_doc": {
        "command": "npm run qa:review",
        "parameters": [],
        "output": "QA review feedback"
      }
    },
    {
      "name": "Story Generation",
      "description": "Generates stories using YAML template",
      "files": ["scripts/generate-story.js", "bmad-core/templates/story-tmpl.yaml"],
      "api_doc": {
        "command": "npm run generate:story",
        "parameters": [],
        "output": "Generated story file"
      }
    },
    {
      "name": "Greenfield Orchestration",
      "description": "Manages greenfield workflow with consistent prompts",
      "files": ["tools/workflow-orchestrator.js"],
      "api_doc": {
        "command": "npm run orchestrate:greenfield",
        "parameters": [],
        "output": "Greenfield workflow execution"
      }
    },
    {
      "name": "Path Resolution",
      "description": "Resolves file paths from core-config.yaml",
      "files": ["tools/workflow-orchestrator.js", "bmad-core/core-config.yaml"],
      "api_doc": {
        "command": "npm run orchestrate:path-resolve",
        "parameters": [],
        "output": "Path resolution results"
      }
    },
    {
      "name": "Dependency Analysis",
      "description": "Analyzes code dependencies and stores in Qdrant",
      "files": ["scripts/analyze-dependencies.js"],
      "api_doc": {
        "command": "npm run analyze:dependencies",
        "parameters": [],
        "output": "Dependency graph stored in Qdrant"
      }
    },
    {
      "name": "Impact Checking",
      "description": "Checks impact of changes based on dependency analysis",
      "files": ["scripts/check-impacts.js"],
      "api_doc": {
        "command": "npm run check:impacts",
        "parameters": [],
        "output": "Impact analysis report"
      }
    },
    {
      "name": "Memory Persistence Test",
      "description": "Tests memory persistence across agent invocations",
      "files": ["tests/memory-persistence.test.js"],
      "api_doc": {
        "command": "npm run test:memory-persistence",
        "parameters": [],
        "output": "Memory persistence test results"
      }
    },
    {
      "name": "Interaction Analysis",
      "description": "Analyzes and captures user-agent interactions",
      "files": ["scripts/interact-analysis.js"],
      "api_doc": {
        "command": "npm run interact:analysis",
        "parameters": [],
        "output": "Interaction analysis results"
      }
    }
  ]
}