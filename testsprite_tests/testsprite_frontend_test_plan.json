[
  {
    "id": "TC001",
    "title": "Validate Structured Tasks Against JSON Schema",
    "description": "Ensure all structured task YAML files comply with the defined JSON schema without validation errors.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run structured task validation command to validate all task YAML files"
      },
      {
        "type": "assertion",
        "description": "Verify that validation reports zero errors and all structured tasks pass schema validation"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Validate Structured Checklists Against JSON Schema",
    "description": "Confirm all structured checklists are validated successfully against checklist JSON schema, ensuring no errors or schema mismatches.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run checklist validation command on all checklist YAML files"
      },
      {
        "type": "assertion",
        "description": "Ensure validation completes without errors, confirming checklist structure correctness"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Verify Working Memory Initialization",
    "description": "Check that working memory initialization creates properly formatted JSON files in the designated .ai directory, preserving session context.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Execute working memory initialization command"
      },
      {
        "type": "assertion",
        "description": "Verify the presence of working_memory_*.json files in .ai/ directory"
      },
      {
        "type": "assertion",
        "description": "Validate JSON content for correctness and session context preservation"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Test Qdrant Vector Database Integration for Dependency and Search Data",
    "description": "Ensure ingestion scripts properly add dependency graphs and search embeddings to Qdrant vector database, maintaining data integrity and retrievability.",
    "category": "integration",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run ingest-to-qdrant script with sample dependency and search result data"
      },
      {
        "type": "assertion",
        "description": "Confirm successful ingestion output message"
      },
      {
        "type": "assertion",
        "description": "Query Qdrant database to verify data presence and correctness"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Generate and Validate Search Tools from PRD Content",
    "description": "Automatically generate search tool configurations from PRD keyword extraction, then validate generated tools against their schema.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run search tool generation with sample PRD input"
      },
      {
        "type": "assertion",
        "description": "Verify output search-tools.yaml file is created and contains mappings from PRD keywords"
      },
      {
        "type": "action",
        "description": "Run search tool validation command on generated file"
      },
      {
        "type": "assertion",
        "description": "Check validation results confirm no errors in search tool configurations"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Validate StoryContracts Using JSON Schemas",
    "description": "Ensure all story contracts have required fields and formats by validating against the official StoryContract schema.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Execute story contract validation with all available contracts"
      },
      {
        "type": "assertion",
        "description": "Confirm validation passes with no schema errors and all required fields present"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Automate Dynamic Plan Adaptation and Task Decomposition",
    "description": "Verify that the dynamic plan adaptation module correctly decomposes large or complex tasks into sub-tasks according to predefined thresholds and rules.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Submit complex task requiring decomposition to system"
      },
      {
        "type": "assertion",
        "description": "Confirm output contains multiple manageable sub-tasks instead of single large task"
      },
      {
        "type": "assertion",
        "description": "Verify sub-tasks adhere to schema and maintain logical dependency ordering"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Verify User Input Elicitation in Workflows",
    "description": "Ensure workflow automation elicits required user inputs at correct points with no missing or skipped interaction required for task completion.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Initiate workflow that requires user input"
      },
      {
        "type": "assertion",
        "description": "Check that all prompts marked with elicit: true appear and capture valid user input"
      },
      {
        "type": "assertion",
        "description": "Confirm subsequent workflow steps proceed only after user input is submitted"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "QA Agent Review Workflow Without Code Modification",
    "description": "Validate that QA agents can review code and generate feedback reports without making any changes to code artifacts, enforcing role separation rules.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Trigger QA review command on existing codebase"
      },
      {
        "type": "assertion",
        "description": "Ensure generated feedback logs exist and contain review comments"
      },
      {
        "type": "assertion",
        "description": "Verify no code files are modified during review process"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Perform Dependency Impact Analysis Before Code Changes",
    "description": "Test that dependency analysis system correctly identifies affected components from proposed code changes and reports impacts accurately before implementation.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run dependency analysis command with sample code change inputs"
      },
      {
        "type": "action",
        "description": "Run impact checking command using analysis results"
      },
      {
        "type": "assertion",
        "description": "Confirm impact analysis report lists all potentially affected components correctly"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Verify Orchestrator Logs and Output Message Standards",
    "description": "Check that workflow orchestrator runs produce verbose, standardized logs and console outputs that contain all necessary workflow state information.",
    "category": "integration",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run orchestrator command under typical workflow scenario"
      },
      {
        "type": "assertion",
        "description": "Inspect logs for presence of timestamps, workflow step details, and error/warning messages if any"
      },
      {
        "type": "assertion",
        "description": "Verify console output messages conform to standard format documented"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Validate Persistent Memory Hygiene and Health Checks",
    "description": "Test memory systemâ€™s health monitoring and cleaning mechanisms trigger appropriately, maintaining performance and preventing hallucinations during long workflows.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run memory health check scripts periodically during workflow"
      },
      {
        "type": "assertion",
        "description": "Verify health reports indicate positive status with no anomalies"
      },
      {
        "type": "action",
        "description": "Trigger automatic memory cleaning process"
      },
      {
        "type": "assertion",
        "description": "Validate that memory cleaning occurs as scheduled and improves memory hygiene without data loss"
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Schema Validation Suite Coverage Test",
    "description": "Execute comprehensive schema validation covering all YAML/JSON artifacts including tasks, checklists, story contracts, and configurations to guarantee full compliance.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run complete schema validation command across all schema-supported files"
      },
      {
        "type": "assertion",
        "description": "Ensure no schema validation errors are reported for any artifact types"
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Test Elicitation Flags Are Properly Marked in User Interaction Points",
    "description": "Check that all user interaction points in workflows are correctly flagged with elicit: true to ensure user input elicitation happens seamlessly in iterative flows.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Run audit elicit flags script on workflows"
      },
      {
        "type": "assertion",
        "description": "Validate that all required interaction steps have elicit flag set to true"
      },
      {
        "type": "assertion",
        "description": "Confirm no missing or unmarked user input points"
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Task Scanner Ensures No Deprecated or Improper Task Usage",
    "description": "Verify that the system scans for and flags any deprecated or improper usage of tasks ensuring all tasks conform to the structured task schema and guidelines.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Run task scanner script on codebase and task definitions"
      },
      {
        "type": "assertion",
        "description": "Ensure scan report shows no deprecated task usage or unstructured tasks"
      }
    ]
  },
  {
    "id": "TC016",
    "title": "Configuration Path Validation for core-config.yaml",
    "description": "Check that all path references in core-config.yaml are correct, accessible, and valid according to validation rules.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run configuration validation command for core-config.yaml paths"
      },
      {
        "type": "assertion",
        "description": "Verify no invalid or broken path references are found"
      }
    ]
  },
  {
    "id": "TC017",
    "title": "Test Automatic Implementation of Next Approved Story",
    "description": "Confirm that system automates implementation of the next approved story correctly, generating valid story files and progressing workflow as expected.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run dev-next-story script to automatically implement next story"
      },
      {
        "type": "assertion",
        "description": "Check resulting story file is generated and valid per schema"
      },
      {
        "type": "assertion",
        "description": "Verify workflow transitions to next state correctly"
      }
    ]
  },
  {
    "id": "TC018",
    "title": "Memory Persistence Across Agent Invocations",
    "description": "Test that working memory persists correctly between agent calls, preserving context in session JSON files without data corruption or loss.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run memory persistence test executing multiple sequential agent calls"
      },
      {
        "type": "assertion",
        "description": "Confirm state is maintained across calls and final memory content is consistent and correct"
      }
    ]
  },
  {
    "id": "TC019",
    "title": "Workflow Orchestration with Linear and Iterative Dev-QA Flows",
    "description": "Validate correct orchestration of workflows in both linear (Devâ†’QA) and iterative (Devâ†”QA) modes, ensuring elicitation, feedback loops, and role separation function as expected.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run workflow orchestrator with linear flow on sample story"
      },
      {
        "type": "assertion",
        "description": "Confirm workflow completes all steps with proper user inputs and transitions"
      },
      {
        "type": "action",
        "description": "Run orchestrator with iterative flow mode on sample story"
      },
      {
        "type": "assertion",
        "description": "Validate multiple Dev and QA cycles execute with input elicitation and feedback loops"
      }
    ]
  },
  {
    "id": "TC020",
    "title": "Generated Search Tools Match Extracted PRD Keywords",
    "description": "Ensure that generated search tools accurately reflect keywords and topics extracted from PRD content, supporting enhanced developer knowledge discovery.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Generate search tools from sample PRD content"
      },
      {
        "type": "assertion",
        "description": "Verify generated search tool keywords and domains correspond to PRD extracted keywords"
      }
    ]
  }
]
