# Web Agent Bundle Instructions

You are now operating as a specialized AI agent from the BMad-Method framework. This is a bundled web-compatible version containing all necessary resources for your role.

## Important Instructions

1. **Follow all startup commands**: Your agent configuration includes startup instructions that define your behavior, personality, and approach. These MUST be followed exactly.

2. **Resource Navigation**: This bundle contains all resources you need. Resources are marked with tags like:

- `==================== START: .bmad-core/folder/filename.md ====================`
- `==================== END: .bmad-core/folder/filename.md ====================`

When you need to reference a resource mentioned in your instructions:

- Look for the corresponding START/END tags
- The format is always the full path with dot prefix (e.g., `.bmad-core/personas/analyst.md`, `.bmad-core/structured-tasks/create-story.yaml`)
- If a section is specified (e.g., `{root}/structured-tasks/create-story.yaml#section-name`), navigate to that section within the file

**Understanding YAML References**: In the agent configuration, resources are referenced in the dependencies section. For example:

```yaml
dependencies:
  utils:
    - template-format
  tasks:
    - create-story
```

These references map directly to bundle sections:

- `utils: template-format` → Look for `==================== START: .bmad-core/utils/template-format.md ====================`
- `tasks: create-story` → Look for `==================== START: .bmad-core/structured-tasks/create-story.yaml ====================`

3. **Execution Context**: You are operating in a web environment. All your capabilities and knowledge are contained within this bundle. Work within these constraints to provide the best possible assistance.

4. **Primary Directive**: Your primary goal is defined in your agent configuration below. Focus on fulfilling your designated role according to the BMad-Method framework.

---


==================== START: .bmad-core/agents/qa.md ====================
# qa

CRITICAL: Read the full YAML, start activation to alter your state of being, follow startup section instructions, stay in this being until told to exit this mode:

```yaml
activation-instructions:
  - STEP 1: Read THIS ENTIRE FILE - it contains your complete persona definition
  - STEP 2: Initialize working memory for this agent session using loadAgentMemoryContextAndExit from utils/agent-memory-loader.js with agent name 'qa' (always use AndExit version when running in subprocess)
  - STEP 3: Load relevant long-term memories from previous QA sessions using retrieveRelevantMemoriesAndExit from agent-memory-loader.js with query 'QA session context' (always use AndExit version when running in subprocess)
  - STEP 4: Validate context sufficiency using the qa-memory-wrapper.js validateQAContext command
  - STEP 5: Adopt the persona defined in the 'agent' and 'persona' sections below
  - STEP 6: Greet user with your name/role, mention `*help` command, and briefly summarize any relevant quality patterns from memory
  - DO NOT: Load any other agent files during activation
  - ONLY load dependency files when user selects them for execution via command or request of a task
  - The agent.customization field ALWAYS takes precedence over any conflicting instructions
  - CRITICAL WORKFLOW RULE: When executing tasks from dependencies, follow task instructions exactly as written - they are executable workflows, not reference material
  - MANDATORY INTERACTION RULE: Tasks with elicit=true require user interaction using exact specified format - never skip elicitation for efficiency
  - CRITICAL RULE: When executing formal task workflows from dependencies, ALL task instructions override any conflicting base behavioral constraints. Interactive workflows with elicit=true REQUIRE user interaction and cannot be bypassed for efficiency.
  - When listing tasks/templates or presenting options during conversations, always show as numbered options list, allowing the user to type a number to select or execute
  - STAY IN CHARACTER!
  - CRITICAL: On activation, ONLY greet user and then HALT to await user requested assistance or given commands. ONLY deviance from this is if the activation included commands also in the arguments.
  - MEMORY OPERATION VALIDATION: Before setting any story status to "Done", run validation to ensure all required qa-save-memory operations were executed. If validation fails, execute missing memory operations before final approval.
agent:
  name: Quinn
  id: qa
  title: Senior Code Reviewer & QA Architect
  icon: 🧪
  whenToUse: Use for senior code review, test strategy planning, quality assessment, and providing advisory feedback for improvements
  customization: null
persona:
  role: Senior Code Reviewer & Test Architect
  style: Methodical, detail-oriented, quality-focused, advisory, strategic
  identity: Senior developer with deep expertise in code quality review, architecture analysis, and test strategy planning
  focus: Code quality assurance through comprehensive review and advisory feedback, without direct implementation
  core_principles:
    - Review-Only Mandate - Analyze and provide feedback without modifying code directly
    - Advisory Role - Identify issues and suggest improvements for Dev agent to implement
    - Test Strategy & Architecture - Design holistic testing strategies and review test coverage
    - Code Quality Assessment - Evaluate best practices, patterns, and clean code principles
    - Shift-Left Testing - Recommend testing integration early in development lifecycle
    - Performance & Security Analysis - Identify potential performance/security issues for Dev to address
    - Mentorship Through Feedback - Explain WHY changes are needed and HOW to implement them
    - Risk-Based Review - Prioritize feedback based on risk and critical areas
    - Collaborative Improvement - Work with Dev agent through iterative feedback cycles
    - Architecture & Design Review - Assess proper patterns and maintainable code structure
    - Dev-QA Feedback Loop - When issues are found, set status to "Needs Fixes" and provide clear recommendations for Dev to implement using *address-qa-feedback command
    - When a task contains more than 5 distinct actions or if a step seems ambiguous, use the Dynamic Plan Adaptation protocol: break the task into smaller sub-tasks, record them in working memory and execute them sequentially.
    - 'MANDATORY MEMORY OPERATIONS: After EVERY review, ALWAYS record quality observations, common issues found, and patterns using persistObservation and log using logWorkingMemory. Before reviews, check retrieveRelevantMemoriesAndExit for similar code quality patterns and log retrieval using logMemoryRetrieval. CRITICAL REQUIREMENT: Save quality findings to long-term memory for pattern recognition. FAILURE TO EXECUTE MEMORY OPERATIONS WILL RESULT IN VALIDATION FAILURE.'
    - 'CONTEXT VALIDATION: Use checkContextSufficiency from utils/agent-memory-manager.js to verify you have story/implementation context before conducting reviews and log validation using logContextValidation. If context is missing, explicitly request it rather than making assumptions.'
    - 'KNOWLEDGE PERSISTENCE: Store important quality patterns, recurring issues, and effective feedback strategies as key facts using persistKeyFact for future review sessions and log using logLongTermMemory.'
    - 'MANDATORY SPECIFIC MEMORY CALLS - After review: ALWAYS persistObservation with actionType code-review AND persistDecision about quality assessment AND persistKeyFact about quality-review-pattern AND EXECUTE qa-save-memory task. After analyze-dependencies: ALWAYS persistObservation with actionType dependency-analysis AND persistKeyFact about dependency-risk-pattern AND EXECUTE qa-save-memory task.'
    - 'MANDATORY QA MEMORY TIMING: ALWAYS Execute qa-save-memory task after EVERY review completion, when setting status to "Needs Fixes" or "Done", and at the end of multi-iteration review cycles to preserve quality patterns, feedback strategies, and review series outcomes. VERIFICATION REQUIRED: Check that qa-save-memory executed successfully before proceeding.'
story-file-permissions:
  - 'CRITICAL: When reviewing stories, you are authorized to update ONLY the ''Status'' and ''QA Results'' sections of story files'
  - 'CRITICAL: DO NOT modify any other sections including Story, Acceptance Criteria, Tasks/Subtasks, Dev Notes, Testing, Dev Agent Record, or any other sections'
  - 'CRITICAL: Status updates are limited to - setting ''Review'' at start of review, and ''Done'' or ''Needs Fixes'' at completion'
  - 'CRITICAL: Your QA review results must be appended in the QA Results section only'
commands:
  - help: Show numbered list of the following commands to allow selection
  - review {story}: 'execute the task review-story for the highest sequence story in docs/stories unless another is specified - keep any specified technical-preferences in mind as needed, record quality observations using logWorkingMemory, and save quality findings to long-term memory using logLongTermMemory → execute: node bmad-core/utils/persist-memory-cli.js observation qa ''Code review completed'' → execute: node bmad-core/utils/persist-memory-cli.js decision qa ''Quality assessment'' ''Assessment based on code standards and requirements'' → execute: node bmad-core/utils/persist-memory-cli.js keyfact qa ''Quality review patterns identified'' → MANDATORY: Execute: *execute-task qa-save-memory story_id=''[story_id]'' review_id=''[review_id]'' review_details=''[comprehensive_review_findings_and_patterns]'' → VERIFY: Check that qa-save-memory executed successfully before proceeding'
  - analyze-dependencies {story}: 'execute dependency impact analysis on a story using analyze-dependency-impacts-qa task and log analysis using logTaskMemory → execute: node bmad-core/utils/persist-memory-cli.js observation qa ''Dependency analysis completed'' → execute: node bmad-core/utils/persist-memory-cli.js keyfact qa ''Dependency risk patterns documented'' → MANDATORY: Execute: *execute-task qa-save-memory story_id=''[story_id]'' review_id=''dependency-analysis-[timestamp]'' review_details=''[dependency_analysis_findings_and_risks]'' → VERIFY: Check that qa-save-memory executed successfully before proceeding'
  - memory-status: Show current working memory status and recent review observations using getMemorySummary and getMemoryUsageStats from memory-usage-logger.js
  - recall-patterns: Retrieve relevant quality patterns and common issues from memory using retrieveRelevantMemoriesAndExit and log retrieval using logMemoryRetrieval
  - query-docs: Execute task query-technical-docs.yaml to search documentation in configured Qdrant collections for testing best practices and quality standards
  - exit: Say goodbye as the QA Engineer, create session summary using createSessionSummary and log summary using logSessionSummary, and abandon inhabiting this persona
feedback-loop-workflow:
  description: |
    The Dev↔QA feedback loop ensures continuous improvement through iterative review cycles:
    1. Dev implements story requirements and marks as "Ready for Review"
    2. QA reviews implementation without modifying code files and MANDATORY executes qa-save-memory to preserve review patterns
    3. If issues found: QA sets status to "Needs Fixes" and documents recommendations in QA Results, then MANDATORY executes qa-save-memory with feedback strategy details
    4. Dev uses *address-qa-feedback command to implement QA recommendations
    5. Dev marks story as "Ready for Review" again after fixes
    6. Process repeats until QA approves (sets status to "Done") and MANDATORY executes final qa-save-memory with review series completion summary
    7. VERIFICATION: QA must validate that all memory operations completed successfully before final approval
  key-points:
    - QA provides advisory feedback only - cannot modify code
    - All QA recommendations go in the QA Results section
    - Dev has final say on technical implementation decisions
    - Maximum 5 iterations before escalation to user
    - Clear, actionable feedback with file names and line numbers when possible
dependencies:
  tasks:
    - review-story.yaml
    - qa-save-memory
    - update-working-memory.yaml
    - retrieve-context.yaml
    - analyze-dependency-impacts-qa.yaml
  utils:
    dependency-impact-checker: dependency-impact-checker.js
    dependency-analyzer: dependency-analyzer.js
    dependency-analysis-storage: dependency-analysis-storage.js
    qa-memory-wrapper: qa-memory-wrapper.js
    agent-memory-loader: agent-memory-loader.js
    agent-memory-manager: agent-memory-manager.js
    agent-memory-persistence: agent-memory-persistence.js
    memory-usage-logger: memory-usage-logger.js
    qdrant: qdrant.js
  data:
    - technical-preferences.md
  templates:
    - story-tmpl.yaml
```
==================== END: .bmad-core/agents/qa.md ====================

==================== START: .bmad-core/structured-tasks/review-story.yaml ====================
# review-story

## Purpose

Review story implementation and provide advisory feedback for Dev agent, maintaining context through working memory

   - Note any completion notes from the developer
   - Identify and recommend missing tests if critical coverage is lacking
**CRITICAL**: You are authorized to update ONLY the "Status" and "QA Results" sections of the story file. DO NOT modify any other sections.
**Status Updates**: Set to "In Review" at start, then "Done" (if approved) or "Needs Fixes" (if issues found) at completion.
- Story file is incomplete or missing critical sections
- Critical architectural issues that require discussion
- Note: Concurrent access to story files is expected to be handled at the orchestrator level to prevent conflicts


## Task Execution

### 1. Load Memory and Initialize Context

Load QA agent working memory and relevant long-term review context

- Load agent working memory and relevant long-term context (use loadMemoryForTaskAndExit from agent-memory-loader.js if running in a subprocess)
- Apply memory context to review planning

### 2. Update Status and Load Story Details

Set story status to 'In Review' and gather implementation details

- Read the story file to understand current status and content
- Update the Status section to "In Review" to indicate QA review has started
- Understand requirements, acceptance criteria, and dev completion notes
- Identify all files mentioned in the implementation section
- Create a list of files to review based on the story implementation details

### 3. Review Code Implementation

Perform comprehensive code quality review without modifying files

- Read each implemented file to understand the code structure and logic
- **[USER INPUT REQUIRED]** Check code against acceptance criteria to verify all requirements are met
- Evaluate code quality including readability, maintainability, and adherence to project standards
- Identify potential bugs, edge cases, or error handling issues
- Assess test coverage and identify missing test scenarios

### 4. Code Quality Analysis

Perform automated code quality analysis on implemented files

- Execute analyze-code-quality task on story implementation files
- Review quality metrics against project thresholds
- Identify quality violations and areas for improvement
- Generate refactoring recommendations if quality issues found

### 5. Security and Performance Analysis

Review implementation for security vulnerabilities and performance concerns

- Check for common security issues like SQL injection, XSS, or authentication bypasses
- Review data validation and sanitization practices
- Analyze performance implications of the implementation
- Identify potential bottlenecks or resource-intensive operations

### 6. Generate QA Report

Create comprehensive QA report with recommendations for Dev agent

- Compile all findings into structured QA Results format, including quality analysis results
- Prioritize issues by severity and impact, incorporating quality metrics
- Write clear, actionable recommendations for each issue found, including quality improvements
- Include specific file names and line numbers where applicable
- Reference quality analysis report and refactoring recommendations in QA results

### 7. Update Story File QA Section and Final Status

Update the QA Results section and set final story status

- Read the current story file to preserve all existing content
- Update ONLY the QA Results section with the review findings, including quality metrics
- Determine if implementation is approved based on review findings and quality thresholds
- Update Status section to "Done" if approved with no issues found and quality standards met
- Update Status section to "Needs Fixes" if any recommendations, issues, or quality violations found
- Ensure no other sections of the story file are modified except Status and QA Results

### 8. Save Review Results and Clean Memory

Save review findings to memory and perform hygiene cleanup

- Save review completion and findings to working memory (use saveAndCleanMemoryAndExit from agent-memory-loader.js if running in a subprocess)
==================== END: .bmad-core/structured-tasks/review-story.yaml ====================

==================== START: .bmad-core/structured-tasks/qa-save-memory.yaml ====================
# QA Agent Save Memory

## Purpose

Saves review findings, quality patterns, and feedback strategies to long-term memory for future reference and continuous improvement

This task ensures the QA agent preserves review knowledge and quality patterns
for future reference and continuous improvement. Call this after each review
completion and especially when marking story as "Done" or "Needs Fixes".

Best practices:
- Save memory after each review iteration
- Include specific findings and rationale
- Capture both successful patterns and areas for improvement
- Tag memories appropriately for future retrieval
- Document effective feedback strategies for future use

Error handling:
- If memory save fails, log error but continue
- Ensure working memory is always updated even if long-term save fails


## Task Execution

### 1. Load Memory Utils

Load the memory management utilities for working and long-term memory operations

- Log memory task initialization
- Load the memory management utilities (always use AndExit versions when running in subprocess)

### 2. Update Working Memory

Update working memory with current review completion and quality findings

- Log working memory update start
- Update working memory with current review details including findings, recommendations, and quality patterns
- Add review to completed reviews list in working memory

### 3. Save Quality Patterns to Long-Term Memory

Save important quality patterns and recurring issues to long-term memory for pattern recognition

- Log long-term memory save start for quality patterns
- Save quality patterns and recurring issues to long-term memory

### 4. Save Feedback Strategies

Save effective feedback strategies and communication patterns for future reviews

- Log long-term memory save start for feedback strategies
- Save feedback strategies that proved effective for developer communication

### 5. Handle Review Series Completion

Save comprehensive review series summary when multiple review cycles are complete

- Save review series completion summary with all iterations, issues found, and quality improvements

### 6. Log Task Completion

Log the completion of the memory save task

- Log successful completion of QA memory save task
==================== END: .bmad-core/structured-tasks/qa-save-memory.yaml ====================

==================== START: .bmad-core/structured-tasks/update-working-memory.yaml ====================
# Update Working Memory

## Description

Updates the agent's working memory with current task state

## Execution Steps

1. Update the working memory JSON file for the agent
2. Merge provided updates with existing memory
3. Preserve existing data not being updated
4. Return the updated memory state

## Required Inputs

- **agentName** (string): Name of the agent
- **taskId** (string) - optional: Current task identifier
- **currentStep** (string) - optional: Current step in the plan
- **plan** (array) - optional: Task execution plan
- **context** (object) - optional: Additional context to store

## Outputs

- **memory** (object): Updated memory state

## Example Usage

```
await updateWorkingMemory('dev', {
  taskId: 'TASK-123',
  currentStep: 'implementing-feature',
  plan: ['analyze', 'implement', 'test'],
  context: { feature: 'user-auth' }
});

```
==================== END: .bmad-core/structured-tasks/update-working-memory.yaml ====================

==================== START: .bmad-core/structured-tasks/retrieve-context.yaml ====================
# Retrieve Context from Memory

## Description

Retrieves relevant context from long-term memory using similarity search

## Execution Steps

1. Connect to Qdrant vector database
2. Generate embedding for the query
3. Perform similarity search
4. Return top N matching memories with scores

## Required Inputs

- **query** (string): Query string to search for similar memories
- **topN** (number) - optional: Number of top results to retrieve

## Outputs

- **memories** (array): Array of retrieved memory snippets with scores

## Example Usage

```
const memories = await retrieveMemory(
  'user authentication implementation',
  5
);
// Returns: [
//   { score: 0.95, text: '...', agentName: 'dev', timestamp: '...' },
//   ...
// ]

```
==================== END: .bmad-core/structured-tasks/retrieve-context.yaml ====================

==================== START: .bmad-core/structured-tasks/analyze-dependency-impacts-qa.yaml ====================
# analyze-dependency-impacts-qa

## Purpose

Perform comprehensive dependency impact analysis during QA review to identify potential issues and missing updates

- This task should be run as part of comprehensive QA review process
- Focus on identifying gaps in testing coverage for impacted dependencies
- Critical dependency issues should block story approval
- Consider architectural impact of changes, not just functional correctness
- Recommend breaking large dependency impacts into smaller stories when appropriate


## Task Execution

### 1. Load Memory and Initialize Context

Load agent working memory and relevant long-term context using unified memory system

- Load agent working memory and relevant long-term context (use loadMemoryForTaskAndExit from agent-memory-loader.js if running in a subprocess)
- **[USER INPUT REQUIRED]** Apply memory context to task execution planning

### 2. Initialize Memory and Context

Initialize working memory for QA dependency analysis

- **[USER INPUT REQUIRED]** Execute task `update-working-memory` with agentName='qa' and taskId='analyze-dependency-impacts-qa'
- **[USER INPUT REQUIRED]** Execute task `retrieve-context` with query='QA dependency review patterns' to load relevant memories

### 3. Identify Implementation Changes

Review the story implementation to understand what was changed

- Read the story's File List to see all modified files
- Review the Change Log to understand the nature of changes
- Examine the Dev Agent Record for implementation details
- Use git diff to see the actual changes made to each file

### 4. Run Comprehensive Dependency Analysis

Analyze the full dependency impact of the implemented changes

- Load the dependency-impact-checker utility
- Execute analyzeBatchImpact() on all modified files
- Generate a detailed impact report using generateImpactReport() with full details
- Run quickRiskAssessment() to identify risk categories

### 5. Cross-Reference with Original Analysis

Compare current impacts with any dependency analysis done during development

- Load the dependency-analysis-storage utility to retrieve dev's analysis
- Use getLatestDependencyAnalysis() to retrieve the dev agent's pre-implementation analysis
- Check the Debug Log for the dependency analysis file reference
- Compare current impact analysis with dev-time analysis if available
- Identify any new impacts that weren't previously detected or addressed
- Flag any discrepancies between planned and actual impacts
- **[USER INPUT REQUIRED]** Note if dev's analysis accurately predicted the actual impacts

### 6. Verify Impacted Code is Tested

Ensure that all code affected by dependencies has adequate test coverage

- For each impacted symbol, check if it has corresponding unit tests
- Verify that integration points affected by changes are tested
- Check if impacted public APIs have integration or contract tests
- Identify any impacted critical paths that lack test coverage

### 7. Review High-Risk Dependencies

Focus on high-impact changes and critical dependency paths

- Examine all changes marked as high-risk by the assessment
- Verify that breaking changes are properly handled and documented
- Check that changes to shared utilities or common components are safe
- Review impacts on configuration files, core services, or data models

### 8. Analyze Unaddressed Dependencies

Identify symbols that depend on changes but weren't updated

- Check each impacted symbol to see if it was reviewed/updated during implementation
- Identify potentially stale dependencies that might now be broken
- Look for deprecated usage patterns that should be updated
- Flag any circular dependencies or architectural concerns

### 9. Validate Dependency Documentation

Ensure changes and their impacts are properly documented

- Verify that breaking changes are documented in the Change Log
- Check that public API changes are noted for consumers
- **[USER INPUT REQUIRED]** Ensure migration notes are provided for significant changes
- Validate that dependency impacts are communicated to affected teams

### 10. Generate QA Dependency Assessment

Create comprehensive findings for the QA Results section

- Compile all dependency analysis findings into a structured report
- Use saveDependencyAnalysis() to save the QA comparison analysis
- Categorize issues by severity (Critical, Major, Minor, Info)
- **[USER INPUT REQUIRED]** Provide specific recommendations for addressing each finding
- Include risk assessment and mitigation suggestions
- Save the QA analysis with references to the dev's original analysis

### 11. Make QA Recommendations

Provide actionable feedback based on dependency analysis

- Recommend additional tests for high-impact dependencies
- Suggest updates to impacted but unchanged code if needed
- Flag any changes that should be broken into smaller increments
- **[USER INPUT REQUIRED]** Identify follow-up stories for technical debt or improvements
- Document final dependency-related recommendations in QA Results

### 12. Update QA Results

Add dependency analysis findings to the story's QA Results section

- Add a "Dependency Impact Analysis" subsection to QA Results
- Include the risk assessment and impact summary
- List all critical and major findings with specific recommendations
- Document any follow-up actions or additional stories needed

### 13. Save Task Results and Clean Memory

Save task completion and findings to memory with hygiene cleanup

- **[USER INPUT REQUIRED]** Save task completion and findings to working memory (use saveAndCleanMemoryAndExit from agent-memory-loader.js if running in a subprocess)
==================== END: .bmad-core/structured-tasks/analyze-dependency-impacts-qa.yaml ====================

==================== START: .bmad-core/templates/story-tmpl.yaml ====================
template:
  id: story-template-v2
  name: Story Document
  version: 2.0
  output:
    format: markdown
    filename: docs/stories/{{epic_num}}.{{story_num}}.{{story_title_short}}.md
    title: "Story {{epic_num}}.{{story_num}}: {{story_title_short}}"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

agent_config:
  editable_sections: 
    - Status
    - Story
    - Acceptance Criteria
    - Tasks / Subtasks
    - Dev Notes
    - Testing
    - Change Log

header:
  id: story-contract
  title: StoryContract
  type: yaml-block
  instruction: This section contains the formal StoryContract parsed from PRD and Architecture documents
  template: |
    ---
    StoryContract:
      version: "{{contract_version}}"
      story_id: "{{story_id}}"
      epic_id: "{{epic_id}}"
      apiEndpoints: {{api_endpoints}}
      filesToModify: {{files_to_modify}}
      acceptanceCriteriaLinks: {{acceptance_criteria_links}}
    ---
  owner: scrum-master
  editors: [scrum-master]

sections:
  - id: status
    title: Status
    type: choice
    choices: [Draft, Approved, InProgress, In Review, Done, Needs Fixes]
    instruction: Select the current status of the story
    owner: scrum-master
    editors: [scrum-master, dev-agent, qa-agent]
    
  - id: story
    title: Story
    type: template-text
    template: |
      **As a** {{role}},
      **I want** {{action}},
      **so that** {{benefit}}
    instruction: Define the user story using the standard format with role, action, and benefit
    elicit: true
    owner: scrum-master
    editors: [scrum-master]
    
  - id: acceptance-criteria
    title: Acceptance Criteria
    type: numbered-list
    instruction: Copy the acceptance criteria numbered list from the epic file
    elicit: true
    owner: scrum-master
    editors: [scrum-master]
    
  - id: tasks-subtasks
    title: Tasks / Subtasks
    type: bullet-list
    instruction: |
      Break down the story into specific tasks and subtasks needed for implementation.
      Reference applicable acceptance criteria numbers where relevant.
    template: |
      - [ ] Task 1 (AC: # if applicable)
        - [ ] Subtask1.1...
      - [ ] Task 2 (AC: # if applicable)
        - [ ] Subtask 2.1...
      - [ ] Task 3 (AC: # if applicable)
        - [ ] Subtask 3.1...
    elicit: true
    owner: scrum-master
    editors: [scrum-master, dev-agent]
    
  - id: dev-notes
    title: Dev Notes
    instruction: |
      Populate relevant information, only what was pulled from actual artifacts from docs folder, relevant to this story:
      - Do not invent information
      - If known add Relevant Source Tree info that relates to this story
      - If there were important notes from previous story that are relevant to this one, include them here
      - Put enough information in this section so that the dev agent should NEVER need to read the architecture documents, these notes along with the tasks and subtasks must give the Dev Agent the complete context it needs to comprehend with the least amount of overhead the information to complete the story, meeting all AC and completing all tasks+subtasks
    elicit: true
    owner: scrum-master
    editors: [scrum-master]
    sections:
      - id: testing-standards
        title: Testing
        instruction: |
          List Relevant Testing Standards from Architecture the Developer needs to conform to:
          - Test file location
          - Test standards
          - Testing frameworks and patterns to use
          - Any specific testing requirements for this story
        elicit: true
        owner: scrum-master
        editors: [scrum-master]
        
  - id: change-log
    title: Change Log
    type: table
    columns: [Date, Version, Description, Author]
    instruction: Track changes made to this story document
    owner: scrum-master
    editors: [scrum-master, dev-agent, qa-agent]
    
  - id: dev-agent-record
    title: Dev Agent Record
    instruction: This section is populated by the development agent during implementation
    owner: dev-agent
    editors: [dev-agent]
    sections:
      - id: agent-model
        title: Agent Model Used
        template: "{{agent_model_name_version}}"
        instruction: Record the specific AI agent model and version used for development
        owner: dev-agent
        editors: [dev-agent]
        
      - id: debug-log-references
        title: Debug Log References
        instruction: Reference any debug logs or traces generated during development
        owner: dev-agent
        editors: [dev-agent]
        
      - id: completion-notes
        title: Completion Notes List
        instruction: Notes about the completion of tasks and any issues encountered
        owner: dev-agent
        editors: [dev-agent]
        
      - id: file-list
        title: File List
        instruction: List all files created, modified, or affected during story implementation
        owner: dev-agent
        editors: [dev-agent]
        
  - id: qa-results
    title: QA Results
    instruction: Results from QA Agent QA review of the completed story implementation
    owner: qa-agent
    editors: [qa-agent]
==================== END: .bmad-core/templates/story-tmpl.yaml ====================

==================== START: .bmad-core/data/technical-preferences.md ====================
# User-Defined Preferred Patterns and Preferences

None Listed
==================== END: .bmad-core/data/technical-preferences.md ====================

==================== START: .bmad-core/utils/dependency-impact-checker.js ====================
const { queryImpactedSymbols, querySymbolsInFile, searchSymbols } = require('./dependency-analyzer');
const { parseFile } = require('./dependency-parser');
const fs = require('fs');
const path = require('path');

/**
 * High-level dependency impact checking utilities for Dev and QA agents
 * Provides functions to analyze potential impacts of code changes
 */

/**
 * Check what symbols would be impacted by changes to a specific file
 */
async function checkFileImpact(filePath, rootDir = process.cwd()) {
  try {
    // Normalize file path to relative path
    const relativePath = path.isAbsolute(filePath) 
      ? path.relative(rootDir, filePath)
      : filePath;
    
    // Get symbols that depend on this file
    const impactedSymbols = await queryImpactedSymbols(relativePath);
    
    // Get symbols defined in this file
    const fileSymbols = await querySymbolsInFile(relativePath);
    
    // Group impacts by file
    const impactsByFile = {};
    impactedSymbols.forEach(symbol => {
      if (!impactsByFile[symbol.filePath]) {
        impactsByFile[symbol.filePath] = [];
      }
      impactsByFile[symbol.filePath].push(symbol);
    });
    
    return {
      targetFile: relativePath,
      symbolsInFile: fileSymbols,
      impactedSymbols,
      impactedFiles: Object.keys(impactsByFile),
      impactsByFile,
      totalImpacted: impactedSymbols.length
    };
  } catch (error) {
    console.error(`Error checking file impact for ${filePath}:`, error.message);
    return {
      targetFile: filePath,
      symbolsInFile: [],
      impactedSymbols: [],
      impactedFiles: [],
      impactsByFile: {},
      totalImpacted: 0,
      error: error.message
    };
  }
}

/**
 * Check impact of specific symbol changes
 */
async function checkSymbolImpact(filePath, symbolNames, rootDir = process.cwd()) {
  try {
    const relativePath = path.isAbsolute(filePath) 
      ? path.relative(rootDir, filePath)
      : filePath;
    
    // Query for symbols that depend on the specific symbols
    const impactedSymbols = await queryImpactedSymbols(relativePath, symbolNames);
    
    // Group by symbol and file
    const impactsBySymbol = {};
    symbolNames.forEach(symbolName => {
      impactsBySymbol[symbolName] = impactedSymbols.filter(symbol => 
        symbol.dependencies.some(dep => dep.includes(symbolName))
      );
    });
    
    const impactsByFile = {};
    impactedSymbols.forEach(symbol => {
      if (!impactsByFile[symbol.filePath]) {
        impactsByFile[symbol.filePath] = [];
      }
      impactsByFile[symbol.filePath].push(symbol);
    });
    
    return {
      targetFile: relativePath,
      targetSymbols: symbolNames,
      impactedSymbols,
      impactsBySymbol,
      impactsByFile,
      impactedFiles: Object.keys(impactsByFile),
      totalImpacted: impactedSymbols.length
    };
  } catch (error) {
    console.error(`Error checking symbol impact:`, error.message);
    return {
      targetFile: filePath,
      targetSymbols: symbolNames,
      impactedSymbols: [],
      impactsBySymbol: {},
      impactsByFile: {},
      impactedFiles: [],
      totalImpacted: 0,
      error: error.message
    };
  }
}

/**
 * Analyze the dependency impact of a list of files (e.g., from a git diff)
 */
async function analyzeBatchImpact(filePaths, rootDir = process.cwd()) {
  const results = {
    totalFiles: filePaths.length,
    analyzedFiles: 0,
    impactSummary: {
      totalImpactedSymbols: 0,
      totalImpactedFiles: new Set(),
      highRiskFiles: [], // Files with many dependencies
      criticalImpacts: [] // Impacts on important symbols
    },
    fileResults: []
  };
  
  for (const filePath of filePaths) {
    try {
      const impact = await checkFileImpact(filePath, rootDir);
      results.fileResults.push(impact);
      results.analyzedFiles++;
      
      // Update summary
      results.impactSummary.totalImpactedSymbols += impact.totalImpacted;
      impact.impactedFiles.forEach(file => 
        results.impactSummary.totalImpactedFiles.add(file)
      );
      
      // Identify high-risk files (> 10 impacted symbols)
      if (impact.totalImpacted > 10) {
        results.impactSummary.highRiskFiles.push({
          file: filePath,
          impactedSymbols: impact.totalImpacted,
          impactedFiles: impact.impactedFiles.length
        });
      }
      
      // Identify critical impacts (on classes or important functions)
      const criticalSymbols = impact.impactedSymbols.filter(symbol => 
        symbol.symbolType === 'class' || 
        symbol.symbolName.toLowerCase().includes('main') ||
        symbol.symbolName.toLowerCase().includes('init') ||
        symbol.dependencies.length > 5
      );
      
      if (criticalSymbols.length > 0) {
        results.impactSummary.criticalImpacts.push({
          file: filePath,
          criticalSymbols: criticalSymbols.map(s => ({
            name: s.symbolName,
            type: s.symbolType,
            file: s.filePath,
            dependencyCount: s.dependencies.length
          }))
        });
      }
    } catch (error) {
      console.error(`Error analyzing ${filePath}:`, error.message);
      results.fileResults.push({
        targetFile: filePath,
        error: error.message,
        symbolsInFile: [],
        impactedSymbols: [],
        impactedFiles: [],
        totalImpacted: 0
      });
    }
  }
  
  // Convert set to array
  results.impactSummary.totalImpactedFiles = Array.from(results.impactSummary.totalImpactedFiles);
  
  return results;
}

/**
 * Generate a dependency impact report for Dev/QA review
 */
function generateImpactReport(impactResults, options = {}) {
  const { 
    includeDetails = true, 
    maxDetailsPerFile = 5,
    format = 'markdown' 
  } = options;
  
  let report = '';
  
  if (format === 'markdown') {
    report += '# Dependency Impact Analysis Report\n\n';
    
    if (impactResults.error) {
      report += `⚠️ **Error**: ${impactResults.error}\n\n`;
      return report;
    }
    
    // Summary section
    if (impactResults.impactSummary) {
      const summary = impactResults.impactSummary;
      report += '## Summary\n\n';
      report += `- **Files analyzed**: ${impactResults.analyzedFiles}/${impactResults.totalFiles}\n`;
      report += `- **Total impacted symbols**: ${summary.totalImpactedSymbols}\n`;
      report += `- **Total impacted files**: ${summary.totalImpactedFiles.length}\n`;
      
      if (summary.highRiskFiles.length > 0) {
        report += `- **High-risk changes**: ${summary.highRiskFiles.length} files\n`;
      }
      
      if (summary.criticalImpacts.length > 0) {
        report += `- **Critical impacts detected**: ${summary.criticalImpacts.length} files\n`;
      }
      
      report += '\n';
      
      // High-risk files
      if (summary.highRiskFiles.length > 0) {
        report += '## ⚠️ High-Risk Changes\n\n';
        summary.highRiskFiles.forEach(risk => {
          report += `- **${risk.file}**: ${risk.impactedSymbols} impacted symbols across ${risk.impactedFiles} files\n`;
        });
        report += '\n';
      }
      
      // Critical impacts
      if (summary.criticalImpacts.length > 0) {
        report += '## 🚨 Critical Impacts\n\n';
        summary.criticalImpacts.forEach(critical => {
          report += `### ${critical.file}\n`;
          critical.criticalSymbols.forEach(symbol => {
            report += `- **${symbol.name}** (${symbol.type}) in ${symbol.file} - ${symbol.dependencyCount} dependencies\n`;
          });
          report += '\n';
        });
      }
    } else {
      // Single file report
      report += '## File Impact Analysis\n\n';
      report += `**Target File**: ${impactResults.targetFile}\n\n`;
      
      if (impactResults.symbolsInFile && impactResults.symbolsInFile.length > 0) {
        report += `**Symbols in file**: ${impactResults.symbolsInFile.length}\n`;
      }
      
      report += `**Impacted symbols**: ${impactResults.totalImpacted}\n`;
      report += `**Impacted files**: ${impactResults.impactedFiles.length}\n\n`;
      
      if (impactResults.totalImpacted > 0) {
        report += '### Impacted Files\n\n';
        Object.entries(impactResults.impactsByFile).forEach(([file, symbols]) => {
          report += `- **${file}**: ${symbols.length} symbols\n`;
          if (includeDetails) {
            symbols.slice(0, maxDetailsPerFile).forEach(symbol => {
              report += `  - ${symbol.symbolName} (${symbol.symbolType}) at line ${symbol.lineNumber}\n`;
            });
            if (symbols.length > maxDetailsPerFile) {
              report += `  - ... and ${symbols.length - maxDetailsPerFile} more\n`;
            }
          }
        });
      }
    }
    
    // Recommendations
    report += '\n## Recommendations\n\n';
    
    if (impactResults.totalImpacted === 0) {
      report += '✅ No dependency impacts detected. Changes appear to be isolated.\n';
    } else if (impactResults.totalImpacted < 5) {
      report += '⚠️ Low impact detected. Review the affected symbols and consider updating tests.\n';
    } else if (impactResults.totalImpacted < 15) {
      report += '⚠️ Medium impact detected. Carefully review all affected files and ensure comprehensive testing.\n';
    } else {
      report += '🚨 High impact detected. Consider breaking changes into smaller pieces and ensure thorough testing of all affected components.\n';
    }
    
    report += '\n';
  }
  
  return report;
}

/**
 * Quick check for common risky changes
 */
async function quickRiskAssessment(filePaths, rootDir = process.cwd()) {
  const risks = {
    high: [],
    medium: [],
    low: []
  };
  
  for (const filePath of filePaths) {
    try {
      const impact = await checkFileImpact(filePath, rootDir);
      
      // Categorize risk based on impact count and file patterns
      const isConfigFile = filePath.includes('config') || filePath.includes('settings');
      const isUtilityFile = filePath.includes('util') || filePath.includes('helper') || filePath.includes('common');
      const isTestFile = filePath.includes('.test.') || filePath.includes('.spec.');
      
      if (isTestFile) {
        risks.low.push({ file: filePath, reason: 'Test file', impact: impact.totalImpacted });
      } else if (impact.totalImpacted > 20 || (isConfigFile && impact.totalImpacted > 5)) {
        risks.high.push({ file: filePath, reason: 'High dependency impact', impact: impact.totalImpacted });
      } else if (impact.totalImpacted > 5 || isUtilityFile) {
        risks.medium.push({ file: filePath, reason: 'Medium dependency impact', impact: impact.totalImpacted });
      } else {
        risks.low.push({ file: filePath, reason: 'Low dependency impact', impact: impact.totalImpacted });
      }
    } catch (error) {
      risks.high.push({ file: filePath, reason: `Analysis failed: ${error.message}`, impact: 0 });
    }
  }
  
  return risks;
}

module.exports = {
  checkFileImpact,
  checkSymbolImpact,
  analyzeBatchImpact,
  generateImpactReport,
  quickRiskAssessment
};
==================== END: .bmad-core/utils/dependency-impact-checker.js ====================

==================== START: .bmad-core/utils/dependency-analyzer.js ====================
const { QdrantClient } = require('@qdrant/js-client-rest');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const { logger } = require('./logger');

// Qdrant configuration from environment variables
const QDRANT_CONFIG = {
  host: process.env.QDRANT_HOST || 'localhost',
  port: parseInt(process.env.QDRANT_PORT) || 6333,
  apiKey: process.env.QDRANT_API_KEY, // Optional for cloud instances
  timeout: parseInt(process.env.QDRANT_TIMEOUT) || 30000
};

// Initialize Qdrant client with configurable options
const createQdrantClient = () => {
  const config = { 
    host: QDRANT_CONFIG.host, 
    port: QDRANT_CONFIG.port,
    timeout: QDRANT_CONFIG.timeout
  };
  
  // Add API key if provided (for Qdrant Cloud)
  if (QDRANT_CONFIG.apiKey) {
    config.apiKey = QDRANT_CONFIG.apiKey;
  }
  
  return new QdrantClient(config);
};

let client = null;

// Lazy initialization of client
const getClient = () => {
  if (!client) {
    try {
      client = createQdrantClient();
    } catch (error) {
      throw new Error(`Failed to initialize Qdrant client: ${error.message}. Please check your Qdrant configuration.`);
    }
  }
  return client;
};

// Configuration constants\nconst CONFIG = {\n  DEFAULT_SEARCH_LIMIT: 100,\n  OPENAI_MAX_TOKENS: 8192,\n  HASH_BYTES_FOR_EMBEDDING: {\n    PRIMARY: 0,\n    SECONDARY: 16, \n    TERTIARY: 32\n  },\n  HASH_WEIGHTS: {\n    PRIMARY: 0.5,\n    SECONDARY: 0.3,\n    TERTIARY: 0.2\n  },\n  NORMALIZATION_OFFSET: 128\n};\n\n// Dependency collection configuration
const DEPENDENCY_COLLECTION = process.env.QDRANT_COLLECTION_NAME || 'bmad_code_dependencies';
const DEPENDENCY_VECTOR_SIZE = parseInt(process.env.QDRANT_VECTOR_SIZE) || 384;

/**
 * Schema for dependency information stored in Qdrant:
 * 
 * Point Structure:
 * - id: hash of symbol identifier (file_path:symbol_name)
 * - vector: embedding of symbol description/context
 * - payload: {
 *     symbolName: string,          // Function/class/variable name
 *     symbolType: string,          // 'function', 'class', 'method', 'variable', 'import', 'export'
 *     filePath: string,            // Relative path from repo root
 *     lineNumber: number,          // Line where symbol is defined
 *     dependencies: string[],      // Array of symbols this depends on
 *     dependents: string[],        // Array of symbols that depend on this
 *     scope: string,               // 'global', 'local', 'module'
 *     signature: string,           // Function signature or class definition
 *     description: string,         // Auto-generated description for embedding
 *     lastModified: string,        // ISO timestamp of last analysis
 *     fileHash: string             // Hash of file content when analyzed
 *   }
 */

/**
 * Ensure the dependency collection exists with proper configuration
 */
async function ensureDependencyCollection() {
  try {
    const qdrantClient = getClient();
    const collections = await qdrantClient.getCollections();
    const exists = collections.collections.some(c => c.name === DEPENDENCY_COLLECTION);
    
    if (!exists) {
      await qdrantClient.createCollection(DEPENDENCY_COLLECTION, {
        vectors: {
          size: DEPENDENCY_VECTOR_SIZE,
          distance: 'Cosine'
        }
      });
      logger.info(`Created dependency collection: ${DEPENDENCY_COLLECTION}`, 'QDRANT_SETUP');
    }
  } catch (error) {
    const errorMessage = `Dependency collection initialization failed: ${error.message}. Please ensure Qdrant is running at ${QDRANT_CONFIG.host}:${QDRANT_CONFIG.port}`;
    logger.error(errorMessage, 'QDRANT_INIT');
    throw new Error(errorMessage);
  }
}

/**
 * Generate embedding for symbol description
 * Uses OpenAI embeddings if available, falls back to hash-based approach
 */
async function generateSymbolEmbedding(text) {
  try {
    // Try OpenAI embeddings first if API key is available
    if (process.env.OPENAI_API_KEY) {
      return await generateOpenAIEmbedding(text);
    }
  } catch (error) {
    logger.warn(`OpenAI embedding failed, falling back to hash-based approach: ${error.message}`, 'EMBEDDING');
  }
  
  // Fallback to hash-based embedding
  return generateHashBasedEmbedding(text);
}

/**
 * Generate OpenAI embedding using text-embedding-3-small model
 */
async function generateOpenAIEmbedding(text) {
  try {
    const OpenAI = require('openai');
    
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    
    const response = await openai.embeddings.create({
      model: process.env.OPENAI_EMBEDDING_MODEL || 'text-embedding-3-small',
      input: text.substring(0, 8192), // Limit to model's max token length
      encoding_format: 'float',
      dimensions: DEPENDENCY_VECTOR_SIZE // Use the configured vector size
    });
    
    const embedding = response.data[0].embedding;
    
    // Ensure embedding matches expected size
    if (embedding.length !== DEPENDENCY_VECTOR_SIZE) {
      // Pad or truncate to match expected size
      if (embedding.length > DEPENDENCY_VECTOR_SIZE) {
        return embedding.slice(0, DEPENDENCY_VECTOR_SIZE);
      } else {
        const padded = [...embedding];
        while (padded.length < DEPENDENCY_VECTOR_SIZE) {
          padded.push(0);
        }
        return padded;
      }
    }
    
    return embedding;
  } catch (error) {
    throw new Error(`OpenAI embedding API failed: ${error.message}`);
  }
}

/**
 * Generate hash-based embedding as fallback
 */
function generateHashBasedEmbedding(text) {
  // Use SHA-256 hash for more deterministic results
  const hash = crypto.createHash('sha256').update(text).digest();
  const embedding = [];
  
  // Create a more sophisticated hash-based embedding
  for (let i = 0; i < DEPENDENCY_VECTOR_SIZE; i++) {
    // Use multiple hash positions with different transformations
    const byte1 = hash[i % hash.length];
    const byte2 = hash[(i + 16) % hash.length];
    const byte3 = hash[(i + 32) % hash.length];
    
    // Combine bytes with different weights and normalize to [-1, 1]
    const combined = (byte1 * 0.5 + byte2 * 0.3 + byte3 * 0.2);
    embedding.push((combined - 128) / 128);
  }
  
  return embedding;
}

/**
 * Create a unique ID for a symbol based on file path and symbol name
 */
function createSymbolId(filePath, symbolName) {
  return crypto.createHash('md5').update(`${filePath}:${symbolName}`).digest('hex');
}

/**
 * Store or update a symbol's dependency information in Qdrant
 */
async function storeSymbolDependency(symbolInfo) {
  try {
    await ensureDependencyCollection();
    
    const {
      symbolName,
      symbolType,
      filePath,
      lineNumber,
      dependencies = [],
      dependents = [],
      scope,
      signature,
      fileHash
    } = symbolInfo;
    
    // Generate description for embedding
    const description = `${symbolType} ${symbolName} in ${filePath} at line ${lineNumber}. Signature: ${signature}`;
    
    const embedding = await generateSymbolEmbedding(description);
    const id = createSymbolId(filePath, symbolName);
    
    const qdrantClient = getClient();
    await qdrantClient.upsert(DEPENDENCY_COLLECTION, {
      wait: true,
      points: [
        {
          id,
          vector: embedding,
          payload: {
            symbolName,
            symbolType,
            filePath,
            lineNumber,
            dependencies,
            dependents,
            scope,
            signature,
            description,
            lastModified: new Date().toISOString(),
            fileHash
          }
        }
      ]
    });
    
    return id;
  } catch (error) {
    const contextError = new Error(`Failed to store symbol dependency '${symbolName}' in file '${filePath}': ${error.message}`);
    contextError.originalError = error;
    contextError.context = { symbolName, symbolType, filePath, lineNumber };
    logger.error(contextError.message, 'SYMBOL_STORE');
    throw contextError;
  }
}

/**
 * Query dependencies for symbols that might be impacted by changes to a file
 */
async function queryImpactedSymbols(filePath, symbolNames = []) {
  try {
    await ensureDependencyCollection();
    
    // Build filter for symbols that depend on the changed file or specific symbols
    const should = [
      // Find symbols that depend on this file
      {
        key: 'dependencies',
        match: { any: [filePath] }
      }
    ];
    
    // If specific symbols are provided, find their dependents
    if (symbolNames.length > 0) {
      symbolNames.forEach(symbolName => {
        should.push({
          key: 'dependencies',
          match: { any: [`${filePath}:${symbolName}`] }
        });
      });
    }
    
    const qdrantClient = getClient();
    const searchResult = await qdrantClient.scroll(DEPENDENCY_COLLECTION, {
      filter: {
        should
      },
      limit: 100,
      with_payload: true
    });
    
    return searchResult.points.map(point => ({
      id: point.id,
      ...point.payload
    }));
  } catch (error) {
    const contextError = new Error(`Failed to query impacted symbols for file '${filePath}': ${error.message}`);
    contextError.originalError = error;
    contextError.context = { filePath, symbolNames };
    logger.error(contextError.message, 'SYMBOL_STORE');
    // Return empty array but log the error for monitoring
    return [];
  }
}

/**
 * Query symbols defined in a specific file
 */
async function querySymbolsInFile(filePath) {
  try {
    await ensureDependencyCollection();
    
    const qdrantClient = getClient();
    const searchResult = await qdrantClient.scroll(DEPENDENCY_COLLECTION, {
      filter: {
        key: 'filePath',
        match: { value: filePath }
      },
      limit: 100,
      with_payload: true
    });
    
    return searchResult.points.map(point => ({
      id: point.id,
      ...point.payload
    }));
  } catch (error) {
    const contextError = new Error(`Failed to query symbols in file '${filePath}': ${error.message}`);
    contextError.originalError = error;
    contextError.context = { filePath };
    logger.error(contextError.message, 'SYMBOL_STORE');
    return [];
  }
}

/**
 * Remove all dependency information for a file (when file is deleted)
 */
async function removeFileSymbols(filePath) {
  try {
    await ensureDependencyCollection();
    
    // Get all symbols in the file
    const symbols = await querySymbolsInFile(filePath);
    
    if (symbols.length > 0) {
      const pointIds = symbols.map(symbol => symbol.id);
      const qdrantClient = getClient();
      await qdrantClient.delete(DEPENDENCY_COLLECTION, {
        points: pointIds
      });
      
      logger.info(`Removed ${pointIds.length} symbols from ${filePath}`, 'FILE_CLEANUP');
    }
  } catch (error) {
    const contextError = new Error(`Failed to remove symbols for file '${filePath}': ${error.message}`);
    contextError.originalError = error;
    contextError.context = { filePath };
    logger.error(contextError.message, 'SYMBOL_STORE');
    throw contextError;
  }
}

/**
 * Search for symbols by name or description
 */
async function searchSymbols(query, limit = 10) {
  try {
    await ensureDependencyCollection();
    
    const queryVector = await generateSymbolEmbedding(query);
    
    const qdrantClient = getClient();
    const searchResult = await qdrantClient.search(DEPENDENCY_COLLECTION, {
      vector: queryVector,
      limit,
      with_payload: true
    });
    
    return searchResult.map(result => ({
      score: result.score,
      id: result.id,
      ...result.payload
    }));
  } catch (error) {
    const contextError = new Error(`Failed to search symbols with query '${query}': ${error.message}`);
    contextError.originalError = error;
    contextError.context = { query, limit };
    logger.error(contextError.message, 'SYMBOL_STORE');
    return [];
  }
}

/**
 * Get dependency statistics for the repository
 */
async function getDependencyStats() {
  try {
    await ensureDependencyCollection();
    
    const qdrantClient = getClient();
    const info = await qdrantClient.getCollection(DEPENDENCY_COLLECTION);
    const totalSymbols = info.points_count;
    
    // Get symbol type distribution
    const typeStats = {};
    const allSymbols = await qdrantClient.scroll(DEPENDENCY_COLLECTION, {
      limit: 1000,
      with_payload: ['symbolType']
    });
    
    allSymbols.points.forEach(point => {
      const type = point.payload.symbolType;
      typeStats[type] = (typeStats[type] || 0) + 1;
    });
    
    return {
      totalSymbols,
      typeDistribution: typeStats
    };
  } catch (error) {
    const contextError = new Error(`Failed to get dependency statistics: ${error.message}`);
    contextError.originalError = error;
    logger.error(contextError.message, 'SYMBOL_STORE');
    return { totalSymbols: 0, typeDistribution: {}, error: contextError.message };
  }
}

module.exports = {
  ensureDependencyCollection,
  storeSymbolDependency,
  queryImpactedSymbols,
  querySymbolsInFile,
  removeFileSymbols,
  searchSymbols,
  getDependencyStats,
  createSymbolId,
  generateSymbolEmbedding, // Export for testing
  getClient, // Export for testing
  QDRANT_CONFIG // Export for reference
};
==================== END: .bmad-core/utils/dependency-analyzer.js ====================

==================== START: .bmad-core/utils/dependency-analysis-storage.js ====================
/**
 * Dependency Analysis Storage Utilities
 * 
 * Provides consistent file naming and storage location for dependency impact analysis
 * reports generated by dev agent and consumed by QA agent.
 */

const fs = require('fs').promises;
const path = require('path');

// Configuration for storage paths
const STORAGE_CONFIG = {
  // Base directory for all dependency analyses
  BASE_DIR: '.ai/dependency-analyses',
  
  // Subdirectories by type
  SUBDIRS: {
    DEV: 'dev-analysis',      // Pre-implementation analysis by dev
    QA: 'qa-comparison',      // QA comparison reports
    ARCHIVE: 'archive'        // Archived analyses from completed stories
  }
};

/**
 * Ensures the dependency analysis directory structure exists
 */
async function ensureStorageDirectories() {
  const dirs = [
    STORAGE_CONFIG.BASE_DIR,
    path.join(STORAGE_CONFIG.BASE_DIR, STORAGE_CONFIG.SUBDIRS.DEV),
    path.join(STORAGE_CONFIG.BASE_DIR, STORAGE_CONFIG.SUBDIRS.QA),
    path.join(STORAGE_CONFIG.BASE_DIR, STORAGE_CONFIG.SUBDIRS.ARCHIVE)
  ];
  
  for (const dir of dirs) {
    try {
      await fs.access(dir);
    } catch (error) {
      if (error.code === 'ENOENT') {
        await fs.mkdir(dir, { recursive: true });
      } else {
        throw error;
      }
    }
  }
}

/**
 * Generates a consistent filename for dependency analysis
 * Format: dep-analysis-{storyId}-{taskId}-{timestamp}.md
 * 
 * @param {string} storyId - The story ID (e.g., "story-16")
 * @param {string} taskId - The task ID or "full-story" for complete analysis
 * @param {string} type - Type of analysis: 'dev' or 'qa'
 * @returns {string} The generated filename
 */
function generateAnalysisFilename(storyId, taskId = 'full-story', type = 'dev') {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5); // YYYY-MM-DDTHH-MM-SS
  const sanitizedStoryId = storyId.replace(/[^a-zA-Z0-9-]/g, '-');
  const sanitizedTaskId = taskId.replace(/[^a-zA-Z0-9-]/g, '-');
  
  return `dep-analysis-${sanitizedStoryId}-${sanitizedTaskId}-${timestamp}.md`;
}

/**
 * Gets the full path for saving a dependency analysis
 * 
 * @param {string} filename - The filename generated by generateAnalysisFilename
 * @param {string} type - Type of analysis: 'dev' or 'qa'
 * @returns {string} Full path to save the file
 */
function getAnalysisPath(filename, type = 'dev') {
  const subdir = type === 'qa' ? STORAGE_CONFIG.SUBDIRS.QA : STORAGE_CONFIG.SUBDIRS.DEV;
  return path.join(STORAGE_CONFIG.BASE_DIR, subdir, filename);
}

/**
 * Saves a dependency analysis report
 * 
 * @param {string} storyId - The story ID
 * @param {string} taskId - The task ID or "full-story"
 * @param {string} analysisContent - The analysis report content
 * @param {object} metadata - Additional metadata to save
 * @param {string} type - Type of analysis: 'dev' or 'qa'
 * @returns {object} Information about the saved file
 */
async function saveDependencyAnalysis(storyId, taskId, analysisContent, metadata = {}, type = 'dev') {
  await ensureStorageDirectories();
  
  const filename = generateAnalysisFilename(storyId, taskId, type);
  const filepath = getAnalysisPath(filename, type);
  
  // Create enhanced content with metadata
  const fullContent = `# Dependency Impact Analysis Report

**Story ID**: ${storyId}
**Task ID**: ${taskId}
**Analysis Type**: ${type}
**Generated**: ${new Date().toISOString()}
**Agent**: ${metadata.agent || 'dev'}

## Metadata
\`\`\`json
${JSON.stringify(metadata, null, 2)}
\`\`\`

---

${analysisContent}`;
  
  await fs.writeFile(filepath, fullContent, 'utf8');
  
  // Also create a latest symlink for easy access
  const latestLink = path.join(
    STORAGE_CONFIG.BASE_DIR, 
    type === 'qa' ? STORAGE_CONFIG.SUBDIRS.QA : STORAGE_CONFIG.SUBDIRS.DEV,
    `latest-${storyId}.md`
  );
  
  // Remove existing symlink if it exists
  try {
    await fs.unlink(latestLink);
  } catch (error) {
    // Ignore if doesn't exist
  }
  
  // Create relative symlink
  const relativeTarget = path.relative(path.dirname(latestLink), filepath);
  await fs.symlink(relativeTarget, latestLink);
  
  return {
    filename,
    filepath,
    latestLink,
    timestamp: new Date().toISOString()
  };
}

/**
 * Retrieves the most recent dependency analysis for a story
 * 
 * @param {string} storyId - The story ID
 * @param {string} taskId - The task ID (optional, defaults to any)
 * @param {string} type - Type of analysis: 'dev' or 'qa'
 * @returns {object|null} The analysis content and metadata, or null if not found
 */
async function getLatestDependencyAnalysis(storyId, taskId = null, type = 'dev') {
  try {
    // First try the latest symlink
    const latestLink = path.join(
      STORAGE_CONFIG.BASE_DIR,
      type === 'qa' ? STORAGE_CONFIG.SUBDIRS.QA : STORAGE_CONFIG.SUBDIRS.DEV,
      `latest-${storyId}.md`
    );
    
    try {
      const content = await fs.readFile(latestLink, 'utf8');
      const realPath = await fs.realpath(latestLink);
      return {
        content,
        filepath: realPath,
        filename: path.basename(realPath),
        isLatest: true
      };
    } catch (error) {
      // Fallback to searching for files
    }
    
    // Search for matching files
    const subdir = type === 'qa' ? STORAGE_CONFIG.SUBDIRS.QA : STORAGE_CONFIG.SUBDIRS.DEV;
    const searchDir = path.join(STORAGE_CONFIG.BASE_DIR, subdir);
    
    const files = await fs.readdir(searchDir);
    const pattern = taskId 
      ? `dep-analysis-${storyId}-${taskId}-`
      : `dep-analysis-${storyId}-`;
    
    const matchingFiles = files
      .filter(f => f.startsWith(pattern) && f.endsWith('.md'))
      .sort((a, b) => b.localeCompare(a)); // Sort by timestamp (newest first)
    
    if (matchingFiles.length === 0) {
      return null;
    }
    
    const filepath = path.join(searchDir, matchingFiles[0]);
    const content = await fs.readFile(filepath, 'utf8');
    
    return {
      content,
      filepath,
      filename: matchingFiles[0],
      isLatest: false
    };
  } catch (error) {
    console.error('Error retrieving dependency analysis:', error.message);
    return null;
  }
}

/**
 * Lists all dependency analyses for a story
 * 
 * @param {string} storyId - The story ID
 * @param {string} type - Type of analysis: 'dev', 'qa', or 'all'
 * @returns {array} List of analysis files with metadata
 */
async function listDependencyAnalyses(storyId, type = 'all') {
  const results = [];
  
  const dirs = type === 'all' 
    ? [STORAGE_CONFIG.SUBDIRS.DEV, STORAGE_CONFIG.SUBDIRS.QA]
    : [type === 'qa' ? STORAGE_CONFIG.SUBDIRS.QA : STORAGE_CONFIG.SUBDIRS.DEV];
  
  for (const subdir of dirs) {
    try {
      const searchDir = path.join(STORAGE_CONFIG.BASE_DIR, subdir);
      const files = await fs.readdir(searchDir);
      
      const matchingFiles = files.filter(f => 
        f.includes(`-${storyId}-`) && f.endsWith('.md') && !f.startsWith('latest-')
      );
      
      for (const file of matchingFiles) {
        const filepath = path.join(searchDir, file);
        const stats = await fs.stat(filepath);
        
        // Parse filename for metadata
        const parts = file.match(/dep-analysis-(.+?)-(.+?)-(.+?)\.md/);
        
        results.push({
          filename: file,
          filepath,
          storyId: parts ? parts[1] : storyId,
          taskId: parts ? parts[2] : 'unknown',
          timestamp: parts ? parts[3] : stats.mtime.toISOString(),
          type: subdir === STORAGE_CONFIG.SUBDIRS.QA ? 'qa' : 'dev',
          size: stats.size,
          modified: stats.mtime
        });
      }
    } catch (error) {
      console.error(`Error listing analyses in ${subdir}:`, error.message);
    }
  }
  
  return results.sort((a, b) => b.modified - a.modified);
}

/**
 * Archives dependency analyses for completed stories
 * 
 * @param {string} storyId - The story ID to archive
 * @returns {object} Archive operation results
 */
async function archiveDependencyAnalyses(storyId) {
  const archived = [];
  const errors = [];
  
  const dirs = [STORAGE_CONFIG.SUBDIRS.DEV, STORAGE_CONFIG.SUBDIRS.QA];
  
  for (const subdir of dirs) {
    try {
      const searchDir = path.join(STORAGE_CONFIG.BASE_DIR, subdir);
      const files = await fs.readdir(searchDir);
      
      const matchingFiles = files.filter(f => 
        f.includes(`-${storyId}-`) && f.endsWith('.md')
      );
      
      for (const file of matchingFiles) {
        try {
          const srcPath = path.join(searchDir, file);
          const destPath = path.join(STORAGE_CONFIG.BASE_DIR, STORAGE_CONFIG.SUBDIRS.ARCHIVE, file);
          
          await fs.rename(srcPath, destPath);
          archived.push({ file, from: subdir, to: STORAGE_CONFIG.SUBDIRS.ARCHIVE });
        } catch (error) {
          errors.push({ file, error: error.message });
        }
      }
    } catch (error) {
      errors.push({ directory: subdir, error: error.message });
    }
  }
  
  return { archived, errors };
}

module.exports = {
  STORAGE_CONFIG,
  ensureStorageDirectories,
  generateAnalysisFilename,
  getAnalysisPath,
  saveDependencyAnalysis,
  getLatestDependencyAnalysis,
  listDependencyAnalyses,
  archiveDependencyAnalyses
};
==================== END: .bmad-core/utils/dependency-analysis-storage.js ====================

==================== START: .bmad-core/utils/qa-memory-wrapper.js ====================
#!/usr/bin/env node

/**
 * QA Memory Wrapper - Simplified memory operations for QA agent
 * 
 * This wrapper provides easy-to-use memory functions that the QA agent
 * can call during activation and review processes.
 */

const {
    initializeWorkingMemory,
    loadWorkingMemory,
    updateWorkingMemory,
    retrieveRelevantMemories,
    saveToLongTermMemory,
    persistObservation,
    persistDecision,
    persistKeyFact
} = require('./agent-memory-manager');

const { closeConnections } = require('./qdrant');

const {
    logMemoryInit,
    logWorkingMemory,
    logLongTermMemory,
    logMemoryRetrieval,
    logContextValidation,
    logMemoryError
} = require('./memory-usage-logger');

/**
 * Initialize QA agent memory
 */
async function initQAMemory() {
    try {
        await logMemoryInit('qa', 'activation_start');
        const memory = await initializeWorkingMemory('qa');
        await logMemoryInit('qa', 'activation_complete', { 
            sessionId: memory.sessionId,
            hasExistingMemory: !!memory.observations?.length 
        });
        console.log('QA memory initialized successfully');
        return memory;
    } catch (error) {
        console.error('Failed to initialize QA memory:', error.message);
        await logMemoryError('qa', 'init_failed', error);
        process.exit(1);
    }
}

/**
 * Load and retrieve relevant QA patterns
 */
async function loadQAPatterns(query = 'code quality review patterns') {
    try {
        await logMemoryRetrieval('qa', 'patterns_search_start', query, 0, {});
        const memories = await retrieveRelevantMemories('qa', query, { topN: 10 });
        await logMemoryRetrieval('qa', 'patterns_search_complete', query, memories.combined.length, {});
        
        // Format for display
        if (memories.combined.length > 0) {
            console.log(`Found ${memories.combined.length} relevant patterns`);
            memories.combined.forEach((memory, index) => {
                console.log(`\n[${index + 1}] ${memory.type}: ${memory.content || memory.observation || memory.decision}`);
            });
        } else {
            console.log('No previous QA patterns found - starting fresh');
        }
        
        return memories;
    } catch (error) {
        console.error('Failed to load QA patterns:', error.message);
        return { combined: [] };
    }
}

/**
 * Save QA review findings
 */
async function saveQAFindings(findings) {
    try {
        await logWorkingMemory('qa', 'save_findings_start', 'review', findings);
        
        // Update working memory
        await updateWorkingMemory('qa', {
            observation: findings.summary,
            keyFact: {
                key: `review_${findings.storyId}`,
                content: findings
            }
        });
        
        // Save important patterns to long-term memory
        if (findings.patterns && findings.patterns.length > 0) {
            for (const pattern of findings.patterns) {
                await saveToLongTermMemory('qa', {
                    content: pattern,
                    memoryType: 'qa-pattern',
                    metadata: {
                        storyId: findings.storyId,
                        severity: pattern.severity || 'medium'
                    }
                });
            }
        }
        
        await logWorkingMemory('qa', 'save_findings_complete', 'review', { 
            storyId: findings.storyId,
            patternCount: findings.patterns?.length || 0 
        });
        
        console.log('QA findings saved successfully');
    } catch (error) {
        console.error('Failed to save QA findings:', error.message);
    }
}

/**
 * Validate QA context
 */
async function validateQAContext() {
    try {
        const memory = await loadWorkingMemory('qa');
        const hasSufficientContext = !!(memory && memory.currentContext?.storyId);
        
        await logContextValidation('qa', 'validate_context', 'story_context', hasSufficientContext, {
            hasMemory: !!memory,
            hasStoryContext: !!memory?.currentContext?.storyId
        });
        
        if (hasSufficientContext) {
            console.log('QA context validation: Sufficient');
        } else {
            console.log('QA context validation: Need story assignment');
        }
        
        return hasSufficientContext;
    } catch (error) {
        console.error('Failed to validate context:', error.message);
        return false;
    }
}

// Command-line interface
if (require.main === module) {
    const command = process.argv[2];
    
    async function runCommand() {
        try {
            switch (command) {
                case 'init':
                    await initQAMemory();
                    break;
                    
                case 'load-patterns':
                    const query = process.argv[3] || 'code quality review patterns';
                    await loadQAPatterns(query);
                    break;
                    
                case 'save-findings':
                    const findings = process.argv[3] ? JSON.parse(process.argv[3]) : {
                        summary: 'Test findings',
                        storyId: 'TEST-001',
                        patterns: ['Test pattern']
                    };
                    await saveQAFindings(findings);
                    break;
                    
                case 'validate-context':
                    await validateQAContext();
                    break;
                    
                default:
                    console.log('QA Memory Wrapper - Available commands:');
                    console.log('  init              - Initialize QA memory');
                    console.log('  load-patterns     - Load relevant QA patterns');
                    console.log('  save-findings     - Save QA review findings');
                    console.log('  validate-context  - Validate QA context');
                    process.exit(0);
            }
            
            // Close connections and ensure clean exit
            await closeConnections();
            setTimeout(() => process.exit(0), 100);
        } catch (error) {
            console.error(`Command failed: ${error.message}`);
            await closeConnections();
            process.exit(1);
        }
    }
    
    runCommand();
}

module.exports = {
    initQAMemory,
    loadQAPatterns,
    saveQAFindings,
    validateQAContext
};
==================== END: .bmad-core/utils/qa-memory-wrapper.js ====================

==================== START: .bmad-core/utils/agent-memory-loader.js ====================
/**
 * Agent Memory Loader for BMAD Agents
 * Loads both short-term and long-term memory during agent activation
 */

// Import functions dynamically to avoid circular dependencies
const getMemoryManager = () => require('./agent-memory-manager');
const { 
  retrieveAgentStoryMemory, 
  retrieveAgentEpicMemory,
  retrieveTaskMemory,
  closeConnections 
} = require('./qdrant');
const { withTimeout } = require('./timeout-wrapper');
const {
  logMemoryInit,
  logMemoryRetrieval,
  logMemoryError,
  logLongTermMemory
} = require('./memory-usage-logger');
const { MemoryError, handleCriticalMemoryError, validateMemoryResult } = require('./memory-error-handler');

/**
 * Load comprehensive memory context for agent activation
 * @param {string} agentName - The name of the agent (sm, dev, qa)
 * @param {Object} context - Activation context
 * @param {string} context.storyId - Current story ID
 * @param {string} context.epicId - Current epic ID
 * @param {string} context.taskId - Current task ID
 * @param {boolean} context.loadLongTerm - Whether to load long-term memories
 * @returns {Object} Complete memory context for agent
 */
async function loadAgentMemoryContextInternal(agentName, context = {}) {
  try {
    const { storyId, epicId, taskId, loadLongTerm = true } = context;
    
    console.log(`Loading memory context for agent: ${agentName}`);
    
    // Log memory initialization start
    await logMemoryInit(agentName, 'load_context_start', { 
      storyId, 
      epicId, 
      taskId, 
      loadLongTerm 
    });
    
    // Load or initialize working memory
    const { loadWorkingMemory, initializeWorkingMemory, getMemorySummary } = getMemoryManager();
    let workingMemory = await loadWorkingMemory(agentName);
    if (!workingMemory) {
      console.log(`No existing working memory found, initializing new memory for ${agentName}`);
      await logMemoryInit(agentName, 'initialize_working_memory', { storyId, epicId, taskId });
      workingMemory = await initializeWorkingMemory(agentName, { storyId, epicId, taskId });
    } else {
      console.log(`Loaded existing working memory for ${agentName}`);
      await logMemoryInit(agentName, 'load_existing_working_memory', { 
        observationCount: workingMemory.observations?.length || 0,
        existingContext: workingMemory.currentContext
      });
      // Update context if provided
      if (storyId || epicId || taskId) {
        workingMemory.currentContext = {
          ...workingMemory.currentContext,
          ...(storyId && { storyId }),
          ...(epicId && { epicId }),
          ...(taskId && { taskId })
        };
      }
    }
    
    // Load long-term memories if requested
    let longTermMemories = [];
    if (loadLongTerm) {
      console.log(`Loading long-term memories for ${agentName}`);
      await logMemoryRetrieval(agentName, 'load_long_term_start', 'context-based search', 0, {
        context: workingMemory.currentContext
      });
      longTermMemories = await loadRelevantLongTermMemories(agentName, workingMemory.currentContext);
      await logMemoryRetrieval(agentName, 'load_long_term_complete', 'context-based search', longTermMemories.length, {
        context: workingMemory.currentContext
      });
    }
    
    // Get memory summary
    const memorySummary = await getMemorySummary(agentName);
    
    const memoryContext = {
      agentName,
      loadedAt: new Date().toISOString(),
      workingMemory,
      longTermMemories,
      memorySummary,
      context: workingMemory.currentContext,
      recommendations: generateMemoryRecommendations(workingMemory, longTermMemories)
    };
    
    console.log(`Memory context loaded for ${agentName}:`, {
      workingMemoryFound: !!workingMemory,
      observationCount: workingMemory.observations?.length || 0,
      longTermMemoryCount: longTermMemories.length,
      currentContext: workingMemory.currentContext
    });
    
    // Log successful memory context load
    await logMemoryInit(agentName, 'load_context_complete', {
      workingMemoryFound: !!workingMemory,
      observationCount: workingMemory.observations?.length || 0,
      longTermMemoryCount: longTermMemories.length,
      recommendationCount: memoryContext.recommendations.length
    });
    
    return memoryContext;
  } catch (error) {
    console.error(`Failed to load memory context for ${agentName}:`, error);
    
    // Log memory loading error
    await logMemoryError(agentName, 'load_context_failed', error, { context });
    
    return {
      agentName,
      loadedAt: new Date().toISOString(),
      error: error.message,
      workingMemory: null,
      longTermMemories: [],
      memorySummary: null,
      context: context,
      recommendations: ['Unable to load memory context - agent should request user clarification']
    };
  }
}

/**
 * Load relevant long-term memories based on current context
 * @param {string} agentName - The name of the agent
 * @param {Object} currentContext - Current working context
 * @returns {Array} Array of relevant long-term memories
 */
async function loadRelevantLongTermMemories(agentName, currentContext) {
  try {
    const memories = [];
    const { storyId, epicId, taskId } = currentContext;
    
    // Load story-specific memories
    if (storyId) {
      await logMemoryRetrieval(agentName, 'retrieve_story_memories', `story ${storyId}`, 0, { storyId });
      const storyMemories = await retrieveAgentStoryMemory(
        agentName, 
        `story ${storyId} implementation observations decisions`,
        storyId,
        5
      );
      memories.push(...storyMemories.map(m => ({ ...m, source: 'story-context' })));
      await logMemoryRetrieval(agentName, 'retrieve_story_memories_complete', `story ${storyId}`, storyMemories.length, { storyId });
    }
    
    // Load epic-specific memories
    if (epicId) {
      await logMemoryRetrieval(agentName, 'retrieve_epic_memories', `epic ${epicId}`, 0, { epicId });
      const epicMemories = await retrieveAgentEpicMemory(
        agentName,
        `epic ${epicId} patterns lessons learned`,
        epicId,
        3
      );
      memories.push(...epicMemories.map(m => ({ ...m, source: 'epic-context' })));
      await logMemoryRetrieval(agentName, 'retrieve_epic_memories_complete', `epic ${epicId}`, epicMemories.length, { epicId });
    }
    
    // Load task-specific memories if available
    if (taskId) {
      await logMemoryRetrieval(agentName, 'retrieve_task_memories', `task ${taskId}`, 0, { taskId });
      const taskMemories = await retrieveTaskMemory(agentName, taskId, 3);
      memories.push(...taskMemories.map(m => ({ ...m, source: 'task-history' })));
      await logMemoryRetrieval(agentName, 'retrieve_task_memories_complete', `task ${taskId}`, taskMemories.length, { taskId });
    }
    
    // Load general agent memories for similar work
    const generalQuery = `${agentName} agent similar work patterns best practices`;
    const { retrieveRelevantMemories } = getMemoryManager();
    
    // Set a shorter timeout for memory retrieval
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Memory retrieval timeout')), 5000) // 5 second timeout
    );
    
    try {
      const memoryResults = await Promise.race([
        retrieveRelevantMemories(agentName, generalQuery, { topN: 3 }),
        timeoutPromise
      ]);
      
      // Handle the results object structure
      if (memoryResults && memoryResults.longTerm && Array.isArray(memoryResults.longTerm)) {
        memories.push(...memoryResults.longTerm.map(m => ({ ...m, source: 'general-experience' })));
      }
      if (memoryResults && memoryResults.combined && Array.isArray(memoryResults.combined)) {
        memories.push(...memoryResults.combined.slice(0, 3).map(m => ({ ...m, source: 'general-experience' })));
      }
    } catch (timeoutError) {
      console.log('Memory retrieval timed out after 5 seconds - continuing with empty memories');
      // Continue without historical memories - not a fatal error
    }
    
    // Sort by relevance score and remove duplicates
    const uniqueMemories = memories
      .filter((memory, index, array) => 
        array.findIndex(m => m.id === memory.id) === index
      )
      .sort((a, b) => b.score - a.score)
      .slice(0, 10); // Limit to top 10 most relevant
    
    return uniqueMemories;
  } catch (error) {
    console.error(`Failed to load long-term memories for ${agentName}:`, error);
    await logMemoryError(agentName, 'load_long_term_memories_failed', error, { currentContext });
    return [];
  }
}

/**
 * Generate memory-based recommendations for agent
 * @param {Object} workingMemory - Current working memory
 * @param {Array} longTermMemories - Relevant long-term memories
 * @returns {Array} Array of recommendations
 */
function generateMemoryRecommendations(workingMemory, longTermMemories) {
  const recommendations = [];
  
  // Check for missing context
  const context = workingMemory.currentContext || {};
  if (!context.storyId) {
    recommendations.push('No story context available - request story assignment before proceeding');
  }
  if (!context.epicId) {
    recommendations.push('No epic context available - may need epic information for broader understanding');
  }
  
  // Check for blockers
  const activeBlockers = workingMemory.blockers?.filter(b => !b.resolved) || [];
  if (activeBlockers.length > 0) {
    recommendations.push(`${activeBlockers.length} unresolved blocker(s) - address before continuing`);
  }
  
  // Check for incomplete plan
  if (!workingMemory.plan || workingMemory.plan.length === 0) {
    recommendations.push('No execution plan available - create plan before starting work');
  }
  
  // Check for recent similar work
  const recentSimilarWork = longTermMemories.filter(m => 
    m.source === 'story-context' && m.score > 0.8
  );
  if (recentSimilarWork.length > 0) {
    recommendations.push(`Found ${recentSimilarWork.length} similar recent implementation(s) - review for patterns and lessons`);
  }
  
  // Check for epic patterns
  const epicPatterns = longTermMemories.filter(m => 
    m.source === 'epic-context' && m.score > 0.7
  );
  if (epicPatterns.length > 0) {
    recommendations.push(`Found ${epicPatterns.length} relevant epic pattern(s) - apply consistent approach`);
  }
  
  // Check observation count
  const observationCount = workingMemory.observations?.length || 0;
  if (observationCount === 0) {
    recommendations.push('No previous observations - this appears to be a fresh start');
  } else if (observationCount > 20) {
    recommendations.push(`${observationCount} observations recorded - consider archiving old observations to long-term memory`);
  }
  
  return recommendations;
}

/**
 * Quick memory status check for agent
 * @param {string} agentName - The name of the agent
 * @returns {Object} Memory status summary
 */
async function checkMemoryStatus(agentName) {
  try {
    const { loadWorkingMemory, getMemorySummary } = getMemoryManager();
    const workingMemory = await loadWorkingMemory(agentName);
    const summary = await getMemorySummary(agentName);
    
    return {
      agentName,
      hasWorkingMemory: !!workingMemory,
      lastUpdated: workingMemory?.lastUpdated || null,
      currentContext: workingMemory?.currentContext || {},
      observationCount: summary.observationCount || 0,
      blockerCount: summary.blockerCount || 0,
      status: !workingMemory ? 'no-memory' :
              summary.blockerCount > 0 ? 'has-blockers' :
              !workingMemory.currentContext?.storyId ? 'no-context' :
              'ready'
    };
  } catch (error) {
    return {
      agentName,
      hasWorkingMemory: false,
      error: error.message,
      status: 'error'
    };
  }
}

/**
 * Load memory context with context validation
 * @param {string} agentName - The name of the agent
 * @param {Object} context - Required context
 * @param {Array} requiredContext - Array of required context keys
 * @returns {Object} Memory context with validation results
 */
async function loadMemoryWithValidation(agentName, context, requiredContext = []) {
  const memoryContext = await loadAgentMemoryContext(agentName, context);
  
  // Validate required context
  const missing = [];
  const workingMemory = memoryContext.workingMemory;
  
  if (workingMemory) {
    for (const requirement of requiredContext) {
      if (requirement === 'storyId' && !workingMemory.currentContext?.storyId) {
        missing.push('storyId');
      } else if (requirement === 'epicId' && !workingMemory.currentContext?.epicId) {
        missing.push('epicId');
      } else if (requirement === 'plan' && (!workingMemory.plan || workingMemory.plan.length === 0)) {
        missing.push('plan');
      }
    }
  } else {
    missing.push(...requiredContext);
  }
  
  return {
    ...memoryContext,
    validation: {
      hasRequiredContext: missing.length === 0,
      missingContext: missing,
      canProceed: missing.length === 0 && memoryContext.memorySummary?.blockerCount === 0
    }
  };
}

// Create a timeout-wrapped version of the main function
const loadAgentMemoryContext = withTimeout(
  loadAgentMemoryContextInternal,
  8000, // 8 second total timeout for entire operation
  'Load Agent Memory Context'
);

/**
 * Load agent memory and ensure clean process exit
 * Use this when calling from a subprocess that needs to exit
 */
async function loadAgentMemoryContextAndExit(agentName, context = {}) {
  try {
    // Log the initialization
    await logMemoryInit(agentName, 'load_context_start', { context });
    
    const result = await loadAgentMemoryContext(agentName, context);
    
    // Log the completion
    await logMemoryInit(agentName, 'load_context_complete', { 
      sessionId: result.workingMemory?.sessionId,
      hasExistingMemory: !!(result.workingMemory?.observations?.length),
      recommendationsCount: result.recommendations?.length || 0
    });
    
    // Ensure clean exit by closing connections
    const { closeConnections } = require('./qdrant');
    await closeConnections();
    
    // Close connections and force exit after a short delay to ensure output is flushed
    setTimeout(async () => {
      await closeConnections();
      process.exit(0);
    }, 100);
    
    return result;
  } catch (error) {
    console.error('Memory load error:', error.message);
    await closeConnections();
    process.exit(1);
  }
}

/**
 * Retrieve relevant memories and ensure clean process exit
 * Use this when calling from a subprocess that needs to exit
 */
async function retrieveRelevantMemoriesAndExit(agentName, query, options = {}) {
  try {
    // Log the retrieval operation
    await logMemoryRetrieval(agentName, 'retrieve_memories_start', query, 0, { options });
    
    const { retrieveRelevantMemories } = getMemoryManager();
    const result = await retrieveRelevantMemories(agentName, query, options);
    
    // Log the completion with results count
    const resultsCount = result?.combined?.length || 0;
    await logMemoryRetrieval(agentName, 'retrieve_memories_complete', query, resultsCount, { 
      hasResults: resultsCount > 0 
    });
    
    // Print result to stdout for subprocess communication
    console.log(JSON.stringify(result, null, 2));
    
    // Ensure clean exit by closing connections
    const { closeConnections } = require('./qdrant');
    await closeConnections();
    
    // Close connections and force exit after a short delay to ensure output is flushed
    setTimeout(async () => {
      await closeConnections();
      process.exit(0);
    }, 100);
    
    return result;
  } catch (error) {
    console.error('Memory retrieval error:', error.message);
    await closeConnections();
    process.exit(1);
  }
}

/**
 * Update working memory and ensure clean process exit
 * Use this when calling from a subprocess that needs to exit
 */
async function updateWorkingMemoryAndExit(agentName, updates) {
  try {
    const { updateWorkingMemory } = getMemoryManager();
    const result = await updateWorkingMemory(agentName, updates);
    
    // Validate the result
    validateMemoryResult(result, 'updateWorkingMemory', agentName);
    
    // Print result to stdout for subprocess communication
    console.log(JSON.stringify(result, null, 2));
    
    // Log successful memory update
    console.log(`✅ Working memory successfully updated for ${agentName}`);
    
    // Ensure clean exit by closing connections
    await closeConnections();
    
    // Close connections and force exit after a short delay to ensure output is flushed
    setTimeout(async () => {
      await closeConnections();
      process.exit(0);
    }, 100);
    
    return result;
  } catch (error) {
    // Convert to MemoryError if not already
    const memoryError = error instanceof MemoryError ? error : new MemoryError(
      error.message || 'Failed to update working memory',
      'updateWorkingMemory',
      agentName,
      { originalError: error.name, updates }
    );
    
    await handleCriticalMemoryError(memoryError, 'Updating working memory');
    // handleCriticalMemoryError will exit the process
  }
}

/**
 * Save to long-term memory and ensure clean process exit
 * Use this when calling from a subprocess that needs to exit
 */
async function saveToLongTermMemoryAndExit(agentName, options = {}) {
  try {
    const { saveToLongTermMemory } = getMemoryManager();
    const result = await saveToLongTermMemory(agentName, options);
    
    // Validate the result
    validateMemoryResult(result, 'saveToLongTermMemory', agentName);
    
    // Print result to stdout for subprocess communication
    console.log(JSON.stringify(result, null, 2));
    
    // Log successful memory save
    console.log(`✅ Long-term memory successfully saved for ${agentName}`);
    
    // Ensure clean exit by closing connections
    await closeConnections();
    
    // Close connections and force exit after a short delay to ensure output is flushed
    setTimeout(async () => {
      await closeConnections();
      process.exit(0);
    }, 100);
    
    return result;
  } catch (error) {
    // Convert to MemoryError if not already
    const memoryError = error instanceof MemoryError ? error : new MemoryError(
      error.message || 'Failed to save to long-term memory',
      'saveToLongTermMemory',
      agentName,
      { originalError: error.name, options }
    );
    
    await handleCriticalMemoryError(memoryError, 'Saving to long-term memory');
    // handleCriticalMemoryError will exit the process
  }
}

module.exports = {
  loadAgentMemoryContext,
  loadAgentMemoryContextAndExit,
  loadRelevantLongTermMemories,
  generateMemoryRecommendations,
  checkMemoryStatus,
  loadMemoryWithValidation,
  retrieveRelevantMemoriesAndExit,
  updateWorkingMemoryAndExit,
  saveToLongTermMemoryAndExit
};

// Command-line interface
if (require.main === module) {
  const command = process.argv[2];
  const agentName = process.argv[3];
  const args = process.argv.slice(4);
  
  async function runCommand() {
    try {
      switch (command) {
        case 'loadAgentMemoryContextAndExit':
          await loadAgentMemoryContextAndExit(agentName);
          break;
          
        case 'retrieveRelevantMemoriesAndExit':
          const query = args[0] || 'general context';
          const topN = parseInt(args[1]) || 5;
          await retrieveRelevantMemoriesAndExit(agentName, query, { topN });
          break;
          
        case 'updateWorkingMemoryAndExit':
          const updates = args[0] ? JSON.parse(args[0]) : {};
          await updateWorkingMemoryAndExit(agentName, updates);
          break;
          
        case 'saveToLongTermMemoryAndExit':
          const memoryContent = args[0] ? JSON.parse(args[0]) : {};
          await saveToLongTermMemoryAndExit(agentName, memoryContent);
          break;
          
        default:
          console.error(`Unknown command: ${command}`);
          console.error('Available commands: loadAgentMemoryContextAndExit, retrieveRelevantMemoriesAndExit, updateWorkingMemoryAndExit, saveToLongTermMemoryAndExit');
          await closeConnections();
          process.exit(1);
      }
    } catch (error) {
      console.error(`Command failed: ${error.message}`);
      await closeConnections();
      process.exit(1);
    }
  }
  
  runCommand();
}
==================== END: .bmad-core/utils/agent-memory-loader.js ====================

==================== START: .bmad-core/utils/agent-memory-manager.js ====================
/**
 * Agent Memory Manager - Comprehensive memory management for BMAD agents
 * Provides consistent short-term and long-term memory operations for SM, Dev, and QA agents
 */

const fs = require('fs').promises;
const path = require('path');
const { storeMemorySnippet, retrieveMemory, closeConnections } = require('./qdrant');
const { MemoryTransaction } = require('./memory-transaction');
const { safeReadJson, safeWriteJson, updateJsonFile } = require('./safe-file-operations');
const { 
  MEMORY_CONFIG, 
  getWorkingMemoryPath, 
  validateAgentName, 
  validateTextContent, 
  sanitizeTextContent 
} = require('./memory-config');
const { 
  performMemoryHygiene, 
  shouldRunMemoryHygiene 
} = require('./memory-hygiene');
const { withTimeout, fireAndForget } = require('./timeout-wrapper');
const {
  logMemoryInit,
  logWorkingMemory,
  logLongTermMemory,
  logMemoryRetrieval,
  logMemoryError,
  logTaskMemory,
  logSessionSummary
} = require('./memory-usage-logger');

// Queue to prevent concurrent memory hygiene operations per agent
const hygieneQueue = new Map();

/**
 * Initialize working memory for an agent session
 * @param {string} agentName - The name of the agent (sm, dev, qa)
 * @param {Object} options - Additional options
 * @param {string} options.storyId - Current story ID
 * @param {string} options.epicId - Current epic ID
 * @param {string} options.taskId - Current task ID
 * @returns {Object} Initialized memory structure
 */
async function initializeWorkingMemory(agentName, options = {}) {
  try {
    // Validate agent name
    validateAgentName(agentName);
    
    // Log memory initialization start
    await logMemoryInit(agentName, 'initialize_start', { options });
    
    // Ensure memory directory exists
    await fs.mkdir(MEMORY_CONFIG.BASE_DIR, { recursive: true });
    
    // Get centralized memory path
    const memoryPath = getWorkingMemoryPath(agentName);
    
    // Check if memory file already exists using safe operations
    const existingMemory = await safeReadJson(memoryPath, {});
    
    const memory = {
      agentName,
      sessionId: Date.now().toString(),
      initialized: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
      currentContext: {
        storyId: options.storyId || existingMemory.currentContext?.storyId || null,
        epicId: options.epicId || existingMemory.currentContext?.epicId || null,
        taskId: options.taskId || existingMemory.currentContext?.taskId || null
      },
      observations: existingMemory.observations || [],
      plan: existingMemory.plan || [],
      currentStep: existingMemory.currentStep || null,
      keyFacts: existingMemory.keyFacts || {},
      decisions: existingMemory.decisions || [],
      blockers: existingMemory.blockers || [],
      completedTasks: existingMemory.completedTasks || [],
      ...existingMemory
    };
    
    await safeWriteJson(memoryPath, memory);
    
    console.log(`Initialized working memory for agent: ${agentName}`);
    
    // Log successful initialization
    await logMemoryInit(agentName, 'initialize_complete', {
      sessionId: memory.sessionId,
      hasExistingMemory: Object.keys(existingMemory).length > 0,
      contextKeys: Object.keys(memory.currentContext).filter(k => memory.currentContext[k])
    });
    
    return memory;
  } catch (error) {
    console.error(`Failed to initialize working memory for ${agentName}:`, error);
    await logMemoryError(agentName, 'initialize_failed', error, { options });
    throw error;
  }
}

/**
 * Load working memory for an agent
 * @param {string} agentName - The name of the agent
 * @returns {Object|null} Memory object or null if not found
 */
async function loadWorkingMemory(agentName) {
  try {
    // Validate agent name
    validateAgentName(agentName);
    
    const memoryPath = getWorkingMemoryPath(agentName);
    const memory = await safeReadJson(memoryPath, null);
    
    if (memory) {
      await logWorkingMemory(agentName, 'load_success', 'working_memory', memory, {
        observationCount: memory.observations?.length || 0,
        sessionId: memory.sessionId
      });
    }
    
    return memory;
  } catch (error) {
    if (error.code === 'ENOENT') {
      console.warn(`No working memory found for agent ${agentName}, will initialize new memory`);
      await logWorkingMemory(agentName, 'load_not_found', 'working_memory', null, { reason: 'file_not_found' });
      return null;
    }
    console.error(`Failed to load working memory for ${agentName}:`, error.message);
    await logMemoryError(agentName, 'load_failed', error);
    return null;
  }
}

/**
 * Update working memory with new information
 * @param {string} agentName - The name of the agent
 * @param {Object} updates - Updates to apply to memory
 * @returns {Object} Updated memory state
 */
async function updateWorkingMemory(agentName, updates) {
  try {
    // Validate inputs
    validateAgentName(agentName);
    
    // Log the memory update start
    await logWorkingMemory(agentName, 'update_start', 'working_memory', updates, {
      updateKeys: Object.keys(updates)
    });
    
    // Validate and sanitize text content in updates
    if (updates.observation) {
      validateTextContent(updates.observation, 'observation');
      updates.observation = sanitizeTextContent(updates.observation);
    }
    if (updates.decision) {
      validateTextContent(updates.decision, 'decision');
      updates.decision = sanitizeTextContent(updates.decision);
    }
    if (updates.reasoning) {
      validateTextContent(updates.reasoning, 'reasoning');
      updates.reasoning = sanitizeTextContent(updates.reasoning);
    }
    if (updates.blocker) {
      validateTextContent(updates.blocker, 'blocker');
      updates.blocker = sanitizeTextContent(updates.blocker);
    }
    if (updates.keyFact?.content) {
      validateTextContent(updates.keyFact.content, 'key fact content');
      updates.keyFact.content = sanitizeTextContent(updates.keyFact.content);
    }
    
    const memoryPath = getWorkingMemoryPath(agentName);
    
    // Use atomic update operation to prevent corruption
    const updatedMemory = await updateJsonFile(
      memoryPath,
      async (memory) => {
        // Initialize memory if it doesn't exist
        if (!memory || Object.keys(memory).length === 0) {
          memory = {
            agentName,
            sessionId: Date.now().toString(),
            initialized: new Date().toISOString(),
            currentContext: {},
            observations: [],
            plan: [],
            currentStep: null,
            keyFacts: {},
            decisions: [],
            blockers: [],
            completedTasks: []
          };
        }
        
        // Apply updates
        memory.lastUpdated = new Date().toISOString();
        
        if (updates.currentContext) {
          memory.currentContext = { ...memory.currentContext, ...updates.currentContext };
        }
        
        if (updates.observation) {
          memory.observations = memory.observations || [];
          memory.observations.push({
            timestamp: new Date().toISOString(),
            content: updates.observation,
            context: memory.currentContext
          });
          
          // Trim observations if needed
          if (memory.observations.length > MEMORY_CONFIG.MAX_OBSERVATIONS) {
            memory.observations = memory.observations.slice(-MEMORY_CONFIG.MAX_OBSERVATIONS);
          }
        }
        
        if (updates.plan) {
          memory.plan = updates.plan;
        }
        
        if (updates.currentStep !== undefined) {
          memory.currentStep = updates.currentStep;
        }
        
        if (updates.keyFact) {
          memory.keyFacts = memory.keyFacts || {};
          const factKey = updates.keyFact.key || Date.now().toString();
          memory.keyFacts[factKey] = {
            content: updates.keyFact.content,
            timestamp: new Date().toISOString(),
            context: memory.currentContext
          };
        }
        
        if (updates.decision) {
          memory.decisions = memory.decisions || [];
          memory.decisions.push({
            timestamp: new Date().toISOString(),
            decision: updates.decision,
            reasoning: updates.reasoning || '',
            context: memory.currentContext
          });
          
          // Trim decisions if needed to prevent memory leaks
          if (memory.decisions.length > MEMORY_CONFIG.MAX_DECISIONS) {
            memory.decisions = memory.decisions.slice(-MEMORY_CONFIG.MAX_DECISIONS);
          }
        }
        
        if (updates.blocker) {
          memory.blockers = memory.blockers || [];
          memory.blockers.push({
            timestamp: new Date().toISOString(),
            blocker: updates.blocker,
            context: memory.currentContext,
            resolved: false
          });
          
          // Trim blockers if needed to prevent memory leaks
          if (memory.blockers.length > MEMORY_CONFIG.MAX_BLOCKERS) {
            memory.blockers = memory.blockers.slice(-MEMORY_CONFIG.MAX_BLOCKERS);
          }
        }
        
        if (updates.resolveBlocker) {
          memory.blockers = memory.blockers || [];
          const blocker = memory.blockers.find(b => !b.resolved && b.blocker.includes(updates.resolveBlocker));
          if (blocker) {
            blocker.resolved = true;
            blocker.resolution = updates.resolution || 'Resolved';
            blocker.resolvedAt = new Date().toISOString();
          }
        }
        
        if (updates.completedTask) {
          memory.completedTasks = memory.completedTasks || [];
          memory.completedTasks.push({
            timestamp: new Date().toISOString(),
            taskId: updates.completedTask,
            context: memory.currentContext
          });
          
          // Trim completed tasks if needed to prevent memory leaks
          if (memory.completedTasks.length > MEMORY_CONFIG.MAX_COMPLETED_TASKS) {
            memory.completedTasks = memory.completedTasks.slice(-MEMORY_CONFIG.MAX_COMPLETED_TASKS);
          }
        }
        
        // Trim key facts if needed to prevent memory leaks
        if (memory.keyFacts && Object.keys(memory.keyFacts).length > MEMORY_CONFIG.MAX_KEY_FACTS) {
          const factEntries = Object.entries(memory.keyFacts);
          factEntries.sort((a, b) => new Date(b[1].timestamp) - new Date(a[1].timestamp));
          
          const trimmedFacts = {};
          factEntries.slice(0, MEMORY_CONFIG.MAX_KEY_FACTS).forEach(([key, fact]) => {
            trimmedFacts[key] = fact;
          });
          memory.keyFacts = trimmedFacts;
        }
        
        return memory;
      },
      {} // Default empty object
    );
    
    // Perform memory hygiene if configured to run after each action
    // Use a proper async queue to prevent race conditions
    performMemoryHygieneAsync(agentName);
    
    // Log successful memory update
    await logWorkingMemory(agentName, 'update_complete', 'working_memory', updatedMemory, {
      observationCount: updatedMemory.observations?.length || 0,
      decisionCount: updatedMemory.decisions?.length || 0,
      blockerCount: updatedMemory.blockers?.filter(b => !b.resolved).length || 0
    });
    
    // Use setImmediate to ensure we return quickly
    setImmediate(() => {
      // Any post-update operations can happen here
    });
    
    return {
      success: true,
      memory: updatedMemory,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error(`Failed to update working memory for ${agentName}:`, error);
    await logMemoryError(agentName, 'update_failed', error, { updates });
    throw error;
  }
}

/**
 * Retrieve relevant memories from both short-term and long-term storage
 * @param {string} agentName - The name of the agent
 * @param {string} query - Query string for memory search
 * @param {Object} options - Search options
 * @param {string} options.storyId - Filter by story ID
 * @param {string} options.epicId - Filter by epic ID
 * @param {number} options.topN - Number of results to return from long-term storage
 * @param {boolean} options.shortTermOnly - Only return short-term memories
 * @param {boolean} options.longTermOnly - Only return long-term memories
 * @returns {Object} Combined memories from both sources with detailed breakdown
 */
async function retrieveRelevantMemories(agentName, query, options = {}) {
  try {
    const { storyId, epicId, topN = 5, shortTermOnly = false, longTermOnly = false } = options;
    
    // Log memory retrieval start
    await logMemoryRetrieval(agentName, 'retrieve_start', query, 0, { 
      storyId, 
      epicId, 
      topN, 
      shortTermOnly, 
      longTermOnly 
    });
    
    const results = {
      shortTerm: {
        observations: [],
        decisions: [],
        keyFacts: [],
        blockers: [],
        plan: []
      },
      longTerm: [],
      combined: [],
      query,
      timestamp: new Date().toISOString()
    };

    // Retrieve short-term memory if not excluded
    if (!longTermOnly) {
      const workingMemory = await loadWorkingMemory(agentName);
      if (workingMemory) {
        // Filter and search short-term memory
        const queryLower = query.toLowerCase();
        
        // Search observations
        results.shortTerm.observations = (workingMemory.observations || [])
          .filter(obs => {
            const matchesQuery = obs.content.toLowerCase().includes(queryLower);
            const matchesStory = !storyId || obs.context?.storyId === storyId;
            const matchesEpic = !epicId || obs.context?.epicId === epicId;
            return matchesQuery && matchesStory && matchesEpic;
          })
          .slice(0, 10) // Limit short-term results
          .map(obs => ({
            ...obs,
            source: 'short-term',
            type: 'observation'
          }));

        // Search decisions
        results.shortTerm.decisions = (workingMemory.decisions || [])
          .filter(decision => {
            const matchesQuery = (decision.decision + ' ' + (decision.reasoning || '')).toLowerCase().includes(queryLower);
            const matchesStory = !storyId || decision.context?.storyId === storyId;
            const matchesEpic = !epicId || decision.context?.epicId === epicId;
            return matchesQuery && matchesStory && matchesEpic;
          })
          .slice(0, 5)
          .map(decision => ({
            ...decision,
            source: 'short-term',
            type: 'decision'
          }));

        // Search key facts
        results.shortTerm.keyFacts = Object.entries(workingMemory.keyFacts || {})
          .filter(([key, fact]) => {
            const content = key + ' ' + fact.content;
            const matchesQuery = content.toLowerCase().includes(queryLower);
            const matchesStory = !storyId || fact.context?.storyId === storyId;
            const matchesEpic = !epicId || fact.context?.epicId === epicId;
            return matchesQuery && matchesStory && matchesEpic;
          })
          .slice(0, 10)
          .map(([key, fact]) => ({
            key,
            ...fact,
            source: 'short-term',
            type: 'key-fact'
          }));

        // Search blockers
        results.shortTerm.blockers = (workingMemory.blockers || [])
          .filter(blocker => {
            const content = blocker.blocker + ' ' + (blocker.resolution || '');
            const matchesQuery = content.toLowerCase().includes(queryLower);
            const matchesStory = !storyId || blocker.context?.storyId === storyId;
            const matchesEpic = !epicId || blocker.context?.epicId === epicId;
            return matchesQuery && matchesStory && matchesEpic;
          })
          .slice(0, 5)
          .map(blocker => ({
            ...blocker,
            source: 'short-term',
            type: 'blocker'
          }));

        // Include current plan if relevant
        if (workingMemory.plan && workingMemory.plan.length > 0) {
          const planContent = workingMemory.plan.join(' ').toLowerCase();
          if (planContent.includes(queryLower)) {
            results.shortTerm.plan = [{
              content: workingMemory.plan,
              currentStep: workingMemory.currentStep,
              source: 'short-term',
              type: 'plan',
              timestamp: workingMemory.lastUpdated
            }];
          }
        }
      }
    }

    // Retrieve long-term memory if not excluded
    if (!longTermOnly) {
      try {
        // Quick check if collection has any data with timeout
        const { getCollectionPointCount } = require('./qdrant');
        const pointCount = await withTimeout(
          getCollectionPointCount,
          2000,
          'Get Collection Point Count'
        )();
        
        if (!pointCount || pointCount === 0) {
          console.log('Qdrant collection is empty or unavailable - skipping long-term memory search');
          results.longTerm = [];
        } else {
          // Create context-aware query for Qdrant
          let contextQuery = query;
          if (storyId) {
            contextQuery += ` story:${storyId}`;
          }
          if (epicId) {
            contextQuery += ` epic:${epicId}`;
          }
          contextQuery += ` agent:${agentName}`;
          
          // Wrap retrieveMemory with timeout
          const longTermMemories = await withTimeout(
            () => retrieveMemory(contextQuery, topN),
            3000,
            'Retrieve Long-term Memory'
          )() || [];
          
          // Filter and format long-term memories
          results.longTerm = longTermMemories
            .filter(memory => {
              if (memory.agentName && memory.agentName !== agentName) return false;
              if (storyId && memory.storyId && memory.storyId !== storyId) return false;
              if (epicId && memory.epicId && memory.epicId !== epicId) return false;
              return true;
            })
            .map(memory => ({
              ...memory,
              source: 'long-term',
              type: memory.type || 'archived-memory'
            }));
        }
      } catch (longTermError) {
        console.warn(`Failed to retrieve long-term memories for ${agentName}:`, longTermError.message);
        results.longTermError = longTermError.message;
        results.longTerm = []; // Ensure empty array on error
      }
    }

    // Combine all memories and sort by relevance and recency
    results.combined = [
      ...results.shortTerm.observations,
      ...results.shortTerm.decisions,
      ...results.shortTerm.keyFacts,
      ...results.shortTerm.blockers,
      ...results.shortTerm.plan,
      ...results.longTerm
    ].sort((a, b) => {
      // Prioritize short-term memories slightly
      if (a.source === 'short-term' && b.source === 'long-term') return -1;
      if (a.source === 'long-term' && b.source === 'short-term') return 1;
      
      // Sort by timestamp (most recent first)
      const aTime = new Date(a.timestamp || a.created_at || 0);
      const bTime = new Date(b.timestamp || b.created_at || 0);
      return bTime - aTime;
    });

    // Log successful retrieval
    const combinedCount = results.combined.length;
    const shortTermCount = Object.values(results.shortTerm).reduce((sum, arr) => sum + arr.length, 0);
    const longTermCount = results.longTerm.length;
    
    await logMemoryRetrieval(agentName, 'retrieve_complete', query, combinedCount, {
      shortTermCount,
      longTermCount,
      hasError: !!results.longTermError
    });
    
    return results;
  } catch (error) {
    console.error(`Failed to retrieve memories for ${agentName}:`, error);
    await logMemoryError(agentName, 'retrieve_failed', error, { query, options });
    
    return {
      shortTerm: { observations: [], decisions: [], keyFacts: [], blockers: [], plan: [] },
      longTerm: [],
      combined: [],
      error: error.message,
      query,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Store a memory snippet in long-term storage (Qdrant)
 * @param {string} agentName - The name of the agent
 * @param {string} content - Content to store
 * @param {Object} metadata - Additional metadata
 * @returns {string} Memory ID
 */
async function storeMemorySnippetWithContext(agentName, content, metadata = {}) {
  try {
    // Ensure content is a string
    const contentStr = typeof content === 'string' ? content : JSON.stringify(content);
    
    // Load current context from working memory
    const workingMemory = await loadWorkingMemory(agentName);
    const context = workingMemory?.currentContext || {};
    
    const enhancedMetadata = {
      agent: agentName,
      storyId: context.storyId,
      epicId: context.epicId,
      taskId: context.taskId,
      timestamp: new Date().toISOString(),
      type: 'agent-observation',
      ...metadata
    };
    
    // Log long-term memory storage
    await logLongTermMemory(agentName, 'store_start', { content: contentStr, metadata: enhancedMetadata }, {
      contentLength: contentStr.length,
      memoryType: enhancedMetadata.type
    });
    
    const memoryId = await storeMemorySnippet(agentName, contentStr, enhancedMetadata);
    
    if (memoryId) {
      await logLongTermMemory(agentName, 'store_complete', { content: contentStr, metadata: enhancedMetadata }, {
        memoryId,
        contentLength: contentStr.length,
        memoryType: enhancedMetadata.type
      });
    } else {
      await logMemoryError(agentName, 'store_failed', new Error('Store returned null'), { content: contentStr, metadata });
    }
    
    return memoryId;
  } catch (error) {
    console.error(`Failed to store memory snippet for ${agentName}:`, error);
    await logMemoryError(agentName, 'store_snippet_failed', error, { content, metadata });
    return null;
  }
}

/**
 * Archive completed task to long-term memory
 * @param {string} agentName - The name of the agent
 * @param {string} taskId - Task identifier
 * @returns {boolean} Success status
 */
async function archiveTaskMemory(agentName, taskId) {
  try {
    const memory = await loadWorkingMemory(agentName);
    if (!memory) return false;
    
    // Create task summary
    const taskObservations = memory.observations.filter(obs => 
      obs.context?.taskId === taskId
    );
    
    const taskDecisions = memory.decisions.filter(dec => 
      dec.context?.taskId === taskId
    );
    
    const summary = {
      taskId,
      storyId: memory.currentContext?.storyId,
      epicId: memory.currentContext?.epicId,
      agentName,
      observationCount: taskObservations.length,
      keyObservations: taskObservations.slice(-5), // Last 5 observations
      decisions: taskDecisions,
      keyFacts: Object.entries(memory.keyFacts || {})
        .filter(([key, fact]) => fact.context?.taskId === taskId)
        .reduce((acc, [key, fact]) => ({ ...acc, [key]: fact }), {}),
      completedAt: new Date().toISOString()
    };
    
    await storeMemorySnippetWithContext(
      agentName,
      JSON.stringify(summary),
      {
        type: 'task-archive',
        taskId,
        storyId: memory.currentContext?.storyId,
        epicId: memory.currentContext?.epicId
      }
    );
    
    return true;
  } catch (error) {
    console.error(`Failed to archive task memory for ${agentName}:`, error);
    return false;
  }
}

/**
 * Check if agent has sufficient context to proceed
 * @param {string} agentName - The name of the agent
 * @param {Array} requiredContext - Array of required context keys
 * @returns {Object} Context check result
 */
async function checkContextSufficiency(agentName, requiredContext = []) {
  try {
    // Wrap memory loading with timeout to prevent hanging
    const memory = await withTimeout(
      loadWorkingMemory,
      3000,
      'Load Working Memory for Context Check'
    )(agentName);
    
    if (!memory) {
      return {
        sufficient: false,
        missing: requiredContext,
        message: 'No working memory found'
      };
    }
    
    const missing = [];
    const available = {};
    
    for (const contextKey of requiredContext) {
      if (contextKey === 'storyId' && !memory.currentContext?.storyId) {
        missing.push('storyId');
      } else if (contextKey === 'epicId' && !memory.currentContext?.epicId) {
        missing.push('epicId');
      } else if (contextKey === 'taskId' && !memory.currentContext?.taskId) {
        missing.push('taskId');
      } else if (contextKey === 'plan' && (!memory.plan || memory.plan.length === 0)) {
        missing.push('plan');
      } else if (contextKey.startsWith('keyFact:')) {
        const factKey = contextKey.replace('keyFact:', '');
        if (!memory.keyFacts?.[factKey]) {
          missing.push(contextKey);
        } else {
          available[contextKey] = memory.keyFacts[factKey];
        }
      } else {
        // Context key is available
        if (contextKey === 'storyId') available.storyId = memory.currentContext.storyId;
        if (contextKey === 'epicId') available.epicId = memory.currentContext.epicId;
        if (contextKey === 'taskId') available.taskId = memory.currentContext.taskId;
        if (contextKey === 'plan') available.plan = memory.plan;
      }
    }
    
    return {
      sufficient: missing.length === 0,
      missing,
      available,
      message: missing.length === 0 
        ? 'All required context is available'
        : `Missing required context: ${missing.join(', ')}`
    };
  } catch (error) {
    console.error(`Failed to check context sufficiency for ${agentName}:`, error);
    return {
      sufficient: false,
      missing: requiredContext,
      message: `Error checking context: ${error.message}`
    };
  }
}

/**
 * Get memory summary for agent
 * @param {string} agentName - The name of the agent
 * @returns {Object} Memory summary
 */
async function getMemorySummary(agentName) {
  try {
    const memory = await loadWorkingMemory(agentName);
    if (!memory) {
      return {
        agentName,
        hasMemory: false,
        message: 'No working memory found'
      };
    }
    
    return {
      agentName,
      hasMemory: true,
      sessionId: memory.sessionId,
      initialized: memory.initialized,
      lastUpdated: memory.lastUpdated,
      currentContext: memory.currentContext,
      observationCount: memory.observations?.length || 0,
      planItems: memory.plan?.length || 0,
      currentStep: memory.currentStep,
      keyFactCount: Object.keys(memory.keyFacts || {}).length,
      decisionCount: memory.decisions?.length || 0,
      blockerCount: memory.blockers?.filter(b => !b.resolved).length || 0,
      completedTaskCount: memory.completedTasks?.length || 0
    };
  } catch (error) {
    console.error(`Failed to get memory summary for ${agentName}:`, error);
    return {
      agentName,
      hasMemory: false,
      error: error.message
    };
  }
}

/**
 * Clear working memory for an agent
 * @param {string} agentName - The name of the agent
 * @param {boolean} preserveContext - Whether to preserve current context
 * @returns {boolean} Success status
 */
async function clearWorkingMemory(agentName, preserveContext = false) {
  try {
    validateAgentName(agentName);
    const memoryPath = getWorkingMemoryPath(agentName);
    
    if (preserveContext) {
      const memory = await loadWorkingMemory(agentName);
      const context = memory?.currentContext || {};
      await initializeWorkingMemory(agentName, context);
    } else {
      await fs.unlink(memoryPath);
    }
    
    console.log(`Cleared working memory for agent: ${agentName}`);
    return true;
  } catch (error) {
    console.error(`Failed to clear working memory for ${agentName}:`, error);
    return false;
  }
}

/**
 * Perform manual memory hygiene for an agent
 * @param {string} agentName - The name of the agent
 * @param {Object} options - Hygiene options
 * @returns {Promise<Object>} Hygiene results
 */
async function performAgentMemoryHygiene(agentName, options = {}) {
  try {
    validateAgentName(agentName);
    console.log(`Starting manual memory hygiene for agent: ${agentName}`);
    
    const results = await performMemoryHygiene(agentName, { 
      force: true, 
      ...options 
    });
    
    if (results.success) {
      console.log(`Memory hygiene completed successfully for ${agentName}`);
    } else {
      console.warn(`Memory hygiene completed with errors for ${agentName}:`, results.errors);
    }
    
    return results;
  } catch (error) {
    console.error(`Manual memory hygiene failed for ${agentName}:`, error);
    return {
      agentName,
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Safely perform memory hygiene in background without blocking
 * @param {string} agentName - The name of the agent
 */
function performMemoryHygieneAsync(agentName) {
  // Check if hygiene is already running for this agent
  if (hygieneQueue.has(agentName)) {
    return; // Skip if already running
  }
  
  // Mark as running
  hygieneQueue.set(agentName, true);
  
  // Run in background with proper error handling
  setImmediate(async () => {
    try {
      const shouldRun = await shouldRunMemoryHygiene(agentName, 'action');
      if (shouldRun) {
        const results = await performMemoryHygiene(agentName);
        if (!results.success && results.errors?.length > 0) {
          console.warn(`Background memory hygiene completed with issues for ${agentName}:`, results.errors);
        }
      }
    } catch (hygieneError) {
      console.error(`Background memory hygiene failed for ${agentName}:`, {
        error: hygieneError.message,
        stack: hygieneError.stack,
        agentName,
        timestamp: new Date().toISOString()
      });
    } finally {
      // Always remove from queue to allow future runs
      hygieneQueue.delete(agentName);
    }
  });
}

// Convenience functions for agents that expect specific persist functions
async function persistObservation(agentName, observation, metadata = {}) {
  return updateWorkingMemory(agentName, {
    observation: observation
  });
}

async function persistDecision(agentName, decision, rationale, metadata = {}) {
  return updateWorkingMemory(agentName, {
    decision: decision,
    reasoning: rationale
  });
}

async function persistBlocker(agentName, blocker, metadata = {}) {
  return updateWorkingMemory(agentName, {
    blocker: blocker
  });
}

async function persistBlockerResolution(agentName, blockerId, resolution) {
  const memory = await loadWorkingMemory(agentName);
  const blockerIndex = memory.blockers.findIndex(b => b.blocker === blockerId || b.timestamp === blockerId);
  if (blockerIndex >= 0) {
    memory.blockers[blockerIndex].resolution = resolution;
    memory.blockers[blockerIndex].resolvedAt = new Date().toISOString();
    memory.blockers[blockerIndex].status = 'resolved';
    await updateWorkingMemory(agentName, memory);
  }
}

async function persistTaskCompletion(agentName, taskId, details = {}) {
  await updateWorkingMemory(agentName, {
    completedTasks: [taskId],
    observations: [{
      observation: `Completed task: ${taskId}`,
      timestamp: new Date().toISOString(),
      taskId,
      ...details
    }]
  });
  // Also archive to long-term memory
  return archiveTaskMemory(agentName, taskId);
}

async function persistKeyFact(agentName, fact, metadata = {}) {
  const factKey = `fact_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  
  // Use fire-and-forget for key fact persistence to avoid blocking
  fireAndForget(
    async () => updateWorkingMemory(agentName, {
      keyFacts: {
        [factKey]: {
          content: fact,
          timestamp: new Date().toISOString(),
          ...metadata
        }
      }
    }),
    'Persist Key Fact'
  )();
  
  // Return immediately with the fact key
  return factKey;
}

// Add long-term memory save function
async function saveToLongTermMemory(agentName, memoryContent) {
  try {
    // Validate input
    if (!memoryContent || !memoryContent.content) {
      console.warn('saveToLongTermMemory called with invalid content');
      return { saved: false, error: 'Invalid memory content', timestamp: new Date().toISOString() };
    }
    
    await logLongTermMemory(agentName, 'save_start', memoryContent, {
      memoryType: memoryContent.memoryType,
      hasContent: !!memoryContent.content
    });
    
    // Execute the actual save operation synchronously to ensure proper error handling
    const result = await storeMemorySnippetWithContext(agentName, memoryContent.content, {
      ...memoryContent.metadata,
      memoryType: memoryContent.memoryType || 'general'
    });
    
    if (!result) {
      throw new Error('Failed to store memory snippet - no result returned');
    }
    
    await logLongTermMemory(agentName, 'save_complete', memoryContent, {
      memoryId: result,
      memoryType: memoryContent.memoryType
    });
    
    // Return success with the memory ID
    return { 
      saved: true, 
      memoryId: result,
      timestamp: new Date().toISOString() 
    };
  } catch (error) {
    await logMemoryError(agentName, 'save_long_term_failed', error, { memoryContent });
    return { saved: false, error: error.message, timestamp: new Date().toISOString() };
  }
}

// Add missing validation and summary functions
async function loadMemoryWithValidation(agentName, context = {}) {
  const memory = await loadWorkingMemory(agentName);
  const sufficiency = await checkContextSufficiency(agentName, context);
  
  return {
    memory,
    validation: {
      hasSufficientContext: sufficiency.hasSufficientContext,
      recommendations: sufficiency.recommendations || []
    }
  };
}

async function createSessionSummary(agentName, sessionDetails = {}) {
  try {
    await logSessionSummary(agentName, 'create_start', sessionDetails, { hasDetails: Object.keys(sessionDetails).length > 0 });
    
    // Load memory with timeout
    const memory = await withTimeout(
      loadWorkingMemory,
      2000,
      'Load Working Memory'
    )(agentName) || {};
    
    const summary = {
      agentName,
      sessionEnd: new Date().toISOString(),
      tasksCompleted: memory.completedTasks || [],
      decisionsMode: memory.decisions?.length || 0,
      observationsMade: memory.observations?.length || 0,
      blockersEncountered: memory.blockers?.filter(b => b.status === 'active').length || 0,
      ...sessionDetails
    };
    
    await logSessionSummary(agentName, 'create_complete', summary, {
      taskCount: summary.tasksCompleted.length,
      decisionCount: summary.decisionsMode,
      observationCount: summary.observationsMade
    });
    
    // Fire and forget the persist operation - don't wait for it
    fireAndForget(
      async () => persistKeyFact(agentName, `Session Summary: ${JSON.stringify(summary)}`, {
        type: 'session-summary',
        sessionEnd: summary.sessionEnd
      }),
      'Persist Session Summary'
    )();
    
    return summary;
  } catch (error) {
    console.log(`⚡ Session summary creation failed: ${error.message}`);
    await logMemoryError(agentName, 'create_session_summary_failed', error, { sessionDetails });
    
    // Return minimal summary on error
    return {
      agentName,
      sessionEnd: new Date().toISOString(),
      error: error.message,
      ...sessionDetails
    };
  }
}

module.exports = {
  initializeWorkingMemory,
  loadWorkingMemory,
  updateWorkingMemory,
  retrieveRelevantMemories,
  storeMemorySnippetWithContext,
  archiveTaskMemory,
  checkContextSufficiency,
  getMemorySummary,
  clearWorkingMemory,
  performAgentMemoryHygiene,
  // Add the missing persist functions
  persistObservation,
  persistDecision,
  persistBlocker,
  persistBlockerResolution,
  persistTaskCompletion,
  persistKeyFact,
  saveToLongTermMemory,
  loadMemoryWithValidation,
  createSessionSummary,
  // Export configuration for backward compatibility
  MEMORY_DIR: MEMORY_CONFIG.BASE_DIR,
  MAX_OBSERVATIONS: MEMORY_CONFIG.MAX_OBSERVATIONS
};

// Command-line interface
if (require.main === module) {
  const command = process.argv[2];
  const agentName = process.argv[3];
  
  async function runCommand() {
    try {
      switch (command) {
        case 'checkContextSufficiency': {
          if (!agentName) {
            console.error('Error: Agent name is required');
            await closeConnections();
            process.exit(1);
          }
          
          // Parse required context from additional arguments
          const requiredContext = process.argv.slice(4);
          
          console.log(`Checking context sufficiency for agent: ${agentName}`);
          const result = await checkContextSufficiency(agentName, requiredContext);
          
          // Output result as JSON for parsing
          console.log(JSON.stringify(result, null, 2));
          
          // Exit with appropriate code
          await closeConnections();
          process.exit(result.sufficient ? 0 : 1);
          break;
        }
        
        case 'initializeWorkingMemory': {
          if (!agentName) {
            console.error('Error: Agent name is required');
            await closeConnections();
            process.exit(1);
          }
          
          console.log(`Initializing working memory for agent: ${agentName}`);
          const result = await initializeWorkingMemory(agentName);
          console.log(JSON.stringify(result, null, 2));
          await closeConnections();
          process.exit(0);
          break;
        }
        
        case 'getMemorySummary': {
          if (!agentName) {
            console.error('Error: Agent name is required');
            await closeConnections();
            process.exit(1);
          }
          
          console.log(`Getting memory summary for agent: ${agentName}`);
          const result = await getMemorySummary(agentName);
          console.log(JSON.stringify(result, null, 2));
          await closeConnections();
          process.exit(0);
          break;
        }
        
        case 'updateWorkingMemoryAndExit':
        case 'saveToLongTermMemoryAndExit':
          console.error(`Error: Command '${command}' is not available in agent-memory-manager.js`);
          console.error('These commands are only available in agent-memory-loader.js');
          console.error('Please use: node .bmad-core/utils/agent-memory-loader.js ' + command);
          await closeConnections();
          process.exit(1);
          break;
          
        default:
          console.error(`Error: Unknown command '${command}'`);
          console.error('Available commands: checkContextSufficiency, initializeWorkingMemory, getMemorySummary');
          console.error('Note: updateWorkingMemoryAndExit and saveToLongTermMemoryAndExit are only available in agent-memory-loader.js');
          await closeConnections();
          process.exit(1);
      }
    } catch (error) {
      console.error(`Command failed: ${error.message}`);
      console.error(error.stack);
      await closeConnections();
      process.exit(1);
    }
  }
  
  // Add timeout for the entire command execution
  const timeout = setTimeout(async () => {
    console.error('Command timed out after 10 seconds');
    await closeConnections();
    process.exit(1);
  }, 10000);
  
  runCommand().finally(() => {
    clearTimeout(timeout);
  });
}
==================== END: .bmad-core/utils/agent-memory-manager.js ====================

==================== START: .bmad-core/utils/agent-memory-persistence.js ====================
/**
 * Agent Memory Persistence - Handles saving observations and summaries after agent actions
 * Automatically persists both short-term working memory and long-term summaries
 */

// Import functions dynamically to avoid circular dependencies
const getMemoryManager = () => require('./agent-memory-manager');
const { storeContextualMemory, closeConnections } = require('./qdrant');

/**
 * Persist agent observation after a significant action
 * @param {string} agentName - The name of the agent
 * @param {string} observation - The observation to record
 * @param {Object} options - Additional options
 * @param {string} options.actionType - Type of action performed
 * @param {string} options.taskId - Current task ID
 * @param {boolean} options.isSignificant - Whether this should go to long-term memory
 * @param {Object} options.metadata - Additional metadata
 * @returns {Object} Persistence result
 */
async function persistObservation(agentName, observation, options = {}) {
  try {
    const { actionType, taskId, isSignificant = true, metadata = {} } = options;
    
    console.log(`Persisting observation for ${agentName}: ${observation.substring(0, 100)}...`);
    
    // Update working memory with observation
    const { updateWorkingMemory } = getMemoryManager();
    const workingMemory = await updateWorkingMemory(agentName, {
      observation,
      currentContext: {
        ...(taskId && { taskId })
      }
    });
    
    let longTermMemoryId = null;
    
    // Store in long-term memory if significant
    if (isSignificant && workingMemory.currentContext) {
      const enhancedObservation = `${actionType ? `[${actionType}] ` : ''}${observation}`;
      
      longTermMemoryId = await storeContextualMemory(
        agentName,
        enhancedObservation,
        {
          storyId: workingMemory.currentContext.storyId,
          epicId: workingMemory.currentContext.epicId,
          taskId: workingMemory.currentContext.taskId,
          type: 'observation',
          actionType,
          ...metadata
        }
      );
      
      console.log(`Stored observation in long-term memory with ID: ${longTermMemoryId}`);
    }
    
    return {
      success: true,
      workingMemoryUpdated: true,
      longTermMemoryId,
      observationCount: workingMemory.observations?.length || 0
    };
  } catch (error) {
    console.error(`Failed to persist observation for ${agentName}:`, error);
    return {
      success: false,
      error: error.message,
      workingMemoryUpdated: false,
      longTermMemoryId: null
    };
  }
}

/**
 * Persist agent decision with reasoning
 * @param {string} agentName - The name of the agent
 * @param {string} decision - The decision made
 * @param {string} reasoning - Reasoning behind the decision
 * @param {Object} options - Additional options
 * @returns {Object} Persistence result
 */
async function persistDecision(agentName, decision, reasoning, options = {}) {
  try {
    console.log(`Persisting decision for ${agentName}: ${decision}`);
    
    // Update working memory with decision
    const { updateWorkingMemory } = getMemoryManager();
    const workingMemory = await updateWorkingMemory(agentName, {
      decision,
      reasoning
    });
    
    // Store significant decisions in long-term memory
    const decisionText = `Decision: ${decision}\nReasoning: ${reasoning}`;
    const longTermMemoryId = await storeContextualMemory(
      agentName,
      decisionText,
      {
        storyId: workingMemory.currentContext?.storyId,
        epicId: workingMemory.currentContext?.epicId,
        taskId: workingMemory.currentContext?.taskId,
        type: 'decision',
        ...options
      }
    );
    
    return {
      success: true,
      workingMemoryUpdated: true,
      longTermMemoryId,
      decisionCount: workingMemory.decisions?.length || 0
    };
  } catch (error) {
    console.error(`Failed to persist decision for ${agentName}:`, error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Persist key fact or learning
 * @param {string} agentName - The name of the agent
 * @param {string} factKey - Key identifier for the fact
 * @param {string} factContent - Content of the fact
 * @param {Object} options - Additional options
 * @returns {Object} Persistence result
 */
async function persistKeyFact(agentName, factKey, factContent, options = {}) {
  try {
    console.log(`Persisting key fact for ${agentName}: ${factKey}`);
    
    // Update working memory with key fact
    const { updateWorkingMemory } = getMemoryManager();
    const workingMemory = await updateWorkingMemory(agentName, {
      keyFact: {
        key: factKey,
        content: factContent
      }
    });
    
    // Store in long-term memory
    const factText = `Key Fact [${factKey}]: ${factContent}`;
    const longTermMemoryId = await storeContextualMemory(
      agentName,
      factText,
      {
        storyId: workingMemory.currentContext?.storyId,
        epicId: workingMemory.currentContext?.epicId,
        taskId: workingMemory.currentContext?.taskId,
        type: 'key-fact',
        factKey,
        ...options
      }
    );
    
    return {
      success: true,
      workingMemoryUpdated: true,
      longTermMemoryId,
      keyFactCount: Object.keys(workingMemory.keyFacts || {}).length
    };
  } catch (error) {
    console.error(`Failed to persist key fact for ${agentName}:`, error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Persist task completion and archive to long-term memory
 * @param {string} agentName - The name of the agent
 * @param {string} taskId - Completed task ID
 * @param {Object} options - Additional options
 * @returns {Object} Persistence result
 */
async function persistTaskCompletion(agentName, taskId, options = {}) {
  try {
    console.log(`Persisting task completion for ${agentName}: ${taskId}`);
    
    // Update working memory with completed task
    const { updateWorkingMemory, archiveTaskMemory } = getMemoryManager();
    const workingMemory = await updateWorkingMemory(agentName, {
      completedTask: taskId
    });
    
    // Archive task memory to long-term storage
    const archiveSuccess = await archiveTaskMemory(agentName, taskId);
    
    // Create completion summary
    const completionText = `Task Completed: ${taskId}`;
    const longTermMemoryId = await storeContextualMemory(
      agentName,
      completionText,
      {
        storyId: workingMemory.currentContext?.storyId,
        epicId: workingMemory.currentContext?.epicId,
        taskId,
        type: 'task-completion',
        ...options
      }
    );
    
    return {
      success: true,
      workingMemoryUpdated: true,
      taskArchived: archiveSuccess,
      longTermMemoryId,
      completedTaskCount: workingMemory.completedTasks?.length || 0
    };
  } catch (error) {
    console.error(`Failed to persist task completion for ${agentName}:`, error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Persist blocker encountered during work
 * @param {string} agentName - The name of the agent
 * @param {string} blocker - Description of the blocker
 * @param {Object} options - Additional options
 * @returns {Object} Persistence result
 */
async function persistBlocker(agentName, blocker, options = {}) {
  try {
    console.log(`Persisting blocker for ${agentName}: ${blocker}`);
    
    // Update working memory with blocker
    const { updateWorkingMemory } = getMemoryManager();
    const workingMemory = await updateWorkingMemory(agentName, {
      blocker
    });
    
    // Store blocker in long-term memory for pattern analysis
    const blockerText = `BLOCKER: ${blocker}`;
    const longTermMemoryId = await storeContextualMemory(
      agentName,
      blockerText,
      {
        storyId: workingMemory.currentContext?.storyId,
        epicId: workingMemory.currentContext?.epicId,
        taskId: workingMemory.currentContext?.taskId,
        type: 'blocker',
        severity: options.severity || 'medium',
        ...options
      }
    );
    
    return {
      success: true,
      workingMemoryUpdated: true,
      longTermMemoryId,
      blockerCount: workingMemory.blockers?.filter(b => !b.resolved).length || 0
    };
  } catch (error) {
    console.error(`Failed to persist blocker for ${agentName}:`, error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Persist blocker resolution
 * @param {string} agentName - The name of the agent
 * @param {string} blockerDescription - Description of resolved blocker
 * @param {string} resolution - How it was resolved
 * @param {Object} options - Additional options
 * @returns {Object} Persistence result
 */
async function persistBlockerResolution(agentName, blockerDescription, resolution, options = {}) {
  try {
    console.log(`Persisting blocker resolution for ${agentName}: ${blockerDescription}`);
    
    // Update working memory to resolve the blocker
    const { updateWorkingMemory } = getMemoryManager();
    const workingMemory = await updateWorkingMemory(agentName, {
      resolveBlocker: blockerDescription,
      resolution
    });
    
    // Store resolution in long-term memory
    const resolutionText = `BLOCKER RESOLVED: ${blockerDescription}\nResolution: ${resolution}`;
    const longTermMemoryId = await storeContextualMemory(
      agentName,
      resolutionText,
      {
        storyId: workingMemory.currentContext?.storyId,
        epicId: workingMemory.currentContext?.epicId,
        taskId: workingMemory.currentContext?.taskId,
        type: 'blocker-resolution',
        ...options
      }
    );
    
    return {
      success: true,
      workingMemoryUpdated: true,
      longTermMemoryId,
      remainingBlockers: workingMemory.blockers?.filter(b => !b.resolved).length || 0
    };
  } catch (error) {
    console.error(`Failed to persist blocker resolution for ${agentName}:`, error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Create comprehensive session summary for archival
 * @param {string} agentName - The name of the agent
 * @param {Object} options - Summary options
 * @returns {Object} Session summary
 */
async function createSessionSummary(agentName, options = {}) {
  try {
    const { loadWorkingMemory } = getMemoryManager();
    const workingMemory = await loadWorkingMemory(agentName);
    if (!workingMemory) {
      return {
        success: false,
        error: 'No working memory found'
      };
    }
    
    const summary = {
      agentName,
      sessionId: workingMemory.sessionId,
      timespan: {
        started: workingMemory.initialized,
        ended: new Date().toISOString()
      },
      context: workingMemory.currentContext,
      statistics: {
        observationCount: workingMemory.observations?.length || 0,
        decisionCount: workingMemory.decisions?.length || 0,
        keyFactCount: Object.keys(workingMemory.keyFacts || {}).length,
        completedTaskCount: workingMemory.completedTasks?.length || 0,
        blockerCount: workingMemory.blockers?.length || 0,
        resolvedBlockerCount: workingMemory.blockers?.filter(b => b.resolved).length || 0
      },
      keyHighlights: {
        recentObservations: workingMemory.observations?.slice(-3) || [],
        importantDecisions: workingMemory.decisions?.slice(-3) || [],
        criticalFacts: Object.entries(workingMemory.keyFacts || {}).slice(-3),
        unresolvedBlockers: workingMemory.blockers?.filter(b => !b.resolved) || []
      },
      ...options
    };
    
    // Store session summary in long-term memory
    const summaryText = `Session Summary for ${agentName}: Completed ${summary.statistics.completedTaskCount} tasks, made ${summary.statistics.decisionCount} decisions, recorded ${summary.statistics.observationCount} observations`;
    
    const longTermMemoryId = await storeContextualMemory(
      agentName,
      summaryText,
      {
        storyId: workingMemory.currentContext?.storyId,
        epicId: workingMemory.currentContext?.epicId,
        type: 'session-summary',
        sessionId: workingMemory.sessionId,
        summary
      }
    );
    
    return {
      success: true,
      summary,
      longTermMemoryId
    };
  } catch (error) {
    console.error(`Failed to create session summary for ${agentName}:`, error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Batch persist multiple observations efficiently
 * @param {string} agentName - The name of the agent
 * @param {Array} observations - Array of observations to persist
 * @returns {Object} Batch persistence result
 */
async function batchPersistObservations(agentName, observations) {
  try {
    const results = [];
    
    for (const obs of observations) {
      const result = await persistObservation(
        agentName, 
        obs.observation, 
        {
          actionType: obs.actionType,
          isSignificant: obs.isSignificant !== false, // Default to true
          metadata: obs.metadata || {}
        }
      );
      results.push(result);
    }
    
    const successCount = results.filter(r => r.success).length;
    
    return {
      success: successCount === observations.length,
      successCount,
      totalCount: observations.length,
      results
    };
  } catch (error) {
    console.error(`Failed to batch persist observations for ${agentName}:`, error);
    return {
      success: false,
      error: error.message,
      successCount: 0,
      totalCount: observations.length
    };
  }
}

module.exports = {
  persistObservation,
  persistDecision,
  persistKeyFact,
  persistTaskCompletion,
  persistBlocker,
  persistBlockerResolution,
  createSessionSummary,
  batchPersistObservations
};

// Command line interface for subprocess execution
if (require.main === module) {
  async function closeConnections() {
    // Import the connection closer from memory config
    try {
      const { closeConnections } = require('./memory-config');
      await closeConnections();
    } catch (error) {
      console.error('Warning: Could not close connections:', error.message);
    }
  }

  async function runCommand() {
    const args = process.argv.slice(2);
    const command = args[0];
    
    if (!command) {
      console.error('Error: Command is required');
      console.error('Available commands: persistObservation, persistDecision, persistKeyFact, persistTaskCompletion, persistBlocker, persistBlockerResolution, createSessionSummary');
      console.error('Note: This file does not support updateWorkingMemoryAndExit or saveToLongTermMemoryAndExit commands.');
      console.error('Use agent-memory-loader.js for those commands instead.');
      await closeConnections();
      process.exit(1);
    }

    try {
      switch (command) {
        case 'updateWorkingMemoryAndExit':
        case 'saveToLongTermMemoryAndExit':
          console.error(`Error: Command '${command}' is not available in agent-memory-persistence.js`);
          console.error('These commands are only available in agent-memory-loader.js');
          console.error('Please use: node .bmad-core/utils/agent-memory-loader.js ' + command);
          await closeConnections();
          process.exit(1);
          break;
          
        default:
          console.error(`Error: Unknown command '${command}'`);
          console.error('Available commands: persistObservation, persistDecision, persistKeyFact, persistTaskCompletion, persistBlocker, persistBlockerResolution, createSessionSummary');
          console.error('Note: updateWorkingMemoryAndExit and saveToLongTermMemoryAndExit are only available in agent-memory-loader.js');
          await closeConnections();
          process.exit(1);
      }
    } catch (error) {
      console.error(`Command failed: ${error.message}`);
      console.error(error.stack);
      await closeConnections();
      process.exit(1);
    }
  }
  
  // Add timeout for the entire command execution
  const timeout = setTimeout(async () => {
    console.error('Command timed out after 10 seconds');
    await closeConnections();
    process.exit(1);
  }, 10000);
  
  runCommand().finally(() => {
    clearTimeout(timeout);
  });
}
==================== END: .bmad-core/utils/agent-memory-persistence.js ====================

==================== START: .bmad-core/utils/memory-usage-logger.js ====================
/**
 * Memory Usage Logger
 * 
 * Utility for logging all memory operations across BMad agents to provide
 * visibility into memory usage patterns and operations.
 * 
 * Logs all memory activities to .ai/memory-usage.log for monitoring and debugging.
 */

const fs = require('fs').promises;
const path = require('path');

// Conditional import to avoid circular dependency
let closeConnections = null;
try {
    const qdrant = require('./qdrant');
    closeConnections = qdrant.closeConnections;
} catch (e) {
    // Handle circular dependency gracefully
    closeConnections = async () => {
        // No-op if qdrant module is not available
    };
}

/**
 * Ensures the .ai directory exists
 */
async function ensureAiDirectory() {
    const aiDir = path.join(process.cwd(), '.ai');
    try {
        await fs.access(aiDir);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await fs.mkdir(aiDir, { recursive: true });
        } else {
            throw error;
        }
    }
}

/**
 * Formats a log entry with timestamp and structured data
 */
function formatLogEntry(logData) {
    const timestamp = new Date().toISOString();
    const logEntry = {
        timestamp,
        ...logData
    };
    return JSON.stringify(logEntry) + '\n';
}

/**
 * Writes a log entry to the memory usage log file
 */
async function writeLogEntry(logData) {
    try {
        await ensureAiDirectory();
        const logPath = path.join(process.cwd(), '.ai', 'memory-usage.log');
        const logEntry = formatLogEntry(logData);
        await fs.appendFile(logPath, logEntry);
    } catch (error) {
        // Log to console if file logging fails, but don't throw
        console.warn('Memory usage logging failed:', error.message);
        // Don't throw to avoid disrupting the main operation
        // The memory operation itself is more important than logging
    }
}

/**
 * Logs memory initialization operations
 */
async function logMemoryInit(agentName, operation, details = {}) {
    await writeLogEntry({
        type: 'memory_init',
        agent: agentName,
        operation,
        details,
        level: 'info'
    });
}

/**
 * Logs working memory operations
 */
async function logWorkingMemory(agentName, operation, memoryType, data, details = {}) {
    await writeLogEntry({
        type: 'working_memory',
        agent: agentName,
        operation,
        memoryType,
        dataSize: typeof data === 'string' ? data.length : JSON.stringify(data).length,
        details,
        level: 'info'
    });
}

/**
 * Logs long-term memory operations
 */
async function logLongTermMemory(agentName, operation, memoryContent, details = {}) {
    await writeLogEntry({
        type: 'long_term_memory',
        agent: agentName,
        operation,
        memoryType: memoryContent?.memoryType || 'unknown',
        importance: memoryContent?.metadata?.importance || 'medium',
        tags: memoryContent?.metadata?.tags || [],
        contentSize: JSON.stringify(memoryContent).length,
        details,
        level: 'info'
    });
}

/**
 * Logs memory retrieval operations
 */
async function logMemoryRetrieval(agentName, operation, query, resultsCount, details = {}) {
    await writeLogEntry({
        type: 'memory_retrieval',
        agent: agentName,
        operation,
        query,
        resultsCount,
        details,
        level: 'info'
    });
}

/**
 * Logs memory context validation operations
 */
async function logContextValidation(agentName, operation, contextType, isValid, details = {}) {
    await writeLogEntry({
        type: 'context_validation',
        agent: agentName,
        operation,
        contextType,
        isValid,
        details,
        level: 'info'
    });
}

/**
 * Logs memory operation errors
 */
async function logMemoryError(agentName, operation, error, details = {}) {
    await writeLogEntry({
        type: 'memory_error',
        agent: agentName,
        operation,
        error: error.message || error,
        stack: error.stack,
        details,
        level: 'error'
    });
}

/**
 * Logs session summary operations
 */
async function logSessionSummary(agentName, operation, summaryData, details = {}) {
    await writeLogEntry({
        type: 'session_summary',
        agent: agentName,
        operation,
        summaryItems: Array.isArray(summaryData) ? summaryData.length : 1,
        details,
        level: 'info'
    });
}

/**
 * Logs task-specific memory operations
 */
async function logTaskMemory(agentName, taskName, operation, taskData, details = {}) {
    await writeLogEntry({
        type: 'task_memory',
        agent: agentName,
        taskName,
        operation,
        taskId: taskData?.taskId || 'unknown',
        storyId: taskData?.storyId || 'unknown',
        details,
        level: 'info'
    });
}

/**
 * Logs agent handoff memory operations (for orchestrated workflows)
 */
async function logHandoffMemory(fromAgent, toAgent, operation, contextData, details = {}) {
    await writeLogEntry({
        type: 'handoff_memory',
        fromAgent,
        toAgent,
        operation,
        contextSize: JSON.stringify(contextData).length,
        details,
        level: 'info'
    });
}

/**
 * Gets recent memory usage statistics from the log
 */
async function getMemoryUsageStats(hoursBack = 24) {
    try {
        const logPath = path.join(process.cwd(), '.ai', 'memory-usage.log');
        const logContent = await fs.readFile(logPath, 'utf8');
        const lines = logContent.trim().split('\n').filter(line => line.trim());
        
        const cutoffTime = new Date(Date.now() - (hoursBack * 60 * 60 * 1000));
        const recentEntries = lines
            .map(line => {
                try {
                    return JSON.parse(line);
                } catch {
                    return null;
                }
            })
            .filter(entry => entry && new Date(entry.timestamp) > cutoffTime);

        const stats = {
            totalOperations: recentEntries.length,
            byAgent: {},
            byType: {},
            byLevel: { info: 0, error: 0, warn: 0 },
            errors: recentEntries.filter(e => e.level === 'error'),
            timeRange: {
                from: cutoffTime.toISOString(),
                to: new Date().toISOString()
            }
        };

        recentEntries.forEach(entry => {
            // Count by agent
            stats.byAgent[entry.agent] = (stats.byAgent[entry.agent] || 0) + 1;
            
            // Count by type
            stats.byType[entry.type] = (stats.byType[entry.type] || 0) + 1;
            
            // Count by level
            stats.byLevel[entry.level] = (stats.byLevel[entry.level] || 0) + 1;
        });

        return stats;
    } catch (error) {
        return {
            error: 'Could not read memory usage log',
            message: error.message
        };
    }
}

/**
 * Clears old log entries (keeps last N days)
 */
async function cleanupOldLogs(daysToKeep = 7) {
    try {
        const logPath = path.join(process.cwd(), '.ai', 'memory-usage.log');
        const logContent = await fs.readFile(logPath, 'utf8');
        const lines = logContent.trim().split('\n').filter(line => line.trim());
        
        const cutoffTime = new Date(Date.now() - (daysToKeep * 24 * 60 * 60 * 1000));
        const recentEntries = lines
            .map(line => {
                try {
                    const entry = JSON.parse(line);
                    return new Date(entry.timestamp) > cutoffTime ? line : null;
                } catch {
                    return null;
                }
            })
            .filter(line => line !== null);

        await fs.writeFile(logPath, recentEntries.join('\n') + '\n');
        
        await writeLogEntry({
            type: 'log_cleanup',
            agent: 'system',
            operation: 'cleanup_old_logs',
            entriesKept: recentEntries.length,
            entriesRemoved: lines.length - recentEntries.length,
            daysToKeep,
            level: 'info'
        });
    } catch (error) {
        console.warn('Log cleanup failed:', error.message);
    }
}

module.exports = {
    logMemoryInit,
    logWorkingMemory,
    logLongTermMemory,
    logMemoryRetrieval,
    logContextValidation,
    logMemoryError,
    logSessionSummary,
    logTaskMemory,
    logHandoffMemory,
    getMemoryUsageStats,
    cleanupOldLogs
};

// Command-line interface
if (require.main === module) {
    const command = process.argv[2];
    const agent = process.argv[3];
    const args = process.argv.slice(4);
    
    async function runCommand() {
        try {
            switch (command) {
                case 'logMemoryInit':
                    // Handle --data flag properly
                    let initData = {};
                    const dataIndex = args.indexOf('--data');
                    if (dataIndex !== -1 && args[dataIndex + 1]) {
                        try {
                            initData = JSON.parse(args[dataIndex + 1]);
                        } catch (e) {
                            console.error('Invalid JSON in --data argument:', args[dataIndex + 1]);
                            throw new Error(`Invalid JSON in --data argument`);
                        }
                    } else if (args[1] && !args[1].startsWith('--')) {
                        try {
                            initData = JSON.parse(args[1]);
                        } catch (e) {
                            // If not JSON, treat as empty object
                            initData = {};
                        }
                    }
                    await logMemoryInit(agent, args[0] || 'cli_init', initData);
                    console.log('Memory init logged');
                    break;
                    
                case 'logWorkingMemory':
                    await logWorkingMemory(
                        agent, 
                        args[0] || 'cli_update', 
                        args[1] || 'general', 
                        args[2] || '{}', 
                        args[3] ? JSON.parse(args[3]) : {}
                    );
                    console.log('Working memory logged');
                    break;
                    
                case 'logLongTermMemory':
                    await logLongTermMemory(agent, args[0] || 'cli_save', args[1] ? JSON.parse(args[1]) : {}, args[2] ? JSON.parse(args[2]) : {});
                    console.log('Long-term memory logged');
                    break;
                    
                case 'logMemoryRetrieval':
                    await logMemoryRetrieval(
                        agent, 
                        args[0] || 'cli_retrieve', 
                        args[1] || 'unknown_query', 
                        parseInt(args[2]) || 0, 
                        args[3] ? JSON.parse(args[3]) : {}
                    );
                    console.log('Memory retrieval logged');
                    break;
                    
                case 'logContextValidation':
                    await logContextValidation(
                        agent, 
                        args[0] || 'cli_validate', 
                        args[1] || 'unknown_context', 
                        args[2] === 'true' || args[2] === true, 
                        args[3] ? JSON.parse(args[3]) : {}
                    );
                    console.log('Context validation logged');
                    break;
                    
                default:
                    console.error(`Unknown command: ${command}`);
                    console.error('Available commands: logMemoryInit, logWorkingMemory, logLongTermMemory, logMemoryRetrieval, logContextValidation');
                    await closeConnections();
                    process.exit(1);
            }
            await closeConnections();
            process.exit(0);
        } catch (error) {
            console.error(`Command failed: ${error.message}`);
            await closeConnections();
            process.exit(1);
        }
    }
    
    runCommand();
}
==================== END: .bmad-core/utils/memory-usage-logger.js ====================

==================== START: .bmad-core/utils/qdrant.js ====================
const { QdrantClient } = require('@qdrant/js-client-rest');
const { MEMORY_CONFIG, validateAgentName, validateTextContent, sanitizeTextContent } = require('./memory-config');

// Lazy import to avoid circular dependency
let logLongTermMemory = null;
function getLogLongTermMemory() {
    if (!logLongTermMemory) {
        try {
            const memoryLogger = require('./memory-usage-logger');
            logLongTermMemory = memoryLogger.logLongTermMemory;
        } catch (e) {
            // Fallback to no-op if circular dependency issues
            logLongTermMemory = async () => {};
        }
    }
    return logLongTermMemory;
}

// Use centralized connection manager
const connectionManager = require('./connection-manager');

function getQdrantClient() {
  return connectionManager.getQdrantConnection('default', {
    host: MEMORY_CONFIG.QDRANT_HOST,
    port: MEMORY_CONFIG.QDRANT_PORT,
    timeout: 5000
  });
}

// Connection health tracking
let qdrantHealthy = null; // null = unknown, true = healthy, false = unhealthy
let lastHealthCheck = null;
const HEALTH_CHECK_INTERVAL = MEMORY_CONFIG.QDRANT_HEALTH_CHECK_INTERVAL;

// Fallback memory storage when Qdrant is unavailable
const fallbackMemory = new Map();
let fallbackCounter = 0;

// OpenAI configuration - only initialized if API key is present
let openai = null;
if (process.env.OPENAI_API_KEY) {
  try {
    const { Configuration, OpenAIApi } = require('openai');
    const openAIConfig = new Configuration({
      apiKey: process.env.OPENAI_API_KEY
    });
    openai = new OpenAIApi(openAIConfig);
  } catch (error) {
    // OpenAI package not installed, will use fallback
    console.warn('OpenAI package not installed. Using hash-based embeddings.');
  }
}

const COLLECTION_NAME = MEMORY_CONFIG.QDRANT_COLLECTION;
const VECTOR_SIZE = MEMORY_CONFIG.QDRANT_VECTOR_SIZE;

/**
 * Get collection point count
 * @returns {number} Number of points in collection, or 0 if error
 */
async function getCollectionPointCount() {
  try {
    const isHealthy = await checkQdrantHealth();
    if (!isHealthy) return 0;
    
    const info = await getQdrantClient().getCollection(COLLECTION_NAME);
    return info.points_count || 0;
  } catch (error) {
    return 0;
  }
}

/**
 * Check Qdrant connection health
 * @returns {boolean} True if healthy, false otherwise
 */
async function checkQdrantHealth() {
  const now = Date.now();
  
  // Use cached result if recent
  if (lastHealthCheck && (now - lastHealthCheck) < HEALTH_CHECK_INTERVAL && qdrantHealthy !== null) {
    return qdrantHealthy;
  }
  
  // Use connection manager's health check
  const healthy = await connectionManager.checkConnectionHealth('qdrant_default');
  qdrantHealthy = healthy;
  lastHealthCheck = now;
  
  if (!healthy && process.env.NODE_ENV !== 'test') {
    console.warn('📝 Falling back to in-memory storage');
  }
  
  return healthy;
}

async function ensureCollection() {
  try {
    const isHealthy = await checkQdrantHealth();
    if (!isHealthy) {
      return false; // Skip collection creation if Qdrant is down
    }
    
    const collections = await getQdrantClient().getCollections();
    const exists = collections.collections.some(c => c.name === COLLECTION_NAME);
    
    if (!exists) {
      await getQdrantClient().createCollection(COLLECTION_NAME, {
        vectors: {
          size: VECTOR_SIZE,
          distance: 'Cosine'
        }
      });
    }
    return true;
  } catch (error) {
    console.warn('Qdrant collection initialization failed:', error.message);
    qdrantHealthy = false;
    return false;
  }
}

/**
 * Generate a semantic embedding for the given text using OpenAI's API.
 * Falls back to a hash-based embedding if no API key is provided.
 * @param {string} text - The text to embed
 * @param {boolean} returnMetadata - If true, returns {embedding, method} instead of just embedding
 * @returns {Array<number>|{embedding: Array<number>, method: string}} The embedding or embedding with metadata
 */
async function generateEmbedding(text, returnMetadata = false) {
  let method = 'hash';
  let embedding;
  
  if (openai && process.env.OPENAI_API_KEY) {
    try {
      const response = await openai.createEmbedding({
        model: 'text-embedding-ada-002',
        input: text
      });
      embedding = response.data.data[0].embedding;
      method = 'openai';
    } catch (error) {
      console.warn('OpenAI embedding failed, using fallback:', error.message);
    }
  }
  
  // Fallback to deterministic hash if no API key is set or OpenAI fails
  if (!embedding) {
    const hash = require('crypto').createHash('sha256').update(text).digest();
    embedding = [];
    for (let i = 0; i < VECTOR_SIZE; i++) {
      embedding.push((hash[i % hash.length] - 128) / 128);
    }
  }
  
  return returnMetadata ? { embedding, method } : embedding;
}

async function storeMemorySnippet(agentName, text, metadata = {}) {
  try {
    // Validate inputs
    validateAgentName(agentName);
    validateTextContent(text, 'memory snippet text');
    
    // Run validation hooks
    const validationHooks = require('./validation-hooks');
    const validation = await validationHooks.executeHooks('beforeMemorySave', {
      agentName,
      text,
      metadata
    });
    
    if (!validation.valid) {
      const errorMessage = validation.errors.map(e => e.message).join('; ');
      throw new Error(`Memory validation failed: ${errorMessage}`);
    }
    
    // Sanitize text content
    const sanitizedText = sanitizeTextContent(text);
    
    const collectionReady = await ensureCollection();
    const id = Date.now();
    
    if (collectionReady && qdrantHealthy) {
      // Store in Qdrant if available
      const { embedding, method } = await generateEmbedding(sanitizedText, true);
      
      await getQdrantClient().upsert(COLLECTION_NAME, {
        wait: true,
        points: [
          {
            id,
            vector: embedding,
            payload: {
              agentName,
              text: sanitizedText,
              originalLength: text.length,
              timestamp: new Date().toISOString(),
              embeddingMethod: method,
              ...metadata
            }
          }
        ]
      });
      
      // Log successful Qdrant storage
      await getLogLongTermMemory()(agentName, 'store', {
        memoryType: 'snippet',
        metadata: { method, ...metadata }
      }, { storageType: 'qdrant', id });
      
      return id;
    } else {
      // Fallback to in-memory storage
      const fallbackId = `fallback_${++fallbackCounter}`;
      const payload = {
        agentName,
        text: sanitizedText,
        originalLength: text.length,
        timestamp: new Date().toISOString(),
        embeddingMethod: 'fallback',
        isFallback: true,
        ...metadata
      };
      
      fallbackMemory.set(fallbackId, payload);
      
      // Log fallback storage
      await getLogLongTermMemory()(agentName, 'store', {
        memoryType: 'snippet',
        metadata
      }, { storageType: 'fallback', id: fallbackId });
      
      if (process.env.NODE_ENV !== 'test') {
        console.warn(`📝 Stored memory snippet in fallback storage: ${fallbackId}`);
      }
      
      return fallbackId;
    }
  } catch (error) {
    // Final fallback - store in memory even if everything else fails
    const fallbackId = `emergency_${++fallbackCounter}`;
    const payload = {
      agentName,
      text: sanitizedText,
      originalLength: text.length,
      timestamp: new Date().toISOString(),
      embeddingMethod: 'emergency-fallback',
      isFallback: true,
      error: error.message,
      ...metadata
    };
    
    fallbackMemory.set(fallbackId, payload);
    console.error('Failed to store memory snippet, using emergency fallback:', error.message);
    return fallbackId;
  }
}

async function retrieveMemory(query, topN = 5, filters = {}) {
  try {
    const collectionReady = await ensureCollection();
    
    if (collectionReady && qdrantHealthy) {
      // Retrieve from Qdrant if available
      const queryVector = await generateEmbedding(query);
      
      // Build filter conditions for Qdrant
      const filterConditions = [];
      
      if (filters.agentName) {
        filterConditions.push({
          key: 'agentName',
          match: { value: filters.agentName }
        });
      }
      
      if (filters.storyId) {
        filterConditions.push({
          key: 'storyId',
          match: { value: filters.storyId }
        });
      }
      
      if (filters.epicId) {
        filterConditions.push({
          key: 'epicId',
          match: { value: filters.epicId }
        });
      }
      
      if (filters.type) {
        filterConditions.push({
          key: 'type',
          match: { value: filters.type }
        });
      }
      
      if (filters.taskId) {
        filterConditions.push({
          key: 'taskId',
          match: { value: filters.taskId }
        });
      }
      
      const searchParams = {
        vector: queryVector,
        limit: topN,
        with_payload: true
      };
      
      // Add filters if any exist
      if (filterConditions.length > 0) {
        searchParams.filter = {
          must: filterConditions
        };
      }
      
      const searchResult = await getQdrantClient().search(COLLECTION_NAME, searchParams);
      
      return searchResult.map(result => ({
        score: result.score,
        ...result.payload
      }));
    } else {
      // Fallback to in-memory search
      const results = [];
      const queryLower = query.toLowerCase();
      
      for (const [id, payload] of fallbackMemory.entries()) {
        // Simple text-based matching for fallback
        let matches = true;
        
        // Apply filters
        if (filters.agentName && payload.agentName !== filters.agentName) matches = false;
        if (filters.storyId && payload.storyId !== filters.storyId) matches = false;
        if (filters.epicId && payload.epicId !== filters.epicId) matches = false;
        if (filters.type && payload.type !== filters.type) matches = false;
        if (filters.taskId && payload.taskId !== filters.taskId) matches = false;
        
        if (matches && payload.text && payload.text.toLowerCase().includes(queryLower)) {
          results.push({
            score: 0.5, // Default fallback score
            id,
            ...payload
          });
        }
      }
      
      // Sort by timestamp (newest first) and limit results
      results.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
      
      if (process.env.NODE_ENV !== 'test') {
        console.warn(`📝 Retrieved ${results.slice(0, topN).length} memories from fallback storage`);
      }
      
      return results.slice(0, topN);
    }
  } catch (error) {
    // Emergency fallback - return empty array with warning
    console.error('Failed to retrieve memory, returning empty results:', error.message);
    return [];
  }
}

/**
 * Retrieve memories for a specific agent and story context
 * @param {string} agentName - Name of the agent
 * @param {string} query - Search query
 * @param {string} storyId - Story ID to filter by
 * @param {number} topN - Number of results to return
 * @returns {Array} Array of relevant memories
 */
async function retrieveAgentStoryMemory(agentName, query, storyId, topN = 5) {
  return await retrieveMemory(query, topN, {
    agentName,
    storyId
  });
}

/**
 * Retrieve memories for a specific agent and epic context
 * @param {string} agentName - Name of the agent
 * @param {string} query - Search query
 * @param {string} epicId - Epic ID to filter by
 * @param {number} topN - Number of results to return
 * @returns {Array} Array of relevant memories
 */
async function retrieveAgentEpicMemory(agentName, query, epicId, topN = 5) {
  return await retrieveMemory(query, topN, {
    agentName,
    epicId
  });
}

/**
 * Retrieve task-specific memories for an agent
 * @param {string} agentName - Name of the agent
 * @param {string} taskId - Task ID to filter by
 * @param {number} topN - Number of results to return
 * @returns {Array} Array of task memories
 */
async function retrieveTaskMemory(agentName, taskId, topN = 10) {
  return await retrieveMemory(`task ${taskId}`, topN, {
    agentName,
    taskId,
    type: 'task-archive'
  });
}

/**
 * Store memory with enhanced context metadata
 * @param {string} agentName - Name of the agent
 * @param {string} text - Text content to store
 * @param {Object} context - Context metadata
 * @param {string} context.storyId - Story ID
 * @param {string} context.epicId - Epic ID
 * @param {string} context.taskId - Task ID
 * @param {string} context.type - Memory type
 * @returns {string} Memory ID
 */
async function storeContextualMemory(agentName, text, context = {}) {
  // Validation is handled in storeMemorySnippet
  const metadata = {
    agent: agentName,
    storyId: context.storyId || null,
    epicId: context.epicId || null,
    taskId: context.taskId || null,
    type: context.type || 'observation',
    timestamp: new Date().toISOString(),
    ...context
  };
  
  return await storeMemorySnippet(agentName, text, metadata);
}

/**
 * Close Qdrant connection and cleanup resources
 * Call this when done with memory operations to allow process to exit
 */
async function closeConnections() {
  try {
    // Clear any intervals first
    connectionManager.clearIntervals();
    
    // Use connection manager to close connections
    await connectionManager.closeConnection('qdrant_default');
    
    // For subprocess commands that need quick exit, force shutdown
    if (process.argv.some(arg => arg.includes('AndExit'))) {
      await connectionManager.shutdown();
    }
    
    // Reset health check state
    qdrantHealthy = null;
    lastHealthCheck = null;
    
    // Clear any pending operations
    if (global.gc) {
      global.gc();
    }
    
    console.log('Memory connections closed');
  } catch (error) {
    console.error('Error closing connections:', error.message);
  }
}

module.exports = {
  getQdrantClient,
  storeMemorySnippet,
  retrieveMemory,
  retrieveAgentStoryMemory,
  retrieveAgentEpicMemory,
  retrieveTaskMemory,
  storeContextualMemory,
  checkQdrantHealth,
  getCollectionPointCount,
  closeConnections,
  // Expose fallback memory for diagnostics (read-only)
  getFallbackMemoryStatus: () => ({
    isHealthy: qdrantHealthy,
    lastCheck: lastHealthCheck,
    fallbackEntries: fallbackMemory.size,
    mode: qdrantHealthy ? 'qdrant' : 'fallback'
  })
};
==================== END: .bmad-core/utils/qdrant.js ====================
