id: query-technical-docs
name: Query Technical Documentation
purpose: Query Qdrant for latest technical documentation relevant to current task
inputs:
  query:
    type: string
    description: The technical query or question
    required: true
  technology:
    type: string
    description: Specific technology to focus on (optional)
    default: ""
  limit:
    type: number
    description: Maximum number of results to return
    default: 5
outputs:
  documentation:
    type: array
    description: Relevant documentation snippets with sources
steps:
  - id: enhance-query
    name: Enhance Query with Context
    description: Enhance the query with current project context
    actions:
      - description: Add project-specific context to the query
        action: |
          # This would enhance the query based on:
          # - Current story/task context
          # - Known technology stack
          # - Previous similar queries
          enhanced_query="{{inputs.query}} {{inputs.technology}}"
        elicit: false
  
  - id: search-qdrant
    name: Search Qdrant Collections
    description: Query configured Qdrant collections for relevant docs
    actions:
      - description: Search documentation collections based on query
        action: |
          node -e "
          const { searchDocumentation } = require('{root}/utils/qdrant-docs-search.js');
          
          async function searchDocs() {
            try {
              const results = await searchDocumentation('{{inputs.query}}', {
                technology: '{{inputs.technology}}',
                limit: {{inputs.limit}}
              });
              
              if (results.results.length > 0) {
                console.log('Found documentation in collections:', results.collectionsSearched.map(c => c.name).join(', '));
                console.log('\\nTop results:');
                results.results.forEach((result, i) => {
                  console.log(\`\\n\${i+1}. [\${result.collection}] Score: \${result.relevance_score.toFixed(3)}\`);
                  console.log(\`   \${result.payload?.title || result.payload?.content?.substring(0, 100) || 'No preview available'}\`);
                });
              } else {
                console.log(results.message);
              }
              
              // Output full results as JSON for parsing
              console.log('\\n---JSON_OUTPUT---');
              console.log(JSON.stringify(results, null, 2));
            } catch (error) {
              console.error('Error searching documentation:', error.message);
            }
          }
          
          searchDocs();
          "
        elicit: true
  
  - id: format-results
    name: Format Documentation Results
    description: Format the retrieved documentation for agent use
    actions:
      - description: Format documentation with proper context and sources
        action: |
          echo "Formatting documentation results..."
          echo "Each result should include:"
          echo "- Content snippet"
          echo "- Source URL"
          echo "- Technology/Framework"
          echo "- Last updated date"
          echo "- Relevance score"
        elicit: true
  
  - id: cache-results
    name: Cache Results
    description: Cache frequently accessed documentation
    actions:
      - description: Store results in agent's working memory for quick access
        action: |
          # Cache the results in working memory
          # This helps avoid repeated Qdrant queries for same information
          echo "Caching documentation results in working memory..."
        elicit: false

metadata:
  agent: all  # Any agent can use this
  priority: high
  estimated_hours: 0.1
  tags:
    - documentation
    - qdrant
    - query
    - knowledge-base