id: generate-ai-frontend-prompt
name: Create AI Frontend Prompt Task
purpose: To generate a masterful, comprehensive, and optimized prompt that can be used with any AI-driven frontend development tool (e.g., Vercel v0, Lovable.ai, or similar) to scaffold or generate significant portions of a frontend application.
steps:
  - id: load-memory
    name: Load Memory and Initialize Context
    description: Load agent working memory and relevant long-term context using unified memory system
    actions:
      - description: Load agent working memory and relevant long-term context (use loadMemoryForTaskAndExit from agent-memory-loader.js if running in a subprocess)
        elicit: false
        function: loadMemoryForTask
        parameters:
          agentName: architect
          context:
            taskId: generate-ai-frontend-prompt
            taskType: content-creation
        metadata:
          memoryAction: true
          executionOrder: first
      - description: Apply memory context to task execution planning
        elicit: true
        metadata:
          memoryAction: true
          executionOrder: after-load
  - id: step0
    name: Initialize Memory and Context
    description: Setup working memory for prompt generation
    actions:
      - description: Initialize working memory for frontend prompt generation
        elicit: true
        metadata:
          originalIndent: 0
      - description: Retrieve relevant frontend patterns from memory
        elicit: false
        metadata:
          originalIndent: 0
  - id: step1
    name: Core Prompting Principles
    description: Before generating the prompt, you must understand these core principles for interacting with a generative AI for code.
    actions:
      - description: '**Be Explicit and Detailed**: The AI cannot read your mind. Provide as much detail and context as possible. Vague requests lead to generic or incorrect outputs.'
        elicit: true
        metadata:
          originalIndent: 0
      - description: '**Iterate, Don''t Expect Perfection**: Generating an entire complex application in one go is rare. The most effective method is to prompt for one component or one section at a time, then build upon the results.'
        elicit: true
        metadata:
          originalIndent: 0
      - description: '**Provide Context First**: Always start by providing the AI with the necessary context, such as the tech stack, existing code snippets, and overall project goals.'
        elicit: true
        metadata:
          originalIndent: 0
      - description: '**Mobile-First Approach**: Frame all UI generation requests with a mobile-first design mindset. Describe the mobile layout first, then provide separate instructions for how it should adapt for tablet and desktop.'
        elicit: true
        metadata:
          originalIndent: 0
    metadata:
      level: 3
      originalNumber: '1'
  - id: step2
    name: The Structured Prompting Framework
    description: |-
      To ensure the highest quality output, you MUST structure every prompt using the following four-part framework.
      1. **High-Level Goal**: Start with a clear, concise summary of the overall objective. This orients the AI on the primary task.
      2. **Detailed, Step-by-Step Instructions**: Provide a granular, numbered list of actions the AI should take. Break down complex tasks into smaller, sequential steps. This is the most critical part of the prompt.
      3. **Code Examples, Data Structures & Constraints**: Include any relevant snippets of existing code, data structures, or API contracts. This gives the AI concrete examples to work with. Crucially, you must also state what _not_ to do.
      4. **Define a Strict Scope**: Explicitly define the boundaries of the task. Tell the AI which files it can modify and, more importantly, which files to leave untouched to prevent unintended changes across the codebase.
    actions:
      - description: '_Example: "Create a responsive user registration form with client-side validation and API integration."_'
        elicit: false
        metadata:
          originalIndent: 3
      - description: '_Example: "1. Create a new file named `RegistrationForm.js`. 2. Use React hooks for state management. 3. Add styled input fields for ''Name'', ''Email'', and ''Password''. 4. For the email field, ensure it is a valid email format. 5. On submission, call the API endpoint defined below."_'
        elicit: true
        metadata:
          originalIndent: 3
      - description: '_Example: "Use this API endpoint: `POST /api/register`. The expected JSON payload is `{ "name": "string", "email": "string", "password": "string" }`. Do NOT include a ''confirm password'' field. Use Tailwind CSS for all styling."_'
        elicit: true
        metadata:
          originalIndent: 3
      - description: '_Example: "You should only create the `RegistrationForm.js` component and add it to the `pages/register.js` file. Do NOT alter the `Navbar.js` component or any other existing page or component."_'
        elicit: false
        metadata:
          originalIndent: 3
    notes: '2. **Detailed, Step-by-Step Instructions**: Provide a granular, numbered list of actions the AI should take. Break down complex tasks into smaller, sequential steps. This is the most critical part of the prompt.'
    metadata:
      level: 3
      originalNumber: '2'
  - id: step3
    name: Assembling the Master Prompt
    description: |-
      You will now synthesize the inputs and the above principles into a final, comprehensive prompt.
      1. **Gather Foundational Context**:
      2. **Describe the Visuals**:
      3. **Build the Prompt using the Structured Framework**:
      4. **Present and Refine**:
    actions:
      - description: Start the prompt with a preamble describing the overall project purpose, the full tech stack (e.g., Next.js, TypeScript, Tailwind CSS), and the primary UI component library being used.
        elicit: true
        metadata:
          originalIndent: 3
      - description: If the user has design files (Figma, etc.), instruct them to provide links or screenshots.
        elicit: true
        metadata:
          originalIndent: 3
      - description: 'If not, describe the visual style: color palette, typography, spacing, and overall aesthetic (e.g., "minimalist", "corporate", "playful").'
        elicit: false
        metadata:
          originalIndent: 3
      - description: Follow the four-part framework from Section 2 to build out the core request, whether it's for a single component or a full page.
        elicit: false
        metadata:
          originalIndent: 3
      - description: Output the complete, generated prompt in a clear, copy-pasteable format (e.g., a large code block).
        elicit: true
        metadata:
          originalIndent: 3
      - description: Explain the structure of the prompt and why certain information was included, referencing the principles above.
        elicit: true
        metadata:
          originalIndent: 3
      - description: <important_note>Conclude by reminding the user that all AI-generated code will require careful human review, testing, and refinement to be considered production-ready.</important_note>
        elicit: false
        metadata:
          originalIndent: 3
    metadata:
      level: 3
      originalNumber: '3'
  - id: save-memory
    name: Save Task Results and Clean Memory
    description: Save task completion and findings to memory with hygiene cleanup
    actions:
      - description: Save task completion and findings to working memory (use saveAndCleanMemoryAndExit from agent-memory-loader.js if running in a subprocess)
        elicit: true
        function: saveAndCleanMemory
        parameters:
          agentName: architect
          taskData:
            observation: Completed generate-ai-frontend-prompt task successfully
            significantFinding: '{{TASK_SIGNIFICANT_FINDING}}'
            taskCompleted: true
            taskId: generate-ai-frontend-prompt
            context:
              taskType: content-creation
        metadata:
          memoryAction: true
          executionOrder: last
inputs: {}
outputs: {}
metadata:
  originalSections:
    - Purpose
    - Inputs
    - Key Activities & Instructions
  preservedContent: []
