id: document-project
name: "[Project Name] Brownfield Architecture Document"
purpose: >-
  Generate comprehensive documentation for existing projects optimized for AI development agents. This task creates
  structured reference materials that enable AI agents to understand project context, conventions, and patterns for
  effective contribution to any codebase.
steps:
  - id: step0
    name: Initialize Memory and Context
    description: "Set up working memory and retrieve relevant context"
    actions:
      - description: "Initialize working memory for documentation task"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "Retrieve any previous project documentation context"
        elicit: false
        metadata:
          originalIndent: 0
  - id: step1
    name: Initial Project Analysis
    description: >-
      **CRITICAL:** First, check if a PRD or requirements document exists in context. If yes, use it to focus your
      documentation efforts on relevant areas only.

      **IF PRD EXISTS**:

      **IF NO PRD EXISTS**:

      Ask the user:

      "I notice you haven't provided a PRD or requirements document. To create more focused and useful documentation, I
      recommend one of these options:

      1. **Create a PRD first** - Would you like me to help create a brownfield PRD before documenting? This helps focus
      documentation on relevant areas.

      2. **Provide existing requirements** - Do you have a requirements document, epic, or feature description you can
      share?

      3. **Describe the focus** - Can you briefly describe what enhancement or feature you're planning? For example:

      4. **Document everything** - Or should I proceed with comprehensive documentation of the entire codebase? (Note:
      This may create excessive documentation for large projects)

      Please let me know your preference, or I can proceed with full documentation if you prefer."

      Based on their response:

      Begin by conducting analysis of the existing project. Use available tools to:

      1. **Project Structure Discovery**: Examine the root directory structure, identify main folders, and understand
      the overall organization

      2. **Technology Stack Identification**: Look for package.json, requirements.txt, Cargo.toml, pom.xml, etc. to
      identify languages, frameworks, and dependencies

      3. **Build System Analysis**: Find build scripts, CI/CD configurations, and development commands

      4. **Existing Documentation Review**: Check for README files, docs folders, and any existing documentation

      5. **Code Pattern Analysis**: Sample key files to understand coding patterns, naming conventions, and
      architectural approaches

      Ask the user these elicitation questions to better understand their needs:
    actions:
      - description: Review the PRD to understand what enhancement/feature is planned
        elicit: false
        metadata:
          originalIndent: 0
      - description: Identify which modules, services, or areas will be affected
        elicit: false
        metadata:
          originalIndent: 0
      - description: Focus documentation ONLY on these relevant areas
        elicit: false
        metadata:
          originalIndent: 0
      - description: Skip unrelated parts of the codebase to keep docs lean
        elicit: false
        metadata:
          originalIndent: 0
      - description: "'Adding payment processing to the user service'"
        elicit: false
        metadata:
          originalIndent: 3
      - description: "'Refactoring the authentication module'"
        elicit: false
        metadata:
          originalIndent: 3
      - description: "'Integrating with a new third-party API'"
        elicit: false
        metadata:
          originalIndent: 3
      - description: "If they choose option 1-3: Use that context to focus documentation"
        elicit: true
        metadata:
          originalIndent: 0
      - description: "If they choose option 4 or decline: Proceed with comprehensive analysis below"
        elicit: true
        metadata:
          originalIndent: 0
      - description: What is the primary purpose of this project?
        elicit: true
        metadata:
          originalIndent: 0
      - description: >-
          Are there any specific areas of the codebase that are particularly complex or important for agents to
          understand?
        elicit: true
        metadata:
          originalIndent: 0
      - description: >-
          What types of tasks do you expect AI agents to perform on this project? (e.g., bug fixes, feature additions,
          refactoring, testing)
        elicit: true
        metadata:
          originalIndent: 0
      - description: Are there any existing documentation standards or formats you prefer?
        elicit: true
        metadata:
          originalIndent: 0
      - description: >-
          What level of technical detail should the documentation target? (junior developers, senior developers, mixed
          team)
        elicit: true
        metadata:
          originalIndent: 0
      - description: Is there a specific feature or enhancement you're planning? (This helps focus documentation)
        elicit: true
        metadata:
          originalIndent: 0
    notes: >-
      **CRITICAL:** First, check if a PRD or requirements document exists in context. If yes, use it to focus your
      documentation efforts on relevant areas only.

      4. **Document everything** - Or should I proceed with comprehensive documentation of the entire codebase? (Note:
      This may create excessive documentation for large projects)

      - Are there any specific areas of the codebase that are particularly complex or important for agents to
      understand?
    metadata:
      level: 3
      originalNumber: "1"
  - id: step2
    name: Deep Codebase Analysis
    description: |-
      CRITICAL: Before generating documentation, conduct extensive analysis of the existing codebase:
      1. **Explore Key Areas**:
      2. **Ask Clarifying Questions**:
      3. **Map the Reality**:
      **IF PRD PROVIDED**: Also analyze what would need to change for the enhancement
    actions:
      - description: Entry points (main files, index files, app initializers)
        elicit: false
        metadata:
          originalIndent: 3
      - description: Configuration files and environment setup
        elicit: false
        metadata:
          originalIndent: 3
      - description: Package dependencies and versions
        elicit: false
        metadata:
          originalIndent: 3
      - description: Build and deployment configurations
        elicit: false
        metadata:
          originalIndent: 3
      - description: Test suites and coverage
        elicit: false
        metadata:
          originalIndent: 3
      - description: "\"I see you're using [technology X]. Are there any custom patterns or conventions I should document?\""
        elicit: true
        metadata:
          originalIndent: 3
      - description: "\"What are the most critical/complex parts of this system that developers struggle with?\""
        elicit: true
        metadata:
          originalIndent: 3
      - description: "\"Are there any undocumented 'tribal knowledge' areas I should capture?\""
        elicit: true
        metadata:
          originalIndent: 3
      - description: "\"What technical debt or known issues should I document?\""
        elicit: true
        metadata:
          originalIndent: 3
      - description: "\"Which parts of the codebase change most frequently?\""
        elicit: true
        metadata:
          originalIndent: 3
      - description: Identify ACTUAL patterns used (not theoretical best practices)
        elicit: false
        metadata:
          originalIndent: 3
      - description: Find where key business logic lives
        elicit: false
        metadata:
          originalIndent: 3
      - description: Locate integration points and external dependencies
        elicit: false
        metadata:
          originalIndent: 3
      - description: Document workarounds and technical debt
        elicit: false
        metadata:
          originalIndent: 3
      - description: Note areas that differ from standard patterns
        elicit: false
        metadata:
          originalIndent: 3
    notes: |-
      CRITICAL: Before generating documentation, conduct extensive analysis of the existing codebase:
         - "What are the most critical/complex parts of this system that developers struggle with?"
         - Note areas that differ from standard patterns
    metadata:
      level: 3
      originalNumber: "2"
  - id: step3
    name: Core Documentation Generation
    description: >-
      [[LLM: Generate a comprehensive BROWNFIELD architecture document that reflects the ACTUAL state of the codebase.

      **CRITICAL**: This is NOT an aspirational architecture document. Document what EXISTS, including:

      **Document Structure**:

      This document captures the CURRENT STATE of the [Project Name] codebase, including technical debt, workarounds,
      and real-world patterns. It serves as a reference for AI agents working on enhancements.

      ### Document Scope

      [If PRD provided: "Focused on areas relevant to: {enhancement description}"]

      [If no PRD: "Comprehensive documentation of entire system"]

      ### Change Log

      | Date | Version | Description | Author |

      |------|---------|-------------|--------|

      | [Date] | 1.0 | Initial brownfield analysis | [Analyst] |

      ### Critical Files for Understanding the System

      ### If PRD Provided - Enhancement Impact Areas

      [Highlight which files/modules will be affected by the planned enhancement]

      ### Technical Summary

      ### Actual Tech Stack (from package.json/requirements.txt)

      | Category | Technology | Version | Notes |

      |----------|------------|---------|--------|

      | Runtime | Node.js | 16.x | [Any constraints] |

      | Framework | Express | 4.18.2 | [Custom middleware?] |

      | Database | PostgreSQL | 13 | [Connection pooling setup] |

      etc...

      ### Repository Structure Reality Check

      ### Project Structure (Actual)

      ```text

      project-root/

      ├── src/

      │   ├── controllers/     # HTTP request handlers

      │   ├── services/        # Business logic (NOTE: inconsistent patterns between user and payment services)

      │   ├── models/          # Database models (Sequelize)

      │   ├── utils/           # Mixed bag - needs refactoring

      │   └── legacy/          # DO NOT MODIFY - old payment system still in use

      ├── tests/               # Jest tests (60% coverage)

      ├── scripts/             # Build and deployment scripts

      └── config/              # Environment configs

      ```

      ### Key Modules and Their Purpose

      ### Data Models

      Instead of duplicating, reference actual model files:

      ### API Specifications

      ### Critical Technical Debt

      1. **Payment Service**: Legacy code in `src/legacy/payment.js` - tightly coupled, no tests

      2. **User Service**: Different pattern than other services, uses callbacks instead of promises

      3. **Database Migrations**: Manually tracked, no proper migration tool

      4. **[Other significant debt]**

      ### Workarounds and Gotchas

      ### External Services

      | Service | Purpose | Integration Type | Key Files |

      |---------|---------|------------------|-----------|

      | Stripe | Payments | REST API | `src/integrations/stripe/` |

      | SendGrid | Emails | SDK | `src/services/emailService.js` |

      etc...

      ### Internal Integration Points

      ### Local Development Setup

      1. Actual steps that work (not ideal steps)

      2. Known issues with setup

      3. Required environment variables (see `.env.example`)

      ### Build and Deployment Process

      ### Current Test Coverage

      ### Running Tests

      ```bash

      npm test           # Runs unit tests

      npm run test:integration  # Runs integration tests (requires local DB)

      ```

      ### Files That Will Need Modification

      Based on the enhancement requirements, these files will be affected:

      ### New Files/Modules Needed

      ### Integration Considerations

      ### Frequently Used Commands

      ```bash

      npm run dev         # Start development server

      npm run build       # Production build

      npm run migrate     # Run database migrations

      npm run seed        # Seed test data

      ```

      ### Debugging and Troubleshooting
    actions:
      - description: Technical debt and workarounds
        elicit: false
        metadata:
          originalIndent: 0
      - description: Inconsistent patterns between different parts
        elicit: false
        metadata:
          originalIndent: 0
      - description: Legacy code that can't be changed
        elicit: false
        metadata:
          originalIndent: 0
      - description: Integration constraints
        elicit: false
        metadata:
          originalIndent: 0
      - description: Performance bottlenecks
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Main Entry**: `src/index.js` (or actual entry point)"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Configuration**: `config/app.config.js`, `.env.example`"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Core Business Logic**: `src/services/`, `src/domain/`"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**API Definitions**: `src/routes/` or link to OpenAPI spec"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Database Models**: `src/models/` or link to schema files"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Key Algorithms**: [List specific files with complex logic]"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "Type: [Monorepo/Polyrepo/Hybrid]"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "Package Manager: [npm/yarn/pnpm]"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "Notable: [Any unusual structure decisions]"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**User Management**: `src/services/userService.js` - Handles all user operations"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Authentication**: `src/middleware/auth.js` - JWT-based, custom implementation"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Payment Processing**: `src/legacy/payment.js` - CRITICAL: Do not refactor, tightly coupled"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**[List other key modules with their actual files]**"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**User Model**: See `src/models/User.js`"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Order Model**: See `src/models/Order.js`"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Related Types**: TypeScript definitions in `src/types/`"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**OpenAPI Spec**: `docs/api/openapi.yaml` (if exists)"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Postman Collection**: `docs/api/postman-collection.json`"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Manual Endpoints**: [List any undocumented endpoints discovered]"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Environment Variables**: Must set `NODE_ENV=production` even for staging (historical reason)"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Database Connections**: Connection pool hardcoded to 10, changing breaks payment service"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**[Other workarounds developers need to know]**"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Frontend Communication**: REST API on port 3000, expects specific headers"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Background Jobs**: Redis queue, see `src/workers/`"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**[Other integrations]**"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Build Command**: `npm run build` (webpack config in `webpack.config.js`)"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Deployment**: Manual deployment via `scripts/deploy.sh`"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Environments**: Dev, Staging, Prod (see `config/environments/`)"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "Unit Tests: 60% coverage (Jest)"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "Integration Tests: Minimal, in `tests/integration/`"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "E2E Tests: None"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "Manual Testing: Primary QA method"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "`src/services/userService.js` - Add new user fields"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "`src/models/User.js` - Update schema"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "`src/routes/userRoutes.js` - New endpoints"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "[etc...]"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "`src/services/newFeatureService.js` - New business logic"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "`src/models/NewFeature.js` - New data model"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "[etc...]"
        elicit: false
        metadata:
          originalIndent: 0
      - description: Will need to integrate with existing auth middleware
        elicit: false
        metadata:
          originalIndent: 0
      - description: Must follow existing response format in `src/utils/responseFormatter.js`
        elicit: false
        metadata:
          originalIndent: 0
      - description: "[Other integration points]"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Logs**: Check `logs/app.log` for application logs"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Debug Mode**: Set `DEBUG=app:*` for verbose logging"
        elicit: false
        metadata:
          originalIndent: 0
      - description: "**Common Issues**: See `docs/troubleshooting.md`]]"
        elicit: false
        metadata:
          originalIndent: 0
    notes: |-
      [[LLM: Generate a comprehensive BROWNFIELD architecture document that reflects the ACTUAL state of the codebase.
      **CRITICAL**: This is NOT an aspirational architecture document. Document what EXISTS, including:
      ### Critical Files for Understanding the System
      - **Payment Processing**: `src/legacy/payment.js` - CRITICAL: Do not refactor, tightly coupled
      ### Critical Technical Debt
    metadata:
      level: 3
      originalNumber: "3"
  - id: step4
    name: Document Delivery
    description: |-
      1. **In Web UI (Gemini, ChatGPT, Claude)**:
      2. **In IDE Environment**:
      The document should be comprehensive enough that future agents can understand:
    actions:
      - description: Present the entire document in one response (or multiple if too long)
        elicit: false
        metadata:
          originalIndent: 3
      - description: Tell user to copy and save as `docs/brownfield-architecture.md` or `docs/project-architecture.md`
        elicit: false
        metadata:
          originalIndent: 3
      - description: Mention it can be sharded later in IDE if needed
        elicit: false
        metadata:
          originalIndent: 3
      - description: Create the document as `docs/brownfield-architecture.md`
        elicit: false
        metadata:
          originalIndent: 3
      - description: Inform user this single document contains all architectural information
        elicit: false
        metadata:
          originalIndent: 3
      - description: Can be sharded later using PO agent if desired
        elicit: false
        metadata:
          originalIndent: 3
      - description: The actual state of the system (not idealized)
        elicit: false
        metadata:
          originalIndent: 0
      - description: Where to find key files and logic
        elicit: false
        metadata:
          originalIndent: 0
      - description: What technical debt exists
        elicit: false
        metadata:
          originalIndent: 0
      - description: What constraints must be respected
        elicit: false
        metadata:
          originalIndent: 0
      - description: "If PRD provided: What needs to change for the enhancement]]"
        elicit: false
        metadata:
          originalIndent: 0
    metadata:
      level: 3
      originalNumber: "4"
  - id: step5
    name: Quality Assurance
    description: |-
      CRITICAL: Before finalizing the document:
      1. **Accuracy Check**: Verify all technical details match the actual codebase
      2. **Completeness Review**: Ensure all major system components are documented
      3. **Focus Validation**: If user provided scope, verify relevant areas are emphasized
      4. **Clarity Assessment**: Check that explanations are clear for AI agents
      5. **Navigation**: Ensure document has clear section structure for easy reference
      Apply the advanced elicitation task after major sections to refine based on user feedback.
    actions:
      - description: Single comprehensive brownfield architecture document created
        elicit: false
        metadata:
          originalIndent: 0
      - description: Document reflects REALITY including technical debt and workarounds
        elicit: false
        metadata:
          originalIndent: 0
      - description: Key files and modules are referenced with actual paths
        elicit: false
        metadata:
          originalIndent: 0
      - description: Models/APIs reference source files rather than duplicating content
        elicit: false
        metadata:
          originalIndent: 0
      - description: "If PRD provided: Clear impact analysis showing what needs to change"
        elicit: false
        metadata:
          originalIndent: 0
      - description: Document enables AI agents to navigate and understand the actual codebase
        elicit: false
        metadata:
          originalIndent: 0
      - description: Technical constraints and "gotchas" are clearly documented
        elicit: false
        metadata:
          originalIndent: 0
      - description: This task creates ONE document that captures the TRUE state of the system
        elicit: true
        metadata:
          originalIndent: 0
      - description: References actual files rather than duplicating content when possible
        elicit: false
        metadata:
          originalIndent: 0
      - description: Documents technical debt, workarounds, and constraints honestly
        elicit: false
        metadata:
          originalIndent: 0
      - description: "For brownfield projects with PRD: Provides clear enhancement impact analysis"
        elicit: false
        metadata:
          originalIndent: 0
      - description: The goal is PRACTICAL documentation for AI agents doing real work
        elicit: false
        metadata:
          originalIndent: 0
    notes: "CRITICAL: Before finalizing the document:"
    metadata:
      level: 3
      originalNumber: "5"
inputs: {}
outputs: {}
metadata:
  originalSections:
    - Purpose
    - Task Instructions
    - Introduction
    - Quick Reference - Key Files and Entry Points
    - High Level Architecture
    - Source Tree and Module Organization
    - Data Models and APIs
    - Technical Debt and Known Issues
    - Integration Points and External Dependencies
    - Development and Deployment
    - Testing Reality
    - If Enhancement PRD Provided - Impact Analysis
    - Appendix - Useful Commands and Scripts
    - Success Criteria
    - Notes
  preservedContent: []
