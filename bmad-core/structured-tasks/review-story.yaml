id: review-story
name: review-story
purpose: Review story implementation and provide advisory feedback for Dev agent, maintaining context through working memory
steps:
  # Memory loading removed - no longer using memory functions
  - id: step1
    name: Update Status and Load Story Details
    description: Set story status to 'In Review' and gather implementation details
    actions:
      - description: Read the story file to understand current status and content
        elicit: false
      - description: Update the Status section to "In Review" to indicate QA review has started
        elicit: false
      - description: Understand requirements, acceptance criteria, and dev completion notes
        elicit: false
      - description: Identify all files mentioned in the implementation section
        elicit: false
      - description: Create a list of files to review based on the story implementation details
        elicit: false
  - id: step2
    name: Review Code Implementation
    description: Perform comprehensive code quality review without modifying files
    actions:
      - description: Read each implemented file to understand the code structure and logic
        elicit: false
      - description: Check code against acceptance criteria to verify all requirements are met
        elicit: true
      - description: Evaluate code quality including readability, maintainability, and adherence to project standards
        elicit: false
      - description: Identify potential bugs, edge cases, or error handling issues
        elicit: false
      - description: Assess test coverage and identify missing test scenarios
        elicit: false
      - description: If executing tests during review, prefer bounded concurrency using the project's test runner (e.g., jest --maxWorkers=50%)
        elicit: false
  - id: step3
    name: Code Quality Analysis
    description: Perform automated code quality analysis on implemented files
    actions:
      - description: Execute analyze-code-quality task on story implementation files
        elicit: false
        function: executeStructuredTask
        parameters:
          taskId: analyze-code-quality
          taskParameters:
            analysisScope: story
            outputFormat: markdown
            agentName: qa
        metadata:
          taskExecution: true
          taskType: code-quality-analysis
      - description: Review quality metrics against project thresholds
        elicit: false
      - description: Identify quality violations and areas for improvement
        elicit: false
      - description: Generate refactoring recommendations if quality issues found
        elicit: false
  - id: step4
    name: Security and Performance Analysis
    description: Review implementation for security vulnerabilities and performance concerns
    actions:
      - description: Check for common security issues like SQL injection, XSS, or authentication bypasses
        elicit: false
      - description: Review data validation and sanitization practices
        elicit: false
      - description: Analyze performance implications of the implementation
        elicit: false
      - description: Identify potential bottlenecks or resource-intensive operations
        elicit: false
  - id: step5
    name: Generate QA Report
    description: Create comprehensive QA report with recommendations for Dev agent
    actions:
      - description: Compile all findings into structured QA Results format, including quality analysis results
        elicit: false
      - description: Prioritize issues by severity and impact, incorporating quality metrics
        elicit: false
      - description: Write clear, actionable recommendations for each issue found, including quality improvements
        elicit: false
      - description: Include specific file names and line numbers where applicable
        elicit: false
      - description: Reference quality analysis report and refactoring recommendations in QA results
        elicit: false
  - id: step6
    name: Update Story File QA Section and Final Status
    description: Update the QA Results section and set final story status
    actions:
      - description: Read the current story file to preserve all existing content
        elicit: false
      - description: Update ONLY the QA Results section with the review findings, including quality metrics
        elicit: false
      - description: Determine if implementation is approved based on review findings and quality thresholds
        elicit: false
      - description: Update Status section to "Done" if approved with no issues found and quality standards met
        elicit: false
      - description: Update Status section to "Needs Fixes" if any recommendations, issues, or quality violations found
        elicit: false
      - description: Ensure no other sections of the story file are modified except Status and QA Results
        elicit: false
  - id: step7
    name: Save Review Results and Clean Memory
    description: Save review findings to memory and perform hygiene cleanup
    actions:
      # Memory saving removed - no longer using memory functions
inputs: {}
outputs: {}
metadata:
  originalSections:
    - Prerequisites
    - Review Process
    - Update Story File - QA Results Section ONLY
    - Key Principles
    - Blocking Conditions
    - Completion
  preservedContent:
    - type: special-note
      content: '   - Note any completion notes from the developer'
      lineNumber: 16
    - type: special-note
      content: '   - Identify and recommend missing tests if critical coverage is lacking'
      lineNumber: 64
    - type: special-note
      content: '**CRITICAL**: You are ONLY authorized to update the "QA Results" section of the story file. DO NOT modify any other sections.'
      lineNumber: 76
    - type: code-block
      content: |-
        ```markdown
        ## QA Results

        ### Review Date: [Date]
        ### Reviewed By: Quinn (Senior Developer QA)

        ### Code Quality Assessment
        [Overall assessment of implementation quality]
        
        **Quality Metrics:**
        - Overall Quality Score: [score]/100
        - Files Analyzed: [count]
        - Quality Grade: [A/B/C/D/F]
        
        **Quality Issues Found:**
        - Critical Issues: [count] (must fix before approval)
        - Major Issues: [count] (should fix soon)
        - Minor Issues: [count] (future improvement)
        
        **Quality Analysis Report**: [link to detailed quality report if generated]

        ### Recommended Refactoring
        [List refactoring recommendations for Dev agent to implement, including quality-based suggestions]
        - **File**: [filename]
          - **Recommendation**: [what should be changed]
          - **Why**: [reason for change including quality metrics]
          - **How**: [how it would improve the code]
          - **Quality Impact**: [expected improvement in quality score]

        ### Compliance Check
        - Coding Standards: [✓/✗] [notes if any]
        - Project Structure: [✓/✗] [notes if any]
        - Testing Strategy: [✓/✗] [notes if any]
        - Code Quality Thresholds: [✓/✗] [list any violations]
        - All ACs Met: [✓/✗] [notes if any]

        ### Improvements Checklist
        [All items remain unchecked - these are recommendations for Dev agent to implement]

        - [ ] Refactor user service for better error handling (services/user.service.ts)
        - [ ] Add missing edge case tests (services/user.service.test.ts)
        - [ ] Consider extracting validation logic to separate validator class
        - [ ] Add integration test for error scenarios
        - [ ] Update API documentation for new error codes

        ### Security Review
        [Any security concerns found - recommendations for Dev agent]

        ### Performance Considerations
        [Any performance issues found - recommendations for Dev agent]

        ### Final Status
        [✓ Approved - Ready for Done] / [✗ Needs Fixes - Dev agent should address items above]
        ```
      lineNumber: 80
    - type: special-note
      content: '- Story file is incomplete or missing critical sections'
      lineNumber: 133
    - type: special-note
      content: '- Critical architectural issues that require discussion'
      lineNumber: 137
notes: |2
     - Note any completion notes from the developer
     - Identify and recommend missing tests if critical coverage is lacking
  **CRITICAL**: You are authorized to update ONLY the "Status" and "QA Results" sections of the story file. DO NOT modify any other sections.
  **Status Updates**: Set to "In Review" at start, then "Done" (if approved) or "Needs Fixes" (if issues found) at completion.
  - Story file is incomplete or missing critical sections
  - Critical architectural issues that require discussion
  - Note: Concurrent access to story files is expected to be handled at the orchestrator level to prevent conflicts
