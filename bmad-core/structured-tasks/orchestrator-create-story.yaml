id: orchestrator-create-story
name: Orchestrator Create Story (In-Session)
purpose: Orchestrator creates a story by adopting SM persona in-session, following the same process as create-next-story.yaml
notes:
  - This task ensures consistency with SM's direct story creation
  - Uses same naming convention: {epicNum}.{storyNum}.story.md
  - Follows same validation and reading patterns as create-next-story.yaml
steps:
  - id: step1
    name: Announce Role Switch
    description: Announce transition to Scrum Master role for story creation
    actions:
      - description: Display role switch announcement to user indicating transition to Scrum Master (SM) role
        elicit: false
        metadata:
          roleSwitch: true

  - id: step2
    name: Load Scrum Master Configuration
    description: Load Scrum Master agent configuration and adopt SM persona
    actions:
      - description: Read bmad-core/agents/sm.md to understand Scrum Master behavior and adopt communication style
        elicit: false
        metadata:
          configLoad: true
      - description: Ensure all file paths are resolved from project root, looking for .bmad-core/core-config.yaml and docs/prd/
        elicit: false
        metadata:
          pathResolution: true
      - description: CRITICAL - Follow the exact same process as defined in create-next-story.yaml task, including all validations for sharded documents
        elicit: false
        metadata:
          processAlignment: true
      - description: Verify that both prdSharded AND architectureSharded are set to true in core-config.yaml - halt if not
        elicit: false
        metadata:
          shardingValidation: true

  - id: step3
    name: Read Epic Context
    description: Navigate to PRD folder and extract epic information
    actions:
      - description: Navigate to docs/prd/ folder and read the current epic file to extract story requirements
        elicit: false
        metadata:
          contextRead: true

  - id: step4
    name: Read Architecture Context
    description: Extract relevant architecture information for the story following create-next-story patterns
    actions:
      - description: Navigate to docs/architecture/ folder and read index.md first to understand file structure and naming convention
        elicit: false
        metadata:
          architectureRead: true
      - description: Based on story type, read appropriate architecture files (may use numbered prefixes like 03-technology-stack.md OR descriptive names like tech-stack.md)
        elicit: false
        metadata:
          fileSelection: true
      - description: Extract ALL relevant technical details and put them in the Dev Notes section so Dev agent never needs to read architecture files
        elicit: false
        metadata:
          contextExtraction: true

  - id: parse-story
    name: Parse Story Requirements into StoryContract
    description: From the sharded PRD and architecture docs, extract endpoints, data models, file paths and acceptance criteria and construct a StoryContract YAML block.
    actions:
      - description: Extract all API endpoints from architecture documents with their method, path, description, request body, and success response
        elicit: false
        metadata:
          originalIndent: 0
      - description: Identify all files that need to be created or modified based on the story requirements
        elicit: false
        metadata:
          originalIndent: 0
      - description: Link acceptance criteria from the epic to this story
        elicit: false
        metadata:
          originalIndent: 0
      - description: Build StoryContract YAML block with version, story_id, epic_id, apiEndpoints, filesToModify, and acceptanceCriteriaLinks
        elicit: false
        metadata:
          originalIndent: 0
      - description: CRITICAL - Do NOT summarise or invent data. Extract requirements verbatim from PRD and Architecture documents
        elicit: false
        metadata:
          originalIndent: 0
    output: storyContract
    schema: storyContractSchema

  - id: step5
    name: Create Story Content
    description: Create comprehensive story using story-tmpl.yaml template
    actions:
      - description: Use the story-tmpl.yaml template to create story with ALL sections including metadata, story contract, user story, acceptance criteria, tasks/subtasks, and comprehensive Dev Notes
        elicit: false
        metadata:
          storyCreation: true
      - description: Embed the StoryContract YAML block at the top of the story file between --- markers
        elicit: false
        metadata:
          contractEmbedding: true
      - description: Execute task `validate-story-contract` with storyFilePath set to the newly created story file path
        elicit: true
        metadata:
          contractValidation: true
      - description: If validation fails, halt the workflow and inform the user of the specific validation errors so corrections can be made
        elicit: false
        metadata:
          validationCheck: true
      - description: Ensure Dev Notes section contains ALL technical context from architecture files so Dev agent has complete information without needing to read other documents
        elicit: false
        metadata:
          devNotesCompleteness: true

  - id: step6
    name: Save Story
    description: Save the story file to the appropriate location using SM naming convention
    actions:
      - description: Create story file at docs/stories/{{epicNum}}.{{storyNum}}.story.md (e.g., 1.1.story.md, 2.3.story.md) - this matches the SM agent's create-next-story naming convention
        elicit: false
        metadata:
          fileSave: true

  - id: step7
    name: Update Context
    description: Update workflow context with story creation results
    actions:
      - description: Update .ai/handoff-context.json with created story path, metadata, and next action
        elicit: false
        metadata:
          contextUpdate: true

  - id: step8
    name: Return to Orchestrator
    description: Return control to orchestrator role
    actions:
      - description: Display story creation completion message and return to orchestrator role
        elicit: false
        metadata:
          roleReturn: true

inputs:
  epic_context:
    type: object
    required: true
    description: Current epic information from sharded PRD
  story_number:
    type: string
    required: true
    description: Story identifier (e.g., "1.1", "2.3")

outputs:
  story_created:
    type: boolean
    description: Whether story was successfully created
  story_path:
    type: string
    description: Path to created story file

metadata:
  canBeUsedBy: ["orchestrator"]
  requiresConfiguration: ["prd", "architecture"]
  category: orchestration
  complexity: medium
  version: "1.0"
  tags:
    - orchestration
    - story-creation
    - in-session

notes: |
  This task enables the orchestrator to create stories without asking
  the user to manually activate SM or provide prompts. The orchestrator
  reads the sharded documents and creates comprehensive implementation
  stories automatically.
  
  CRITICAL: This task MUST create a StoryContract exactly like create-next-story.yaml does.
  The StoryContract is mandatory and includes:
  - API endpoints extracted from architecture
  - Files to be created/modified
  - Acceptance criteria links
  - All technical requirements in structured YAML format
  
  Best practices:
  - Always read both PRD and architecture shards
  - Always create and embed the StoryContract YAML block
  - Always validate the StoryContract before proceeding
  - Include enough detail for dev to implement without questions
  - Follow the story template structure exactly
  - Make acceptance criteria specific and testable
  - Include file paths and code structure details
  
  Error handling:
  - If epic file not found, list available epics
  - If story already exists, skip to next
  - If unable to determine requirements, ask for clarification
  - If StoryContract validation fails, halt and report errors