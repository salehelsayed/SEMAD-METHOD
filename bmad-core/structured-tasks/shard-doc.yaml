id: shard-doc
name: Document Sharding Task
purpose: |-
  - Split a large document into multiple smaller documents based on level 2 sections
  - Create a folder structure to organize the sharded documents
  - Maintain all content integrity including code blocks, diagrams, and markdown formatting
steps:
  - id: load-memory
    name: Load Memory and Initialize Context
    description: Load agent working memory and relevant long-term context using unified memory system
    actions:
      - description: Load agent working memory and relevant long-term context (use loadMemoryForTaskAndExit from agent-memory-loader.js if running in a subprocess)
        elicit: false
        function: loadMemoryForTask
        parameters:
          agentName: analyst
          context:
            taskId: shard-doc
            taskType: documentation
        metadata:
          memoryAction: true
          executionOrder: first
      - description: Apply memory context to task execution planning
        elicit: true
        metadata:
          memoryAction: true
          executionOrder: after-load
  - id: config-check
    name: Check Core Configuration
    description: Check if automatic sharding is enabled in core-config.yaml
    actions:
      - description: Load .bmad-core/core-config.yaml to check prdSharded and architectureSharded settings
        elicit: false
        metadata:
          originalIndent: 0
      - description: If prdSharded or architectureSharded is true, proceed with automatic sharding
        elicit: false
        metadata:
          originalIndent: 0
      - description: If markdownExploder is true, attempt to use md-tree explode command first
        elicit: false
        metadata:
          originalIndent: 0
  - id: step0
    name: Initialize Memory Context
    description: Setup working memory and retrieve relevant context
    actions:
      - description: Initialize working memory for sharding task
        elicit: true
        metadata:
          originalIndent: 0
      - description: Record document being sharded in memory for future reference
        elicit: false
        metadata:
          originalIndent: 0
  - id: step1
    name: Create Individual Files
    description: |-
      For each extracted section:
      1. **Generate filename**: Convert the section heading to lowercase-dash-case
      2. **Adjust heading levels**:
         ```txt
           - ### → ##
           - #### → ###
           - ##### → ####
           - etc.
         ```
      3. **Write content**: Save the adjusted content to the new file
      
      CRITICAL for architecture documents: Ensure ALL sections are extracted including but not limited to:
      - high-level-architecture.md
      - tech-stack.md
      - data-models.md
      - api-specification.md
      - database-schema.md
      - frontend-architecture.md
      - backend-architecture.md
      - unified-project-structure.md
      - coding-standards.md (CRITICAL - often missing)
      - error-handling.md
      - testing-strategy.md
      - deployment-infrastructure.md
      - monitoring.md
      - security-considerations.md
    actions:
      - description: Remove special characters
        elicit: false
        metadata:
          originalIndent: 3
      - description: Replace spaces with dashes
        elicit: false
        metadata:
          originalIndent: 3
      - description: 'Example: "## Tech Stack" → `tech-stack.md`'
        elicit: false
        metadata:
          originalIndent: 3
      - description: 'The level 2 heading becomes level 1 (# instead of ##) in the sharded new document'
        elicit: false
        metadata:
          originalIndent: 3
      - description: 'All subsection levels decrease by 1:'
        elicit: false
        metadata:
          originalIndent: 3
    metadata:
      level: 3
      originalNumber: '3'
  - id: step2
    name: Create Index File
    description: |-
      Create an `index.md` file in the sharded folder that:
      1. Contains the original level 1 heading and any content before the first level 2 section
      2. Lists all the sharded files with links:
      ```markdown
      # Original Document Title

      [Original introduction content if any]

      ## Sections

      - [Section Name 1](./section-name-1.md)
      - [Section Name 2](./section-name-2.md)
      - [Section Name 3](./section-name-3.md)
        ...
      ```
    actions:
      - description: Create per-section files with bounded concurrency (suggested maxParallel=4) to optimize throughput while avoiding filesystem contention
        elicit: false
    metadata:
      level: 3
      originalNumber: '4'
  - id: step3
    name: Preserve Special Content
    description: |-
      1. **Code blocks**: Must capture complete blocks including:
         ```language
         content
         ```
      2. **Mermaid diagrams**: Preserve complete syntax:
         ```mermaid
         graph TD
         ...
         ```
      3. **Tables**: Maintain proper markdown table formatting
      4. **Lists**: Preserve indentation and nesting
      5. **Inline code**: Preserve backticks
      6. **Links and references**: Keep all markdown links intact
      7. **Template markup**: If documents contain {{placeholders}} ,preserve exactly
    actions: []
    metadata:
      level: 3
      originalNumber: '5'
  - id: step4
    name: Validation
    description: |-
      After sharding:
      1. Verify all sections were extracted
      2. Check that no content was lost
      3. Ensure heading levels were properly adjusted
      4. Confirm all files were created successfully
      5. Handle specific failure scenarios with targeted recovery
    actions:
      - description: 'CRITICAL - Verify all files were actually created by checking file system - do not just report expected files'
        elicit: true
        metadata:
          originalIndent: 0
      - description: 'Check file system permissions - if permission errors occurred, attempt to resolve or report clearly'
        elicit: true
        metadata:
          originalIndent: 0
          errorType: filesystem-permission
      - description: 'Handle partial sharding failures - if some files created but others missing, identify missing files and attempt recovery'
        elicit: true
        metadata:
          originalIndent: 0
          errorType: partial-failure
      - description: 'Validate section content integrity - check for empty or malformed sections and regenerate if needed'
        elicit: true
        metadata:
          originalIndent: 0
          errorType: content-integrity
      - description: 'Verify template markup preservation - ensure {{placeholders}} and special formatting remained intact'
        elicit: true
        metadata:
          originalIndent: 0
          errorType: template-mismatch
      - description: 'If any expected files are missing, report them explicitly and attempt to create them'
        elicit: true
        metadata:
          originalIndent: 0
          errorType: missing-files
      - description: 'Recovery procedure for permission errors: Check directory permissions, attempt chmod if needed, or suggest manual intervention'
        elicit: false
        metadata:
          originalIndent: 0
          errorType: filesystem-permission
          recoveryAction: true
      - description: 'Recovery procedure for partial failures: Re-extract missing sections from source document and create missing files'
        elicit: false
        metadata:
          originalIndent: 0
          errorType: partial-failure
          recoveryAction: true
      - description: 'Recovery procedure for empty sections: Validate section boundaries and re-parse source document to extract proper content'
        elicit: false
        metadata:
          originalIndent: 0
          errorType: content-integrity
          recoveryAction: true
      - description: 'Recovery procedure for template mismatches: Re-process sections to preserve all template markup and special formatting'
        elicit: false
        metadata:
          originalIndent: 0
          errorType: template-mismatch
          recoveryAction: true
    metadata:
      level: 3
      originalNumber: '6'
  - id: step5
    name: Update Memory with Results
    description: Record sharding results in memory
    actions:
      - description: Update working memory with sharded document structure
        elicit: false
        metadata:
          originalIndent: 0
      - description: Store document relationships for future reference
        elicit: false
        metadata:
          originalIndent: 0
  - id: step6
    name: Report Results
    description: |-
      Provide a summary report of the sharding operation:
      ```text
      Document sharded successfully:
      - Source: [original document path]
      - Destination: docs/[folder-name]/
      - Files created: [count]
      - Sections:
        - section-name-1.md: "Section Title 1"
        - section-name-2.md: "Section Title 2"
        ...
      - Validation status: [PASSED/FAILED with details]
      - Recovery actions taken: [if any]
      ```
    actions:
      - description: Report final sharding results including source, destination, and file count
        elicit: true
        metadata:
          originalIndent: 0
      - description: List all created files with their corresponding section titles
        elicit: false
        metadata:
          originalIndent: 0
      - description: Include validation status and any error recovery actions that were performed
        elicit: false
        metadata:
          originalIndent: 0
      - description: Confirm content preservation principles were followed (no content modification, only heading level adjustments)
        elicit: false
        metadata:
          originalIndent: 0
      - description: Note that formatting was preserved including whitespace and special markdown elements
        elicit: false
        metadata:
          originalIndent: 0
      - description: Confirm sharding is reversible and original document could be reconstructed from shards
        elicit: false
        metadata:
          originalIndent: 0
    metadata:
      level: 3
      originalNumber: '7'
  - id: save-memory
    name: Save Task Results and Clean Memory
    description: Save task completion and findings to memory with hygiene cleanup
    actions:
      - description: Save task completion and findings to working memory (use saveAndCleanMemoryAndExit from agent-memory-loader.js if running in a subprocess)
        elicit: true
        function: saveAndCleanMemory
        parameters:
          agentName: analyst
          taskData:
            observation: Completed shard-doc task successfully
            significantFinding: '{{TASK_SIGNIFICANT_FINDING}}'
            taskCompleted: true
            taskId: shard-doc
            context:
              taskType: documentation
        metadata:
          memoryAction: true
          executionOrder: last
inputs: {}
outputs: {}
metadata:
  originalSections:
    - Purpose
    - 'Primary Method: Automatic with markdown-tree'
    - Manual Method (if @kayvan/markdown-tree-parser is not available or user indicated manual method)
    - Important Notes
  preservedContent:
    - type: special-note
      content: '[[LLM: First, check if markdownExploder is set to true in bmad-core/core-config.yaml. If it is, attempt to run the command: `md-tree explode {input file} {output path}`.'
      lineNumber: 11
    - type: special-note
      content: '**IMPORTANT: STOP HERE - do not proceed with manual sharding until one of the above actions is taken.**"'
      lineNumber: 20
    - type: code-block
      content: |2-
           ```bash
           npm install -g @kayvan/markdown-tree-parser
           ```
      lineNumber: 35
    - type: code-block
      content: |2-
           ```bash
           # For PRD
           md-tree explode docs/prd.md docs/prd

           # For Architecture
           md-tree explode docs/architecture.md docs/architecture

           # For any document
           md-tree explode [source-document] [destination-folder]
           ```
      lineNumber: 41
    - type: special-note
      content: 'CRITICAL AGENT SHARDING RULES:'
      lineNumber: 74
    - type: special-note
      content: 'CRITICAL: Use proper parsing that understands markdown context. A ## inside a code block is NOT a section header.]]'
      lineNumber: 87
    - type: section-header
      content: Important Notes
      level: 2
    - type: section-header
      content: Important Notes
      level: 2
notes: |
  [[LLM: First, check if markdownExploder is set to true in bmad-core/core-config.yaml. If it is, attempt to run the command: `md-tree explode {input file} {output path}`.
  **IMPORTANT: STOP HERE - do not proceed with manual sharding until one of the above actions is taken.**"
  CRITICAL AEGNT SHARDING RULES:
  CRITICAL: Use proper parsing that understands markdown context. A ## inside a code block is NOT a section header.]]
