id: validate-memory-operations
name: Validate Memory Operations
purpose: Validates that all required memory operations have been executed for a story implementation
steps:
  - id: step1
    name: Load Validation Utilities
    description: Load the memory operation validator and audit utilities
    actions:
      - description: Log validation task start
        elicit: false
        function: logTaskMemory
        parameters:
          agentName: "{{agent_name}}"
          taskName: "validate-memory-operations"
          operation: "validation_start"
          taskData:
            storyId: "{{story_id}}"
            validationType: "{{validation_type}}"
        metadata:
          loggingAction: true
      - description: Load memory operation validator utility
        elicit: false

  - id: step2
    name: Execute Story Validation
    description: Run comprehensive validation on the specified story to check memory operations
    actions:
      - description: Log validation execution start
        elicit: false
        function: logTaskMemory
        parameters:
          agentName: "{{agent_name}}"
          operation: "execute_validation"
          taskData:
            storyId: "{{story_id}}"
            validationType: "memory_operations"
        metadata:
          loggingAction: true
      - description: Execute memory operation validation using the validator utility
        elicit: false
        function: executeMemoryValidation
        parameters:
          storyId: "{{story_id}}"
          validationType: "{{validation_type}}"
          verbose: "{{verbose}}"
        metadata:
          validationAction: true

  - id: step3
    name: Analyze Validation Results
    description: Process validation results and categorize any issues found
    actions:
      - description: Log validation analysis start
        elicit: false
        function: logTaskMemory
        parameters:
          agentName: "{{agent_name}}"
          operation: "analyze_results"
          taskData:
            storyId: "{{story_id}}"
        metadata:
          loggingAction: true
      - description: Analyze validation results and categorize issues by severity
        elicit: false
        function: analyzeValidationResults
        parameters:
          validationResults: "{{validation_results}}"
          storyId: "{{story_id}}"
        metadata:
          analysisAction: true

  - id: step4
    name: Generate Validation Report
    description: Create detailed validation report with findings and recommendations
    actions:
      - description: Generate comprehensive validation report
        elicit: false
        function: generateValidationReport
        parameters:
          analysisResults: "{{analysis_results}}"
          storyId: "{{story_id}}"
          includeRemediation: "{{include_remediation}}"
        metadata:
          reportAction: true
      - description: Log validation report generation
        elicit: false
        function: logTaskMemory
        parameters:
          agentName: "{{agent_name}}"
          operation: "report_generated"
          taskData:
            storyId: "{{story_id}}"
            reportSize: "{{report.length}}"
            issuesFound: "{{analysis_results.totalIssues}}"
        metadata:
          loggingAction: true

  - id: step5
    name: Handle Validation Failures
    description: Process validation failures and generate remediation plans if needed
    actions:
      - description: Check if validation passed or failed
        elicit: false
        function: checkValidationStatus
        parameters:
          validationResults: "{{validation_results}}"
        metadata:
          conditionalAction: true
      - description: Generate remediation plan for failed validations
        elicit: false
        function: generateRemediationPlan
        parameters:
          validationResults: "{{validation_results}}"
          storyId: "{{story_id}}"
        condition: "{{validation_results.passed}} === false"
        metadata:
          remediationAction: true
      - description: Log validation completion with results
        elicit: false
        function: logTaskMemory
        parameters:
          agentName: "{{agent_name}}"
          operation: "validation_complete"
          taskData:
            storyId: "{{story_id}}"
            passed: "{{validation_results.passed}}"
            criticalErrors: "{{validation_results.criticalErrors}}"
            highErrors: "{{validation_results.highErrors}}"
        metadata:
          loggingAction: true

  - id: step6
    name: Execute Remediation (Optional)
    description: Optionally execute automated remediation for certain types of validation failures
    actions:
      - description: Check if automated remediation is requested and possible
        elicit: true
        prompt: |
          Validation found {{validation_results.totalErrors}} issues in story {{story_id}}.
          
          Issues found:
          {{#each validation_results.errors}}
          - [{{severity}}] {{type}}: {{message}}
          {{/each}}
          
          Would you like to:
          1. View detailed remediation plan
          2. Attempt automated remediation (where possible)
          3. Generate manual remediation instructions
          4. Skip remediation
          
          Please select an option (1-4):
        condition: "{{validation_results.passed}} === false"
        metadata:
          elicitAction: true
      - description: Execute selected remediation option
        elicit: false
        function: executeRemediationOption
        parameters:
          selectedOption: "{{user_selection}}"
          validationResults: "{{validation_results}}"
          storyId: "{{story_id}}"
        condition: "{{user_selection}} !== '4'"
        metadata:
          remediationAction: true

  - id: step7
    name: Final Validation Check
    description: Perform final validation check if remediation was executed
    actions:
      - description: Re-run validation after remediation
        elicit: false
        function: executeMemoryValidation
        parameters:
          storyId: "{{story_id}}"
          validationType: "{{validation_type}}"
          verbose: false
        condition: "{{remediation_executed}} === true"
        metadata:
          validationAction: true
      - description: Log final validation results
        elicit: false
        function: logTaskMemory
        parameters:
          agentName: "{{agent_name}}"
          operation: "final_validation"
          taskData:
            storyId: "{{story_id}}"
            initiallyPassed: "{{validation_results.passed}}"
            finallyPassed: "{{final_validation_results.passed}}"
            remediationExecuted: "{{remediation_executed}}"
        metadata:
          loggingAction: true

inputs:
  story_id:
    type: string
    required: true
    description: The story identifier to validate memory operations for
  agent_name:
    type: string
    required: true
    description: The name of the agent performing validation (dev, qa, etc.)
  validation_type:
    type: string
    required: false
    default: "comprehensive"
    description: Type of validation to perform (comprehensive, dev-only, qa-only)
  verbose:
    type: boolean
    required: false
    default: false
    description: Whether to include detailed validation output
  include_remediation:
    type: boolean
    required: false
    default: true
    description: Whether to include remediation suggestions in the report

outputs:
  validation_passed:
    type: boolean
    description: Whether the story passed memory operation validation
  validation_report:
    type: string
    description: Detailed validation report with findings
  remediation_plan:
    type: string
    description: Remediation plan for addressing validation failures
  issues_found:
    type: array
    description: List of specific issues identified during validation
  recommendations:
    type: array
    description: List of recommendations for improving memory operations

metadata:
  canBeUsedBy: ["dev", "qa", "sm", "orchestrator"]
  requiresConfiguration: ["memory", "validation"]
  category: validation
  complexity: medium
  version: "1.0"
  tags:
    - validation
    - memory-operations
    - quality-assurance
    - compliance

notes: |
  This task provides comprehensive validation of memory operations for story implementations.
  It checks that both dev-save-memory and qa-save-memory tasks were executed with proper
  parameters and timing.
  
  Usage scenarios:
  - Before marking a story as "Ready for Review" (dev agent)
  - Before marking a story as "Done" (qa agent) 
  - During story completion audits
  - As part of quality gates in workflows
  
  The task can identify:
  - Missing memory operations
  - Invalid parameters in memory operations
  - Incorrect timing of memory operations
  - Missing final memory operations for completed stories
  
  Remediation options include:
  - Automated parameter correction (where safe)
  - Generation of missing memory operation commands
  - Manual remediation instructions
  - Integration with story update workflows
  
  Best practices:
  - Run this validation before any story status changes
  - Include in CI/CD pipelines for story quality gates
  - Use verbose mode for debugging memory operation issues
  - Regular audits of completed stories using this validation
  
  Error handling:
  - Graceful handling of missing story files
  - Validation of story file format and structure
  - Detailed error reporting for debugging
  - Safe fallback when utilities are not available