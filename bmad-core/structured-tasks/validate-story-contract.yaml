id: validate-story-contract
name: Validate StoryContract
description: Validates a StoryContract against the JSON schema and halts workflow on failure
inputs:
  - name: storyFilePath
    type: string
    description: Path to the story file containing the StoryContract
    required: true
outputs:
  - name: validationResult
    type: boolean
    description: True if validation passes, false otherwise
  - name: validationErrors
    type: array
    description: List of validation errors if any
steps:
  - id: load-memory
    name: Load Memory and Initialize Context
    description: Load agent working memory and relevant long-term context using unified memory system
    actions:
      - description: Load agent working memory and relevant long-term context
        elicit: false
        function: loadMemoryForTask
        parameters:
          agentName: qa
          context:
            taskId: validate-story-contract
            taskType: story-management
        metadata:
          memoryAction: true
          executionOrder: first
      - description: Apply memory context to task execution planning
        elicit: true
        metadata:
          memoryAction: true
          executionOrder: after-load
  - id: step0
    name: Initialize Memory and Context
    description: Set up working memory and retrieve relevant context
    action: update-working-memory
    inputs:
      agentName: qa
      taskId: validate-story-contract
      context:
        description: Initialize working memory for story contract validation
        patterns: Retrieve previous validation patterns and common issues
  - id: load-story
    name: Load story file
    description: Read the story file from the specified path
    action: file:read
    inputs:
      path: '{{storyFilePath}}'
    outputs:
      content: storyContent
  - id: extract-contract
    name: Extract StoryContract
    description: Extract the YAML StoryContract block from the story file
    action: yaml:extract-frontmatter
    inputs:
      content: '{{storyContent}}'
      key: StoryContract
    outputs:
      contractData: storyContract
  - id: validate-contract
    name: Validate against schema
    description: Run AJV validation using the validation script
    action: script:execute
    inputs:
      script: scripts/validate-story-contract.js
      args:
        - '{{storyFilePath}}'
    outputs:
      exitCode: validationExitCode
      stdout: validationOutput
      stderr: validationErrors
  - id: check-result
    name: Check validation result
    description: Determine if validation passed or failed
    action: logic:evaluate
    inputs:
      expression: '{{validationExitCode}} === 0'
    outputs:
      result: validationResult
  - id: halt-on-failure
    name: Halt on validation failure
    description: Stop workflow execution if validation failed
    action: workflow:conditional-halt
    inputs:
      condition: '!{{validationResult}}'
      errorMessage: 'StoryContract validation failed: {{validationErrors}}'
  - id: save-memory
    name: Save Task Results and Clean Memory
    description: Save task completion and findings to memory with hygiene cleanup
    actions:
      - description: Save task completion and findings to working memory
        elicit: true
        function: saveAndCleanMemory
        parameters:
          agentName: qa
          taskData:
            observation: Completed validate-story-contract task successfully
            significantFinding: '{{TASK_SIGNIFICANT_FINDING}}'
            taskCompleted: true
            taskId: validate-story-contract
            context:
              taskType: story-management
        metadata:
          memoryAction: true
          executionOrder: last
